
C:\Users\Fejes\Desktop\WSLED\Debug\WSLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001230  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080013f4  080013f4  000113f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001404  08001404  00011404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001408  08001408  00011408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  0800140c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000011c  20000004  08001410  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000120  08001410  00020120  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008d2b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000019ac  00000000  00000000  00028d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003b94  00000000  00000000  0002a70b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000550  00000000  00000000  0002e2a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a08  00000000  00000000  0002e7f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000333a  00000000  00000000  0002f1f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000021c7  00000000  00000000  00032532  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  000346f9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000d84  00000000  00000000  00034778  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080013dc 	.word	0x080013dc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080013dc 	.word	0x080013dc

08000204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000204:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000206:	4b08      	ldr	r3, [pc, #32]	; (8000228 <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000208:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800020a:	6818      	ldr	r0, [r3, #0]
 800020c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000210:	fbb0 f0f3 	udiv	r0, r0, r3
 8000214:	f000 f892 	bl	800033c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000218:	2200      	movs	r2, #0
 800021a:	4621      	mov	r1, r4
 800021c:	f04f 30ff 	mov.w	r0, #4294967295
 8000220:	f000 f84c 	bl	80002bc <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000224:	2000      	movs	r0, #0
 8000226:	bd10      	pop	{r4, pc}
 8000228:	20000000 	.word	0x20000000

0800022c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800022c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800022e:	4b0b      	ldr	r3, [pc, #44]	; (800025c <HAL_Init+0x30>)
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000236:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000238:	681a      	ldr	r2, [r3, #0]
 800023a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800023e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000246:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000248:	2003      	movs	r0, #3
 800024a:	f000 f825 	bl	8000298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800024e:	2000      	movs	r0, #0
 8000250:	f7ff ffd8 	bl	8000204 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000254:	f000 ffd2 	bl	80011fc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000258:	2000      	movs	r0, #0
 800025a:	bd08      	pop	{r3, pc}
 800025c:	40023c00 	.word	0x40023c00

08000260 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000260:	4a02      	ldr	r2, [pc, #8]	; (800026c <HAL_IncTick+0xc>)
 8000262:	6813      	ldr	r3, [r2, #0]
 8000264:	3301      	adds	r3, #1
 8000266:	6013      	str	r3, [r2, #0]
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	200000c4 	.word	0x200000c4

08000270 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000270:	4b01      	ldr	r3, [pc, #4]	; (8000278 <HAL_GetTick+0x8>)
 8000272:	6818      	ldr	r0, [r3, #0]
}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	200000c4 	.word	0x200000c4

0800027c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800027c:	b513      	push	{r0, r1, r4, lr}
 800027e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 8000280:	f7ff fff6 	bl	8000270 <HAL_GetTick>
 8000284:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000286:	f7ff fff3 	bl	8000270 <HAL_GetTick>
 800028a:	9b01      	ldr	r3, [sp, #4]
 800028c:	1b00      	subs	r0, r0, r4
 800028e:	4298      	cmp	r0, r3
 8000290:	d3f9      	bcc.n	8000286 <HAL_Delay+0xa>
  {
  }
}
 8000292:	b002      	add	sp, #8
 8000294:	bd10      	pop	{r4, pc}
	...

08000298 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000298:	4a07      	ldr	r2, [pc, #28]	; (80002b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800029a:	68d3      	ldr	r3, [r2, #12]
 800029c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80002a0:	041b      	lsls	r3, r3, #16
 80002a2:	0c1b      	lsrs	r3, r3, #16
 80002a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80002a8:	0200      	lsls	r0, r0, #8
 80002aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002ae:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80002b2:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80002b4:	60d3      	str	r3, [r2, #12]
 80002b6:	4770      	bx	lr
 80002b8:	e000ed00 	.word	0xe000ed00

080002bc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002bc:	4b17      	ldr	r3, [pc, #92]	; (800031c <HAL_NVIC_SetPriority+0x60>)
 80002be:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002c0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002c4:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002c6:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ca:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002cc:	2c04      	cmp	r4, #4
 80002ce:	bf28      	it	cs
 80002d0:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002d2:	2d06      	cmp	r5, #6

  return (
 80002d4:	f04f 0501 	mov.w	r5, #1
 80002d8:	fa05 f404 	lsl.w	r4, r5, r4
 80002dc:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002e0:	bf8c      	ite	hi
 80002e2:	3b03      	subhi	r3, #3
 80002e4:	2300      	movls	r3, #0

  return (
 80002e6:	400c      	ands	r4, r1
 80002e8:	409c      	lsls	r4, r3
 80002ea:	fa05 f303 	lsl.w	r3, r5, r3
 80002ee:	3b01      	subs	r3, #1
 80002f0:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002f2:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80002f4:	ea42 0204 	orr.w	r2, r2, r4
 80002f8:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fc:	bfaf      	iteee	ge
 80002fe:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000302:	f000 000f 	andlt.w	r0, r0, #15
 8000306:	4b06      	ldrlt	r3, [pc, #24]	; (8000320 <HAL_NVIC_SetPriority+0x64>)
 8000308:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030a:	bfa5      	ittet	ge
 800030c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000310:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000312:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000314:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000318:	bd30      	pop	{r4, r5, pc}
 800031a:	bf00      	nop
 800031c:	e000ed00 	.word	0xe000ed00
 8000320:	e000ed14 	.word	0xe000ed14

08000324 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000324:	0942      	lsrs	r2, r0, #5
 8000326:	2301      	movs	r3, #1
 8000328:	f000 001f 	and.w	r0, r0, #31
 800032c:	fa03 f000 	lsl.w	r0, r3, r0
 8000330:	4b01      	ldr	r3, [pc, #4]	; (8000338 <HAL_NVIC_EnableIRQ+0x14>)
 8000332:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000336:	4770      	bx	lr
 8000338:	e000e100 	.word	0xe000e100

0800033c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800033c:	3801      	subs	r0, #1
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d20a      	bcs.n	800035a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000346:	4a07      	ldr	r2, [pc, #28]	; (8000364 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000348:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800034a:	21f0      	movs	r1, #240	; 0xf0
 800034c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000350:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000352:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000354:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000356:	601a      	str	r2, [r3, #0]
 8000358:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 800035a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	e000e010 	.word	0xe000e010
 8000364:	e000ed00 	.word	0xe000ed00

08000368 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000368:	4b04      	ldr	r3, [pc, #16]	; (800037c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800036a:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800036c:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800036e:	bf0c      	ite	eq
 8000370:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000374:	f022 0204 	bicne.w	r2, r2, #4
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	4770      	bx	lr
 800037c:	e000e010 	.word	0xe000e010

08000380 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000380:	4770      	bx	lr

08000382 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000382:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000384:	f7ff fffc 	bl	8000380 <HAL_SYSTICK_Callback>
 8000388:	bd08      	pop	{r3, pc}

0800038a <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800038a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800038e:	2b02      	cmp	r3, #2
 8000390:	d003      	beq.n	800039a <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000392:	2380      	movs	r3, #128	; 0x80
 8000394:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000396:	2001      	movs	r0, #1
 8000398:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800039a:	6802      	ldr	r2, [r0, #0]
    return HAL_ERROR;
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800039c:	2305      	movs	r3, #5
 800039e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80003a2:	6813      	ldr	r3, [r2, #0]
 80003a4:	f023 0301 	bic.w	r3, r3, #1
 80003a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80003aa:	2000      	movs	r0, #0
}
 80003ac:	4770      	bx	lr
	...

080003b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80003b4:	4f67      	ldr	r7, [pc, #412]	; (8000554 <HAL_GPIO_Init+0x1a4>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003b6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003b8:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800055c <HAL_GPIO_Init+0x1ac>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003bc:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000560 <HAL_GPIO_Init+0x1b0>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003c0:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80003c2:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003c4:	9301      	str	r3, [sp, #4]
 80003c6:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80003c8:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80003ca:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80003cc:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80003ce:	ea34 0303 	bics.w	r3, r4, r3
 80003d2:	f040 80b7 	bne.w	8000544 <HAL_GPIO_Init+0x194>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003d6:	684d      	ldr	r5, [r1, #4]
 80003d8:	f025 0a10 	bic.w	sl, r5, #16
 80003dc:	f1ba 0f02 	cmp.w	sl, #2
 80003e0:	d114      	bne.n	800040c <HAL_GPIO_Init+0x5c>
 80003e2:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 80003e6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80003ea:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80003ee:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80003f2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80003f6:	230f      	movs	r3, #15
 80003f8:	fa03 f30b 	lsl.w	r3, r3, fp
 80003fc:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000400:	690b      	ldr	r3, [r1, #16]
 8000402:	fa03 f30b 	lsl.w	r3, r3, fp
 8000406:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000408:	f8c9 3020 	str.w	r3, [r9, #32]
 800040c:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000410:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000414:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000416:	fa09 f90b 	lsl.w	r9, r9, fp
 800041a:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800041e:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000422:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000426:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800042a:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800042e:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000430:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8000434:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000436:	d80f      	bhi.n	8000458 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000438:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 800043a:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800043c:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000440:	fa06 f60b 	lsl.w	r6, r6, fp
 8000444:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 8000446:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000448:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800044a:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800044e:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000452:	4096      	lsls	r6, r2
 8000454:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8000456:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000458:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800045a:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800045e:	688b      	ldr	r3, [r1, #8]
 8000460:	fa03 f30b 	lsl.w	r3, r3, fp
 8000464:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8000468:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800046a:	00eb      	lsls	r3, r5, #3
 800046c:	d56a      	bpl.n	8000544 <HAL_GPIO_Init+0x194>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800046e:	2300      	movs	r3, #0
 8000470:	9303      	str	r3, [sp, #12]
 8000472:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000476:	4b38      	ldr	r3, [pc, #224]	; (8000558 <HAL_GPIO_Init+0x1a8>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000478:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 800047c:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8000480:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 8000484:	f022 0903 	bic.w	r9, r2, #3
 8000488:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 800048c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000490:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 8000494:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000496:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049a:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800049c:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80004a0:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80004a4:	260f      	movs	r6, #15
 80004a6:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004aa:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80004ac:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004b0:	d018      	beq.n	80004e4 <HAL_GPIO_Init+0x134>
 80004b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d016      	beq.n	80004e8 <HAL_GPIO_Init+0x138>
 80004ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80004be:	4298      	cmp	r0, r3
 80004c0:	d014      	beq.n	80004ec <HAL_GPIO_Init+0x13c>
 80004c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d012      	beq.n	80004f0 <HAL_GPIO_Init+0x140>
 80004ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80004ce:	4298      	cmp	r0, r3
 80004d0:	d010      	beq.n	80004f4 <HAL_GPIO_Init+0x144>
 80004d2:	4540      	cmp	r0, r8
 80004d4:	d010      	beq.n	80004f8 <HAL_GPIO_Init+0x148>
 80004d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80004da:	4298      	cmp	r0, r3
 80004dc:	bf14      	ite	ne
 80004de:	2307      	movne	r3, #7
 80004e0:	2306      	moveq	r3, #6
 80004e2:	e00a      	b.n	80004fa <HAL_GPIO_Init+0x14a>
 80004e4:	2300      	movs	r3, #0
 80004e6:	e008      	b.n	80004fa <HAL_GPIO_Init+0x14a>
 80004e8:	2301      	movs	r3, #1
 80004ea:	e006      	b.n	80004fa <HAL_GPIO_Init+0x14a>
 80004ec:	2302      	movs	r3, #2
 80004ee:	e004      	b.n	80004fa <HAL_GPIO_Init+0x14a>
 80004f0:	2303      	movs	r3, #3
 80004f2:	e002      	b.n	80004fa <HAL_GPIO_Init+0x14a>
 80004f4:	2304      	movs	r3, #4
 80004f6:	e000      	b.n	80004fa <HAL_GPIO_Init+0x14a>
 80004f8:	2305      	movs	r3, #5
 80004fa:	fa03 f30a 	lsl.w	r3, r3, sl
 80004fe:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000500:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000504:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 8000506:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000508:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 800050c:	bf0c      	ite	eq
 800050e:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8000510:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 8000512:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8000516:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800051a:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 800051e:	bf0c      	ite	eq
 8000520:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8000522:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 8000524:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000526:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000528:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 800052c:	bf0c      	ite	eq
 800052e:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8000530:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 8000532:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8000536:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800053a:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 800053c:	bf54      	ite	pl
 800053e:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000540:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 8000542:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000544:	3201      	adds	r2, #1
 8000546:	2a10      	cmp	r2, #16
 8000548:	f47f af3e 	bne.w	80003c8 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 800054c:	b005      	add	sp, #20
 800054e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000552:	bf00      	nop
 8000554:	40013c00 	.word	0x40013c00
 8000558:	40020000 	.word	0x40020000
 800055c:	40023800 	.word	0x40023800
 8000560:	40021400 	.word	0x40021400

08000564 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000564:	b902      	cbnz	r2, 8000568 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000566:	0409      	lsls	r1, r1, #16
 8000568:	6181      	str	r1, [r0, #24]
 800056a:	4770      	bx	lr

0800056c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800056c:	6943      	ldr	r3, [r0, #20]
 800056e:	4059      	eors	r1, r3
 8000570:	6141      	str	r1, [r0, #20]
 8000572:	4770      	bx	lr

08000574 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000574:	4b55      	ldr	r3, [pc, #340]	; (80006cc <HAL_RCC_ClockConfig+0x158>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	f002 020f 	and.w	r2, r2, #15
 800057c:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800057e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000582:	4605      	mov	r5, r0
 8000584:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000586:	d30a      	bcc.n	800059e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000588:	6829      	ldr	r1, [r5, #0]
 800058a:	0788      	lsls	r0, r1, #30
 800058c:	d511      	bpl.n	80005b2 <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800058e:	4850      	ldr	r0, [pc, #320]	; (80006d0 <HAL_RCC_ClockConfig+0x15c>)
 8000590:	6883      	ldr	r3, [r0, #8]
 8000592:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000596:	68ab      	ldr	r3, [r5, #8]
 8000598:	4313      	orrs	r3, r2
 800059a:	6083      	str	r3, [r0, #8]
 800059c:	e009      	b.n	80005b2 <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800059e:	b2ca      	uxtb	r2, r1
 80005a0:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f003 030f 	and.w	r3, r3, #15
 80005a8:	4299      	cmp	r1, r3
 80005aa:	d0ed      	beq.n	8000588 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 80005ac:	2001      	movs	r0, #1
 80005ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80005b2:	07c9      	lsls	r1, r1, #31
 80005b4:	d406      	bmi.n	80005c4 <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80005b6:	4b45      	ldr	r3, [pc, #276]	; (80006cc <HAL_RCC_ClockConfig+0x158>)
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	f002 020f 	and.w	r2, r2, #15
 80005be:	4296      	cmp	r6, r2
 80005c0:	d351      	bcc.n	8000666 <HAL_RCC_ClockConfig+0xf2>
 80005c2:	e057      	b.n	8000674 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80005c4:	686b      	ldr	r3, [r5, #4]
 80005c6:	4a42      	ldr	r2, [pc, #264]	; (80006d0 <HAL_RCC_ClockConfig+0x15c>)
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d103      	bne.n	80005d4 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005cc:	6812      	ldr	r2, [r2, #0]
 80005ce:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80005d2:	e008      	b.n	80005e6 <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80005d4:	1e99      	subs	r1, r3, #2
 80005d6:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80005d8:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80005da:	d802      	bhi.n	80005e2 <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80005dc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80005e0:	e001      	b.n	80005e6 <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005e2:	f012 0f02 	tst.w	r2, #2
 80005e6:	d0e1      	beq.n	80005ac <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80005e8:	4c39      	ldr	r4, [pc, #228]	; (80006d0 <HAL_RCC_ClockConfig+0x15c>)
 80005ea:	68a2      	ldr	r2, [r4, #8]
 80005ec:	f022 0203 	bic.w	r2, r2, #3
 80005f0:	4313      	orrs	r3, r2
 80005f2:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80005f4:	f7ff fe3c 	bl	8000270 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80005f8:	686b      	ldr	r3, [r5, #4]
 80005fa:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80005fc:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80005fe:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000602:	d10c      	bne.n	800061e <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000604:	68a3      	ldr	r3, [r4, #8]
 8000606:	f003 030c 	and.w	r3, r3, #12
 800060a:	2b04      	cmp	r3, #4
 800060c:	d0d3      	beq.n	80005b6 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800060e:	f7ff fe2f 	bl	8000270 <HAL_GetTick>
 8000612:	1bc0      	subs	r0, r0, r7
 8000614:	4540      	cmp	r0, r8
 8000616:	d9f5      	bls.n	8000604 <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 8000618:	2003      	movs	r0, #3
 800061a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800061e:	2b02      	cmp	r3, #2
 8000620:	d10a      	bne.n	8000638 <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000622:	68a3      	ldr	r3, [r4, #8]
 8000624:	f003 030c 	and.w	r3, r3, #12
 8000628:	2b08      	cmp	r3, #8
 800062a:	d0c4      	beq.n	80005b6 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800062c:	f7ff fe20 	bl	8000270 <HAL_GetTick>
 8000630:	1bc0      	subs	r0, r0, r7
 8000632:	4540      	cmp	r0, r8
 8000634:	d9f5      	bls.n	8000622 <HAL_RCC_ClockConfig+0xae>
 8000636:	e7ef      	b.n	8000618 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000638:	2b03      	cmp	r3, #3
 800063a:	d10f      	bne.n	800065c <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800063c:	68a3      	ldr	r3, [r4, #8]
 800063e:	f003 030c 	and.w	r3, r3, #12
 8000642:	2b0c      	cmp	r3, #12
 8000644:	d0b7      	beq.n	80005b6 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000646:	f7ff fe13 	bl	8000270 <HAL_GetTick>
 800064a:	1bc0      	subs	r0, r0, r7
 800064c:	4540      	cmp	r0, r8
 800064e:	d9f5      	bls.n	800063c <HAL_RCC_ClockConfig+0xc8>
 8000650:	e7e2      	b.n	8000618 <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000652:	f7ff fe0d 	bl	8000270 <HAL_GetTick>
 8000656:	1bc0      	subs	r0, r0, r7
 8000658:	4540      	cmp	r0, r8
 800065a:	d8dd      	bhi.n	8000618 <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800065c:	68a3      	ldr	r3, [r4, #8]
 800065e:	f013 0f0c 	tst.w	r3, #12
 8000662:	d1f6      	bne.n	8000652 <HAL_RCC_ClockConfig+0xde>
 8000664:	e7a7      	b.n	80005b6 <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000666:	b2f2      	uxtb	r2, r6
 8000668:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f003 030f 	and.w	r3, r3, #15
 8000670:	429e      	cmp	r6, r3
 8000672:	d19b      	bne.n	80005ac <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000674:	6829      	ldr	r1, [r5, #0]
 8000676:	074a      	lsls	r2, r1, #29
 8000678:	d506      	bpl.n	8000688 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800067a:	4815      	ldr	r0, [pc, #84]	; (80006d0 <HAL_RCC_ClockConfig+0x15c>)
 800067c:	6883      	ldr	r3, [r0, #8]
 800067e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000682:	68eb      	ldr	r3, [r5, #12]
 8000684:	4313      	orrs	r3, r2
 8000686:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000688:	070b      	lsls	r3, r1, #28
 800068a:	d507      	bpl.n	800069c <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800068c:	4a10      	ldr	r2, [pc, #64]	; (80006d0 <HAL_RCC_ClockConfig+0x15c>)
 800068e:	6929      	ldr	r1, [r5, #16]
 8000690:	6893      	ldr	r3, [r2, #8]
 8000692:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000696:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800069a:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800069c:	f000 f9d0 	bl	8000a40 <HAL_RCC_GetSysClockFreq>
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <HAL_RCC_ClockConfig+0x15c>)
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006a2:	22f0      	movs	r2, #240	; 0xf0
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	fa92 f2a2 	rbit	r2, r2
 80006aa:	fab2 f282 	clz	r2, r2
 80006ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80006b2:	40d3      	lsrs	r3, r2
 80006b4:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <HAL_RCC_ClockConfig+0x160>)
 80006b6:	5cd3      	ldrb	r3, [r2, r3]
 80006b8:	40d8      	lsrs	r0, r3
 80006ba:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <HAL_RCC_ClockConfig+0x164>)
 80006bc:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80006be:	2000      	movs	r0, #0
 80006c0:	f7ff fda0 	bl	8000204 <HAL_InitTick>
  
  return HAL_OK;
 80006c4:	2000      	movs	r0, #0
}
 80006c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006ca:	bf00      	nop
 80006cc:	40023c00 	.word	0x40023c00
 80006d0:	40023800 	.word	0x40023800
 80006d4:	080013f4 	.word	0x080013f4
 80006d8:	20000000 	.word	0x20000000

080006dc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80006dc:	4b01      	ldr	r3, [pc, #4]	; (80006e4 <HAL_RCC_GetHCLKFreq+0x8>)
 80006de:	6818      	ldr	r0, [r3, #0]
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	20000000 	.word	0x20000000

080006e8 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006e8:	6803      	ldr	r3, [r0, #0]
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80006ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006ee:	07de      	lsls	r6, r3, #31
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80006f0:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006f2:	d403      	bmi.n	80006fc <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80006f4:	6823      	ldr	r3, [r4, #0]
 80006f6:	079d      	lsls	r5, r3, #30
 80006f8:	d458      	bmi.n	80007ac <HAL_RCC_OscConfig+0xc4>
 80006fa:	e0b1      	b.n	8000860 <HAL_RCC_OscConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80006fc:	4b97      	ldr	r3, [pc, #604]	; (800095c <HAL_RCC_OscConfig+0x274>)
 80006fe:	689a      	ldr	r2, [r3, #8]
 8000700:	f002 020c 	and.w	r2, r2, #12
 8000704:	2a04      	cmp	r2, #4
 8000706:	d010      	beq.n	800072a <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000708:	689a      	ldr	r2, [r3, #8]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800070a:	f002 020c 	and.w	r2, r2, #12
 800070e:	2a08      	cmp	r2, #8
 8000710:	d102      	bne.n	8000718 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	0258      	lsls	r0, r3, #9
 8000716:	d408      	bmi.n	800072a <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000718:	4b90      	ldr	r3, [pc, #576]	; (800095c <HAL_RCC_OscConfig+0x274>)
 800071a:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800071c:	f002 020c 	and.w	r2, r2, #12
 8000720:	2a0c      	cmp	r2, #12
 8000722:	d10b      	bne.n	800073c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000724:	685a      	ldr	r2, [r3, #4]
 8000726:	0251      	lsls	r1, r2, #9
 8000728:	d508      	bpl.n	800073c <HAL_RCC_OscConfig+0x54>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800072a:	4b8c      	ldr	r3, [pc, #560]	; (800095c <HAL_RCC_OscConfig+0x274>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	039a      	lsls	r2, r3, #14
 8000730:	d5e0      	bpl.n	80006f4 <HAL_RCC_OscConfig+0xc>
 8000732:	6863      	ldr	r3, [r4, #4]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d1dd      	bne.n	80006f4 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8000738:	2001      	movs	r0, #1
 800073a:	e17a      	b.n	8000a32 <HAL_RCC_OscConfig+0x34a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800073c:	6862      	ldr	r2, [r4, #4]
 800073e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000742:	d104      	bne.n	800074e <HAL_RCC_OscConfig+0x66>
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	e014      	b.n	8000778 <HAL_RCC_OscConfig+0x90>
 800074e:	4d83      	ldr	r5, [pc, #524]	; (800095c <HAL_RCC_OscConfig+0x274>)
 8000750:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000754:	682b      	ldr	r3, [r5, #0]
 8000756:	d107      	bne.n	8000768 <HAL_RCC_OscConfig+0x80>
 8000758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800075c:	602b      	str	r3, [r5, #0]
 800075e:	682b      	ldr	r3, [r5, #0]
 8000760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000764:	602b      	str	r3, [r5, #0]
 8000766:	e007      	b.n	8000778 <HAL_RCC_OscConfig+0x90>
 8000768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800076c:	602b      	str	r3, [r5, #0]
 800076e:	682b      	ldr	r3, [r5, #0]
 8000770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000774:	602b      	str	r3, [r5, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000776:	b16a      	cbz	r2, 8000794 <HAL_RCC_OscConfig+0xac>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000778:	f7ff fd7a 	bl	8000270 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800077c:	4d77      	ldr	r5, [pc, #476]	; (800095c <HAL_RCC_OscConfig+0x274>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800077e:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000780:	682b      	ldr	r3, [r5, #0]
 8000782:	039b      	lsls	r3, r3, #14
 8000784:	d4b6      	bmi.n	80006f4 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000786:	f7ff fd73 	bl	8000270 <HAL_GetTick>
 800078a:	1b80      	subs	r0, r0, r6
 800078c:	2864      	cmp	r0, #100	; 0x64
 800078e:	d9f7      	bls.n	8000780 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8000790:	2003      	movs	r0, #3
 8000792:	e14e      	b.n	8000a32 <HAL_RCC_OscConfig+0x34a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000794:	f7ff fd6c 	bl	8000270 <HAL_GetTick>
 8000798:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800079a:	682b      	ldr	r3, [r5, #0]
 800079c:	039f      	lsls	r7, r3, #14
 800079e:	d5a9      	bpl.n	80006f4 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007a0:	f7ff fd66 	bl	8000270 <HAL_GetTick>
 80007a4:	1b80      	subs	r0, r0, r6
 80007a6:	2864      	cmp	r0, #100	; 0x64
 80007a8:	d9f7      	bls.n	800079a <HAL_RCC_OscConfig+0xb2>
 80007aa:	e7f1      	b.n	8000790 <HAL_RCC_OscConfig+0xa8>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80007ac:	4b6b      	ldr	r3, [pc, #428]	; (800095c <HAL_RCC_OscConfig+0x274>)
 80007ae:	689a      	ldr	r2, [r3, #8]
 80007b0:	f012 0f0c 	tst.w	r2, #12
 80007b4:	d010      	beq.n	80007d8 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80007b6:	689a      	ldr	r2, [r3, #8]
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80007b8:	f002 020c 	and.w	r2, r2, #12
 80007bc:	2a08      	cmp	r2, #8
 80007be:	d102      	bne.n	80007c6 <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	0258      	lsls	r0, r3, #9
 80007c4:	d508      	bpl.n	80007d8 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80007c6:	4a65      	ldr	r2, [pc, #404]	; (800095c <HAL_RCC_OscConfig+0x274>)
 80007c8:	6893      	ldr	r3, [r2, #8]
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80007ca:	f003 030c 	and.w	r3, r3, #12
 80007ce:	2b0c      	cmp	r3, #12
 80007d0:	d117      	bne.n	8000802 <HAL_RCC_OscConfig+0x11a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80007d2:	6853      	ldr	r3, [r2, #4]
 80007d4:	0259      	lsls	r1, r3, #9
 80007d6:	d414      	bmi.n	8000802 <HAL_RCC_OscConfig+0x11a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80007d8:	4b60      	ldr	r3, [pc, #384]	; (800095c <HAL_RCC_OscConfig+0x274>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	0792      	lsls	r2, r2, #30
 80007de:	d502      	bpl.n	80007e6 <HAL_RCC_OscConfig+0xfe>
 80007e0:	68e2      	ldr	r2, [r4, #12]
 80007e2:	2a01      	cmp	r2, #1
 80007e4:	d1a8      	bne.n	8000738 <HAL_RCC_OscConfig+0x50>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	21f8      	movs	r1, #248	; 0xf8
 80007ea:	fa91 f1a1 	rbit	r1, r1
 80007ee:	6920      	ldr	r0, [r4, #16]
 80007f0:	fab1 f181 	clz	r1, r1
 80007f4:	fa00 f101 	lsl.w	r1, r0, r1
 80007f8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80007fc:	430a      	orrs	r2, r1
 80007fe:	601a      	str	r2, [r3, #0]
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000800:	e02e      	b.n	8000860 <HAL_RCC_OscConfig+0x178>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000802:	68e2      	ldr	r2, [r4, #12]
 8000804:	4b56      	ldr	r3, [pc, #344]	; (8000960 <HAL_RCC_OscConfig+0x278>)
 8000806:	b1ea      	cbz	r2, 8000844 <HAL_RCC_OscConfig+0x15c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000808:	2201      	movs	r2, #1
 800080a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800080c:	f7ff fd30 	bl	8000270 <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000810:	4d52      	ldr	r5, [pc, #328]	; (800095c <HAL_RCC_OscConfig+0x274>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000812:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000814:	682b      	ldr	r3, [r5, #0]
 8000816:	4851      	ldr	r0, [pc, #324]	; (800095c <HAL_RCC_OscConfig+0x274>)
 8000818:	079b      	lsls	r3, r3, #30
 800081a:	d405      	bmi.n	8000828 <HAL_RCC_OscConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800081c:	f7ff fd28 	bl	8000270 <HAL_GetTick>
 8000820:	1b80      	subs	r0, r0, r6
 8000822:	2802      	cmp	r0, #2
 8000824:	d9f6      	bls.n	8000814 <HAL_RCC_OscConfig+0x12c>
 8000826:	e7b3      	b.n	8000790 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000828:	6803      	ldr	r3, [r0, #0]
 800082a:	22f8      	movs	r2, #248	; 0xf8
 800082c:	fa92 f2a2 	rbit	r2, r2
 8000830:	6921      	ldr	r1, [r4, #16]
 8000832:	fab2 f282 	clz	r2, r2
 8000836:	fa01 f202 	lsl.w	r2, r1, r2
 800083a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800083e:	4313      	orrs	r3, r2
 8000840:	6003      	str	r3, [r0, #0]
 8000842:	e00d      	b.n	8000860 <HAL_RCC_OscConfig+0x178>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000846:	f7ff fd13 	bl	8000270 <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800084a:	4d44      	ldr	r5, [pc, #272]	; (800095c <HAL_RCC_OscConfig+0x274>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800084c:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800084e:	682b      	ldr	r3, [r5, #0]
 8000850:	079f      	lsls	r7, r3, #30
 8000852:	d505      	bpl.n	8000860 <HAL_RCC_OscConfig+0x178>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000854:	f7ff fd0c 	bl	8000270 <HAL_GetTick>
 8000858:	1b80      	subs	r0, r0, r6
 800085a:	2802      	cmp	r0, #2
 800085c:	d9f7      	bls.n	800084e <HAL_RCC_OscConfig+0x166>
 800085e:	e797      	b.n	8000790 <HAL_RCC_OscConfig+0xa8>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000860:	6823      	ldr	r3, [r4, #0]
 8000862:	071e      	lsls	r6, r3, #28
 8000864:	d403      	bmi.n	800086e <HAL_RCC_OscConfig+0x186>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000866:	6823      	ldr	r3, [r4, #0]
 8000868:	075d      	lsls	r5, r3, #29
 800086a:	d548      	bpl.n	80008fe <HAL_RCC_OscConfig+0x216>
 800086c:	e01f      	b.n	80008ae <HAL_RCC_OscConfig+0x1c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800086e:	6962      	ldr	r2, [r4, #20]
 8000870:	4b3c      	ldr	r3, [pc, #240]	; (8000964 <HAL_RCC_OscConfig+0x27c>)
 8000872:	b172      	cbz	r2, 8000892 <HAL_RCC_OscConfig+0x1aa>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000874:	2201      	movs	r2, #1
 8000876:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000878:	f7ff fcfa 	bl	8000270 <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800087c:	4d37      	ldr	r5, [pc, #220]	; (800095c <HAL_RCC_OscConfig+0x274>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800087e:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000880:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000882:	0798      	lsls	r0, r3, #30
 8000884:	d4ef      	bmi.n	8000866 <HAL_RCC_OscConfig+0x17e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000886:	f7ff fcf3 	bl	8000270 <HAL_GetTick>
 800088a:	1b80      	subs	r0, r0, r6
 800088c:	2802      	cmp	r0, #2
 800088e:	d9f7      	bls.n	8000880 <HAL_RCC_OscConfig+0x198>
 8000890:	e77e      	b.n	8000790 <HAL_RCC_OscConfig+0xa8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000892:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000894:	f7ff fcec 	bl	8000270 <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000898:	4d30      	ldr	r5, [pc, #192]	; (800095c <HAL_RCC_OscConfig+0x274>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800089a:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800089c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800089e:	0799      	lsls	r1, r3, #30
 80008a0:	d5e1      	bpl.n	8000866 <HAL_RCC_OscConfig+0x17e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008a2:	f7ff fce5 	bl	8000270 <HAL_GetTick>
 80008a6:	1b80      	subs	r0, r0, r6
 80008a8:	2802      	cmp	r0, #2
 80008aa:	d9f7      	bls.n	800089c <HAL_RCC_OscConfig+0x1b4>
 80008ac:	e770      	b.n	8000790 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	9301      	str	r3, [sp, #4]
 80008b2:	4b2a      	ldr	r3, [pc, #168]	; (800095c <HAL_RCC_OscConfig+0x274>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80008b4:	4d2c      	ldr	r5, [pc, #176]	; (8000968 <HAL_RCC_OscConfig+0x280>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008bc:	641a      	str	r2, [r3, #64]	; 0x40
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80008c8:	682b      	ldr	r3, [r5, #0]
 80008ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ce:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80008d0:	f7ff fcce 	bl	8000270 <HAL_GetTick>
 80008d4:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80008d6:	682b      	ldr	r3, [r5, #0]
 80008d8:	05da      	lsls	r2, r3, #23
 80008da:	d513      	bpl.n	8000904 <HAL_RCC_OscConfig+0x21c>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008dc:	68a3      	ldr	r3, [r4, #8]
 80008de:	4d1f      	ldr	r5, [pc, #124]	; (800095c <HAL_RCC_OscConfig+0x274>)
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d115      	bne.n	8000910 <HAL_RCC_OscConfig+0x228>
 80008e4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80008ec:	f7ff fcc0 	bl	8000270 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008f0:	4d1a      	ldr	r5, [pc, #104]	; (800095c <HAL_RCC_OscConfig+0x274>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80008f2:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008f4:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80008fa:	079b      	lsls	r3, r3, #30
 80008fc:	d519      	bpl.n	8000932 <HAL_RCC_OscConfig+0x24a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008fe:	69a2      	ldr	r2, [r4, #24]
 8000900:	bba2      	cbnz	r2, 800096c <HAL_RCC_OscConfig+0x284>
 8000902:	e07b      	b.n	80009fc <HAL_RCC_OscConfig+0x314>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000904:	f7ff fcb4 	bl	8000270 <HAL_GetTick>
 8000908:	1b80      	subs	r0, r0, r6
 800090a:	2802      	cmp	r0, #2
 800090c:	d9e3      	bls.n	80008d6 <HAL_RCC_OscConfig+0x1ee>
 800090e:	e73f      	b.n	8000790 <HAL_RCC_OscConfig+0xa8>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000910:	2b05      	cmp	r3, #5
 8000912:	d104      	bne.n	800091e <HAL_RCC_OscConfig+0x236>
 8000914:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000916:	f043 0304 	orr.w	r3, r3, #4
 800091a:	672b      	str	r3, [r5, #112]	; 0x70
 800091c:	e7e2      	b.n	80008e4 <HAL_RCC_OscConfig+0x1fc>
 800091e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000920:	f022 0201 	bic.w	r2, r2, #1
 8000924:	672a      	str	r2, [r5, #112]	; 0x70
 8000926:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000928:	f022 0204 	bic.w	r2, r2, #4
 800092c:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800092e:	b133      	cbz	r3, 800093e <HAL_RCC_OscConfig+0x256>
 8000930:	e7dc      	b.n	80008ec <HAL_RCC_OscConfig+0x204>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000932:	f7ff fc9d 	bl	8000270 <HAL_GetTick>
 8000936:	1b80      	subs	r0, r0, r6
 8000938:	42b8      	cmp	r0, r7
 800093a:	d9dd      	bls.n	80008f8 <HAL_RCC_OscConfig+0x210>
 800093c:	e728      	b.n	8000790 <HAL_RCC_OscConfig+0xa8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800093e:	f7ff fc97 	bl	8000270 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000942:	f241 3788 	movw	r7, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000946:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000948:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800094a:	0798      	lsls	r0, r3, #30
 800094c:	d5d7      	bpl.n	80008fe <HAL_RCC_OscConfig+0x216>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800094e:	f7ff fc8f 	bl	8000270 <HAL_GetTick>
 8000952:	1b80      	subs	r0, r0, r6
 8000954:	42b8      	cmp	r0, r7
 8000956:	d9f7      	bls.n	8000948 <HAL_RCC_OscConfig+0x260>
 8000958:	e71a      	b.n	8000790 <HAL_RCC_OscConfig+0xa8>
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800
 8000960:	42470000 	.word	0x42470000
 8000964:	42470e80 	.word	0x42470e80
 8000968:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800096c:	4d32      	ldr	r5, [pc, #200]	; (8000a38 <HAL_RCC_OscConfig+0x350>)
 800096e:	68ab      	ldr	r3, [r5, #8]
 8000970:	f003 030c 	and.w	r3, r3, #12
 8000974:	2b08      	cmp	r3, #8
 8000976:	f43f aedf 	beq.w	8000738 <HAL_RCC_OscConfig+0x50>
 800097a:	4e30      	ldr	r6, [pc, #192]	; (8000a3c <HAL_RCC_OscConfig+0x354>)
 800097c:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800097e:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000980:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000982:	d14a      	bne.n	8000a1a <HAL_RCC_OscConfig+0x332>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000984:	f7ff fc74 	bl	8000270 <HAL_GetTick>
 8000988:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800098a:	682b      	ldr	r3, [r5, #0]
 800098c:	4f2a      	ldr	r7, [pc, #168]	; (8000a38 <HAL_RCC_OscConfig+0x350>)
 800098e:	0199      	lsls	r1, r3, #6
 8000990:	d436      	bmi.n	8000a00 <HAL_RCC_OscConfig+0x318>
 8000992:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000996:	fa92 f2a2 	rbit	r2, r2
 800099a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800099e:	fab2 fc82 	clz	ip, r2
 80009a2:	fa93 f3a3 	rbit	r3, r3
 80009a6:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80009aa:	fab3 fe83 	clz	lr, r3
 80009ae:	fa91 f1a1 	rbit	r1, r1
 80009b2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80009b6:	fab1 f581 	clz	r5, r1
 80009ba:	fa92 f2a2 	rbit	r2, r2
 80009be:	69e3      	ldr	r3, [r4, #28]
 80009c0:	fab2 f082 	clz	r0, r2
 80009c4:	6a22      	ldr	r2, [r4, #32]
 80009c6:	ea43 0102 	orr.w	r1, r3, r2
 80009ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80009cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009ce:	fa02 f20c 	lsl.w	r2, r2, ip
 80009d2:	4311      	orrs	r1, r2
 80009d4:	085a      	lsrs	r2, r3, #1
 80009d6:	3a01      	subs	r2, #1
 80009d8:	fa02 f30e 	lsl.w	r3, r2, lr
 80009dc:	430b      	orrs	r3, r1
 80009de:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80009e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80009e2:	40a9      	lsls	r1, r5
 80009e4:	430b      	orrs	r3, r1
 80009e6:	4082      	lsls	r2, r0
 80009e8:	4313      	orrs	r3, r2
 80009ea:	607b      	str	r3, [r7, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80009ec:	2301      	movs	r3, #1
 80009ee:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009f0:	f7ff fc3e 	bl	8000270 <HAL_GetTick>
 80009f4:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	019a      	lsls	r2, r3, #6
 80009fa:	d508      	bpl.n	8000a0e <HAL_RCC_OscConfig+0x326>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80009fc:	2000      	movs	r0, #0
 80009fe:	e018      	b.n	8000a32 <HAL_RCC_OscConfig+0x34a>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a00:	f7ff fc36 	bl	8000270 <HAL_GetTick>
 8000a04:	ebc8 0000 	rsb	r0, r8, r0
 8000a08:	2802      	cmp	r0, #2
 8000a0a:	d9be      	bls.n	800098a <HAL_RCC_OscConfig+0x2a2>
 8000a0c:	e6c0      	b.n	8000790 <HAL_RCC_OscConfig+0xa8>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a0e:	f7ff fc2f 	bl	8000270 <HAL_GetTick>
 8000a12:	1b00      	subs	r0, r0, r4
 8000a14:	2802      	cmp	r0, #2
 8000a16:	d9ee      	bls.n	80009f6 <HAL_RCC_OscConfig+0x30e>
 8000a18:	e6ba      	b.n	8000790 <HAL_RCC_OscConfig+0xa8>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a1a:	f7ff fc29 	bl	8000270 <HAL_GetTick>
 8000a1e:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a20:	682b      	ldr	r3, [r5, #0]
 8000a22:	019b      	lsls	r3, r3, #6
 8000a24:	d5ea      	bpl.n	80009fc <HAL_RCC_OscConfig+0x314>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a26:	f7ff fc23 	bl	8000270 <HAL_GetTick>
 8000a2a:	1b00      	subs	r0, r0, r4
 8000a2c:	2802      	cmp	r0, #2
 8000a2e:	d9f7      	bls.n	8000a20 <HAL_RCC_OscConfig+0x338>
 8000a30:	e6ae      	b.n	8000790 <HAL_RCC_OscConfig+0xa8>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000a32:	b002      	add	sp, #8
 8000a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	42470060 	.word	0x42470060

08000a40 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000a40:	4930      	ldr	r1, [pc, #192]	; (8000b04 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000a42:	6888      	ldr	r0, [r1, #8]
 8000a44:	f000 000c 	and.w	r0, r0, #12
 8000a48:	2808      	cmp	r0, #8
 8000a4a:	d008      	beq.n	8000a5e <HAL_RCC_GetSysClockFreq+0x1e>
 8000a4c:	280c      	cmp	r0, #12
 8000a4e:	d02f      	beq.n	8000ab0 <HAL_RCC_GetSysClockFreq+0x70>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000a50:	4a2d      	ldr	r2, [pc, #180]	; (8000b08 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000a52:	4b2e      	ldr	r3, [pc, #184]	; (8000b0c <HAL_RCC_GetSysClockFreq+0xcc>)
 8000a54:	2804      	cmp	r0, #4
 8000a56:	bf0c      	ite	eq
 8000a58:	4618      	moveq	r0, r3
 8000a5a:	4610      	movne	r0, r2
 8000a5c:	4770      	bx	lr
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a5e:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000a60:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a62:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000a66:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000a6a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000a6e:	684b      	ldr	r3, [r1, #4]
 8000a70:	fa92 f2a2 	rbit	r2, r2
 8000a74:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000a78:	fab2 f282 	clz	r2, r2
 8000a7c:	ea01 0103 	and.w	r1, r1, r3
 8000a80:	fa21 f102 	lsr.w	r1, r1, r2
 8000a84:	bf14      	ite	ne
 8000a86:	4a21      	ldrne	r2, [pc, #132]	; (8000b0c <HAL_RCC_GetSysClockFreq+0xcc>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000a88:	4a1f      	ldreq	r2, [pc, #124]	; (8000b08 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000a8a:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000a8e:	4a1d      	ldr	r2, [pc, #116]	; (8000b04 <HAL_RCC_GetSysClockFreq+0xc4>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000a90:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000a94:	6852      	ldr	r2, [r2, #4]
 8000a96:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000a9a:	fa90 f0a0 	rbit	r0, r0
 8000a9e:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8000aa2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8000aa6:	fa22 f000 	lsr.w	r0, r2, r0
 8000aaa:	3001      	adds	r0, #1
 8000aac:	0040      	lsls	r0, r0, #1
 8000aae:	e025      	b.n	8000afc <HAL_RCC_GetSysClockFreq+0xbc>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ab0:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ab2:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ab4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ab8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000abc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000ac0:	684b      	ldr	r3, [r1, #4]
 8000ac2:	fa92 f2a2 	rbit	r2, r2
 8000ac6:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000aca:	fab2 f282 	clz	r2, r2
 8000ace:	ea01 0103 	and.w	r1, r1, r3
 8000ad2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ad6:	bf14      	ite	ne
 8000ad8:	4a0c      	ldrne	r2, [pc, #48]	; (8000b0c <HAL_RCC_GetSysClockFreq+0xcc>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000ada:	4a0b      	ldreq	r2, [pc, #44]	; (8000b08 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000adc:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 8000ae0:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <HAL_RCC_GetSysClockFreq+0xc4>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000ae2:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 8000ae6:	6852      	ldr	r2, [r2, #4]
 8000ae8:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 8000aec:	fa90 f0a0 	rbit	r0, r0
 8000af0:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllr;
 8000af4:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8000af8:	fa22 f000 	lsr.w	r0, r2, r0
 8000afc:	fbb3 f0f0 	udiv	r0, r3, r0
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800
 8000b08:	00f42400 	.word	0x00f42400
 8000b0c:	007a1200 	.word	0x007a1200

08000b10 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b14:	9e06      	ldr	r6, [sp, #24]
 8000b16:	4604      	mov	r4, r0
 8000b18:	4688      	mov	r8, r1
 8000b1a:	4617      	mov	r7, r2
 8000b1c:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000b1e:	6822      	ldr	r2, [r4, #0]
 8000b20:	6893      	ldr	r3, [r2, #8]
 8000b22:	ea38 0303 	bics.w	r3, r8, r3
 8000b26:	bf0c      	ite	eq
 8000b28:	2301      	moveq	r3, #1
 8000b2a:	2300      	movne	r3, #0
 8000b2c:	429f      	cmp	r7, r3
 8000b2e:	d033      	beq.n	8000b98 <SPI_WaitFlagStateUntilTimeout+0x88>
  {
    if(Timeout != HAL_MAX_DELAY)
 8000b30:	1c6b      	adds	r3, r5, #1
 8000b32:	d0f5      	beq.n	8000b20 <SPI_WaitFlagStateUntilTimeout+0x10>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000b34:	b94d      	cbnz	r5, 8000b4a <SPI_WaitFlagStateUntilTimeout+0x3a>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000b36:	6823      	ldr	r3, [r4, #0]
 8000b38:	685a      	ldr	r2, [r3, #4]
 8000b3a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000b3e:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000b40:	6862      	ldr	r2, [r4, #4]
 8000b42:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000b46:	d111      	bne.n	8000b6c <SPI_WaitFlagStateUntilTimeout+0x5c>
 8000b48:	e005      	b.n	8000b56 <SPI_WaitFlagStateUntilTimeout+0x46>
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000b4a:	f7ff fb91 	bl	8000270 <HAL_GetTick>
 8000b4e:	1b80      	subs	r0, r0, r6
 8000b50:	4285      	cmp	r5, r0
 8000b52:	d8e4      	bhi.n	8000b1e <SPI_WaitFlagStateUntilTimeout+0xe>
 8000b54:	e7ef      	b.n	8000b36 <SPI_WaitFlagStateUntilTimeout+0x26>
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000b56:	68a2      	ldr	r2, [r4, #8]
 8000b58:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000b5c:	d002      	beq.n	8000b64 <SPI_WaitFlagStateUntilTimeout+0x54>
 8000b5e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000b62:	d103      	bne.n	8000b6c <SPI_WaitFlagStateUntilTimeout+0x5c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000b6c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000b6e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000b72:	d108      	bne.n	8000b86 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
 8000b74:	6819      	ldr	r1, [r3, #0]
 8000b76:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 8000b7a:	400a      	ands	r2, r1
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000b84:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8000b86:	2301      	movs	r3, #1
 8000b88:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000b92:	2003      	movs	r0, #3
 8000b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000b98:	2000      	movs	r0, #0
}
 8000b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000b9e <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000b9e:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	9200      	str	r2, [sp, #0]
 8000ba4:	2180      	movs	r1, #128	; 0x80
 8000ba6:	2200      	movs	r2, #0
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000ba8:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000baa:	f7ff ffb1 	bl	8000b10 <SPI_WaitFlagStateUntilTimeout>
 8000bae:	b120      	cbz	r0, 8000bba <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000bb0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000bb2:	f043 0320 	orr.w	r3, r3, #32
 8000bb6:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8000bb8:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8000bba:	b002      	add	sp, #8
 8000bbc:	bd10      	pop	{r4, pc}

08000bbe <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000bbe:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8000bc0:	4604      	mov	r4, r0
 8000bc2:	2800      	cmp	r0, #0
 8000bc4:	d036      	beq.n	8000c34 <HAL_SPI_Init+0x76>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8000bca:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000bce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000bd2:	b91b      	cbnz	r3, 8000bdc <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000bd4:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000bd8:	f000 fb40 	bl	800125c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000bdc:	68a1      	ldr	r1, [r4, #8]
 8000bde:	6860      	ldr	r0, [r4, #4]
 8000be0:	4308      	orrs	r0, r1
 8000be2:	68e1      	ldr	r1, [r4, #12]
 8000be4:	4308      	orrs	r0, r1
 8000be6:	6921      	ldr	r1, [r4, #16]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000be8:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000bea:	4308      	orrs	r0, r1
 8000bec:	6961      	ldr	r1, [r4, #20]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000bee:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000bf2:	6823      	ldr	r3, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000bf4:	4308      	orrs	r0, r1
 8000bf6:	69e1      	ldr	r1, [r4, #28]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000bf8:	681a      	ldr	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000bfa:	4308      	orrs	r0, r1
 8000bfc:	6a21      	ldr	r1, [r4, #32]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000c04:	4308      	orrs	r0, r1
 8000c06:	69a2      	ldr	r2, [r4, #24]
 8000c08:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000c0a:	4308      	orrs	r0, r1
 8000c0c:	f402 7100 	and.w	r1, r2, #512	; 0x200
 8000c10:	4301      	orrs	r1, r0
 8000c12:	6019      	str	r1, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000c14:	0c12      	lsrs	r2, r2, #16
 8000c16:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000c18:	f002 0204 	and.w	r2, r2, #4
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000c20:	69da      	ldr	r2, [r3, #28]
 8000c22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c26:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000c28:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000c2a:	2301      	movs	r3, #1
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000c2c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000c2e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8000c32:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
    return HAL_ERROR;
 8000c34:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
}
 8000c36:	bd10      	pop	{r4, pc}

08000c38 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000c38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000c3c:	461e      	mov	r6, r3

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8000c3e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000c42:	2b01      	cmp	r3, #1
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000c44:	4604      	mov	r4, r0
 8000c46:	460d      	mov	r5, r1
 8000c48:	4690      	mov	r8, r2

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8000c4a:	f000 809e 	beq.w	8000d8a <HAL_SPI_Transmit+0x152>
 8000c4e:	2301      	movs	r3, #1
 8000c50:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000c54:	f7ff fb0c 	bl	8000270 <HAL_GetTick>
 8000c58:	4607      	mov	r7, r0

  if(hspi->State != HAL_SPI_STATE_READY)
 8000c5a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000c5e:	b2c0      	uxtb	r0, r0
 8000c60:	2801      	cmp	r0, #1
 8000c62:	f040 808a 	bne.w	8000d7a <HAL_SPI_Transmit+0x142>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if((pData == NULL ) || (Size == 0U))
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	f000 8088 	beq.w	8000d7c <HAL_SPI_Transmit+0x144>
 8000c6c:	f1b8 0f00 	cmp.w	r8, #0
 8000c70:	f000 8084 	beq.w	8000d7c <HAL_SPI_Transmit+0x144>
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000c74:	2303      	movs	r3, #3
 8000c76:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000c7e:	63a3      	str	r3, [r4, #56]	; 0x38
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;
 8000c80:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
  hspi->RxXferSize  = 0U;
 8000c84:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000c86:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000c88:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000c8a:	6423      	str	r3, [r4, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000c8c:	68a3      	ldr	r3, [r4, #8]
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000c8e:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->RxXferCount = 0U;
  hspi->TxISR       = NULL;
  hspi->RxISR       = NULL;

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c94:	6823      	ldr	r3, [r4, #0]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
 8000c96:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
  {
    SPI_1LINE_TX(hspi);
 8000c9a:	bf02      	ittt	eq
 8000c9c:	681a      	ldreq	r2, [r3, #0]
 8000c9e:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8000ca2:	601a      	streq	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	0652      	lsls	r2, r2, #25
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8000ca8:	bf5e      	ittt	pl
 8000caa:	681a      	ldrpl	r2, [r3, #0]
 8000cac:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000cb0:	601a      	strpl	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000cb2:	68e2      	ldr	r2, [r4, #12]
 8000cb4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000cb8:	6862      	ldr	r2, [r4, #4]
 8000cba:	d11e      	bne.n	8000cfa <HAL_SPI_Transmit+0xc2>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000cbc:	b172      	cbz	r2, 8000cdc <HAL_SPI_Transmit+0xa4>
 8000cbe:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000cc0:	b292      	uxth	r2, r2
 8000cc2:	2a01      	cmp	r2, #1
 8000cc4:	d103      	bne.n	8000cce <HAL_SPI_Transmit+0x96>
 8000cc6:	e009      	b.n	8000cdc <HAL_SPI_Transmit+0xa4>
          hspi->TxXferCount--;
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000cc8:	b1ae      	cbz	r6, 8000cf6 <HAL_SPI_Transmit+0xbe>
 8000cca:	1c71      	adds	r1, r6, #1
 8000ccc:	d10e      	bne.n	8000cec <HAL_SPI_Transmit+0xb4>
      hspi->Instance->DR = *((uint16_t *)pData);
      pData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8000cce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	b1d3      	cbz	r3, 8000d0a <HAL_SPI_Transmit+0xd2>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000cd4:	6823      	ldr	r3, [r4, #0]
 8000cd6:	689a      	ldr	r2, [r3, #8]
 8000cd8:	0790      	lsls	r0, r2, #30
 8000cda:	d5f5      	bpl.n	8000cc8 <HAL_SPI_Transmit+0x90>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8000cdc:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000ce0:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
          hspi->TxXferCount--;
 8000ce2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000cea:	e7f0      	b.n	8000cce <HAL_SPI_Transmit+0x96>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000cec:	f7ff fac0 	bl	8000270 <HAL_GetTick>
 8000cf0:	1bc0      	subs	r0, r0, r7
 8000cf2:	4286      	cmp	r6, r0
 8000cf4:	d8eb      	bhi.n	8000cce <HAL_SPI_Transmit+0x96>
        {
          errorcode = HAL_TIMEOUT;
 8000cf6:	2003      	movs	r0, #3
 8000cf8:	e040      	b.n	8000d7c <HAL_SPI_Transmit+0x144>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8000cfa:	b1a2      	cbz	r2, 8000d26 <HAL_SPI_Transmit+0xee>
 8000cfc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000cfe:	b292      	uxth	r2, r2
 8000d00:	2a01      	cmp	r2, #1
 8000d02:	d010      	beq.n	8000d26 <HAL_SPI_Transmit+0xee>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
      pData += sizeof(uint8_t);
      hspi->TxXferCount--;
    }
    while (hspi->TxXferCount > 0U)
 8000d04:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	b94b      	cbnz	r3, 8000d1e <HAL_SPI_Transmit+0xe6>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000d0a:	9700      	str	r7, [sp, #0]
 8000d0c:	4633      	mov	r3, r6
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2102      	movs	r1, #2
 8000d12:	4620      	mov	r0, r4
 8000d14:	f7ff fefc 	bl	8000b10 <SPI_WaitFlagStateUntilTimeout>
 8000d18:	2800      	cmp	r0, #0
 8000d1a:	d1ec      	bne.n	8000cf6 <HAL_SPI_Transmit+0xbe>
 8000d1c:	e015      	b.n	8000d4a <HAL_SPI_Transmit+0x112>
      hspi->TxXferCount--;
    }
    while (hspi->TxXferCount > 0U)
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000d1e:	6823      	ldr	r3, [r4, #0]
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	0792      	lsls	r2, r2, #30
 8000d24:	d507      	bpl.n	8000d36 <HAL_SPI_Transmit+0xfe>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8000d26:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000d2a:	731a      	strb	r2, [r3, #12]
        pData += sizeof(uint8_t);
        hspi->TxXferCount--;
 8000d2c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000d34:	e7e6      	b.n	8000d04 <HAL_SPI_Transmit+0xcc>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	d0dd      	beq.n	8000cf6 <HAL_SPI_Transmit+0xbe>
 8000d3a:	1c73      	adds	r3, r6, #1
 8000d3c:	d0e2      	beq.n	8000d04 <HAL_SPI_Transmit+0xcc>
 8000d3e:	f7ff fa97 	bl	8000270 <HAL_GetTick>
 8000d42:	1bc0      	subs	r0, r0, r7
 8000d44:	4286      	cmp	r6, r0
 8000d46:	d8dd      	bhi.n	8000d04 <HAL_SPI_Transmit+0xcc>
 8000d48:	e7d5      	b.n	8000cf6 <HAL_SPI_Transmit+0xbe>
    errorcode = HAL_TIMEOUT;
    goto error;
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000d4a:	463a      	mov	r2, r7
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	4620      	mov	r0, r4
 8000d50:	f7ff ff25 	bl	8000b9e <SPI_CheckFlag_BSY>
 8000d54:	b118      	cbz	r0, 8000d5e <HAL_SPI_Transmit+0x126>
  {
    errorcode = HAL_ERROR;
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000d56:	2320      	movs	r3, #32
 8000d58:	6563      	str	r3, [r4, #84]	; 0x54
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
  {
    errorcode = HAL_ERROR;
 8000d5a:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
    goto error;
 8000d5c:	e00e      	b.n	8000d7c <HAL_SPI_Transmit+0x144>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000d5e:	68a3      	ldr	r3, [r4, #8]
 8000d60:	b933      	cbnz	r3, 8000d70 <HAL_SPI_Transmit+0x138>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000d62:	9303      	str	r3, [sp, #12]
 8000d64:	6823      	ldr	r3, [r4, #0]
 8000d66:	68da      	ldr	r2, [r3, #12]
 8000d68:	9203      	str	r2, [sp, #12]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	9303      	str	r3, [sp, #12]
 8000d6e:	9b03      	ldr	r3, [sp, #12]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000d70:	6d60      	ldr	r0, [r4, #84]	; 0x54
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();

  if(hspi->State != HAL_SPI_STATE_READY)
  {
    errorcode = HAL_BUSY;
 8000d72:	3000      	adds	r0, #0
 8000d74:	bf18      	it	ne
 8000d76:	2001      	movne	r0, #1
 8000d78:	e000      	b.n	8000d7c <HAL_SPI_Transmit+0x144>
 8000d7a:	2002      	movs	r0, #2
  {
    errorcode = HAL_ERROR;
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8000d82:	2300      	movs	r3, #0
 8000d84:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8000d88:	e000      	b.n	8000d8c <HAL_SPI_Transmit+0x154>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8000d8a:	2002      	movs	r0, #2
error:
  hspi->State = HAL_SPI_STATE_READY;
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
  return errorcode;
}
 8000d8c:	b004      	add	sp, #16
 8000d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000d92 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000d92:	4770      	bx	lr

08000d94 <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 8000d94:	6803      	ldr	r3, [r0, #0]
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8000d96:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8000d98:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8000d9a:	689a      	ldr	r2, [r3, #8]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8000d9c:	f002 0541 	and.w	r5, r2, #65	; 0x41
 8000da0:	2d01      	cmp	r5, #1
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8000da2:	b085      	sub	sp, #20
 8000da4:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
  uint32_t itflag   = hspi->Instance->SR;

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8000da6:	d103      	bne.n	8000db0 <HAL_SPI_IRQHandler+0x1c>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8000da8:	064d      	lsls	r5, r1, #25
 8000daa:	d501      	bpl.n	8000db0 <HAL_SPI_IRQHandler+0x1c>
  {
    hspi->RxISR(hspi);
 8000dac:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000dae:	e005      	b.n	8000dbc <HAL_SPI_IRQHandler+0x28>
    return;
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8000db0:	0795      	lsls	r5, r2, #30
 8000db2:	d505      	bpl.n	8000dc0 <HAL_SPI_IRQHandler+0x2c>
 8000db4:	0608      	lsls	r0, r1, #24
 8000db6:	d503      	bpl.n	8000dc0 <HAL_SPI_IRQHandler+0x2c>
  {
    hspi->TxISR(hspi);
 8000db8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000dba:	4620      	mov	r0, r4
 8000dbc:	4798      	blx	r3
    return;
 8000dbe:	e057      	b.n	8000e70 <HAL_SPI_IRQHandler+0xdc>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8000dc0:	f412 7fb0 	tst.w	r2, #352	; 0x160
 8000dc4:	d054      	beq.n	8000e70 <HAL_SPI_IRQHandler+0xdc>
 8000dc6:	068d      	lsls	r5, r1, #26
 8000dc8:	d552      	bpl.n	8000e70 <HAL_SPI_IRQHandler+0xdc>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if((itflag & SPI_FLAG_OVR) != RESET)
 8000dca:	0650      	lsls	r0, r2, #25
 8000dcc:	d517      	bpl.n	8000dfe <HAL_SPI_IRQHandler+0x6a>
    {
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 8000dce:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000dd2:	2803      	cmp	r0, #3
 8000dd4:	f04f 0500 	mov.w	r5, #0
 8000dd8:	d00a      	beq.n	8000df0 <HAL_SPI_IRQHandler+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8000dda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000ddc:	f040 0004 	orr.w	r0, r0, #4
 8000de0:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000de2:	9500      	str	r5, [sp, #0]
 8000de4:	68d8      	ldr	r0, [r3, #12]
 8000de6:	9000      	str	r0, [sp, #0]
 8000de8:	6898      	ldr	r0, [r3, #8]
 8000dea:	9000      	str	r0, [sp, #0]
 8000dec:	9800      	ldr	r0, [sp, #0]
 8000dee:	e006      	b.n	8000dfe <HAL_SPI_IRQHandler+0x6a>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000df0:	9501      	str	r5, [sp, #4]
 8000df2:	68da      	ldr	r2, [r3, #12]
 8000df4:	9201      	str	r2, [sp, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	9301      	str	r3, [sp, #4]
 8000dfa:	9b01      	ldr	r3, [sp, #4]
        return;
 8000dfc:	e038      	b.n	8000e70 <HAL_SPI_IRQHandler+0xdc>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if((itflag & SPI_FLAG_MODF) != RESET)
 8000dfe:	0695      	lsls	r5, r2, #26
 8000e00:	d50c      	bpl.n	8000e1c <HAL_SPI_IRQHandler+0x88>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8000e02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000e04:	f040 0001 	orr.w	r0, r0, #1
 8000e08:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	9002      	str	r0, [sp, #8]
 8000e0e:	6898      	ldr	r0, [r3, #8]
 8000e10:	9002      	str	r0, [sp, #8]
 8000e12:	6818      	ldr	r0, [r3, #0]
 8000e14:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8000e18:	6018      	str	r0, [r3, #0]
 8000e1a:	9802      	ldr	r0, [sp, #8]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if((itflag & SPI_FLAG_FRE) != RESET)
 8000e1c:	05d0      	lsls	r0, r2, #23
 8000e1e:	d508      	bpl.n	8000e32 <HAL_SPI_IRQHandler+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8000e20:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000e22:	f042 0208 	orr.w	r2, r2, #8
 8000e26:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	9203      	str	r2, [sp, #12]
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	9203      	str	r2, [sp, #12]
 8000e30:	9a03      	ldr	r2, [sp, #12]
    }

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000e32:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000e34:	b1e2      	cbz	r2, 8000e70 <HAL_SPI_IRQHandler+0xdc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000e3c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8000e44:	078a      	lsls	r2, r1, #30
 8000e46:	d010      	beq.n	8000e6a <HAL_SPI_IRQHandler+0xd6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8000e48:	685a      	ldr	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if(hspi->hdmarx != NULL)
 8000e4a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c

      hspi->State = HAL_SPI_STATE_READY;
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8000e4c:	f022 0203 	bic.w	r2, r2, #3
 8000e50:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if(hspi->hdmarx != NULL)
 8000e52:	b118      	cbz	r0, 8000e5c <HAL_SPI_IRQHandler+0xc8>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8000e54:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <HAL_SPI_IRQHandler+0xe0>)
 8000e56:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8000e58:	f7ff fa97 	bl	800038a <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if(hspi->hdmatx != NULL)
 8000e5c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000e5e:	b138      	cbz	r0, 8000e70 <HAL_SPI_IRQHandler+0xdc>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <HAL_SPI_IRQHandler+0xe0>)
 8000e62:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8000e64:	f7ff fa91 	bl	800038a <HAL_DMA_Abort_IT>
 8000e68:	e002      	b.n	8000e70 <HAL_SPI_IRQHandler+0xdc>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	f7ff ff91 	bl	8000d92 <HAL_SPI_ErrorCallback>
      }
    }
    return;
  }
}
 8000e70:	b005      	add	sp, #20
 8000e72:	bd30      	pop	{r4, r5, pc}
 8000e74:	08000e79 	.word	0x08000e79

08000e78 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8000e78:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000e7a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0;
 8000e80:	86c3      	strh	r3, [r0, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 8000e82:	f7ff ff86 	bl	8000d92 <HAL_SPI_ErrorCallback>
 8000e86:	bd08      	pop	{r3, pc}

08000e88 <writeLed>:
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void writeLed() {
 8000e88:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t temp[COLOR_COUNT * 8];
	uint16_t i, j ;
	for (i = 0; i < COLOR_COUNT; i++) {

		for (j = 0; j < 8; j++) {
			if ((colors[i] & (128 >> j)) != 0) {
 8000e8a:	4d12      	ldr	r5, [pc, #72]	; (8000ed4 <writeLed+0x4c>)
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void writeLed() {
 8000e8c:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
 8000e90:	466a      	mov	r2, sp
	uint8_t temp[COLOR_COUNT * 8];
	uint16_t i, j ;
	for (i = 0; i < COLOR_COUNT; i++) {

		for (j = 0; j < 8; j++) {
			if ((colors[i] & (128 >> j)) != 0) {
 8000e92:	2000      	movs	r0, #0
 8000e94:	4669      	mov	r1, sp
 8000e96:	2680      	movs	r6, #128	; 0x80
				temp[i * 8 + j] = 0b11111000;
			} else
				temp[i * 8 + j] = 0b11000000;
 8000e98:	27c0      	movs	r7, #192	; 0xc0
	uint16_t i, j ;
	for (i = 0; i < COLOR_COUNT; i++) {

		for (j = 0; j < 8; j++) {
			if ((colors[i] & (128 >> j)) != 0) {
				temp[i * 8 + j] = 0b11111000;
 8000e9a:	f04f 0ef8 	mov.w	lr, #248	; 0xf8
	uint8_t temp[COLOR_COUNT * 8];
	uint16_t i, j ;
	for (i = 0; i < COLOR_COUNT; i++) {

		for (j = 0; j < 8; j++) {
			if ((colors[i] & (128 >> j)) != 0) {
 8000e9e:	5d44      	ldrb	r4, [r0, r5]
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	fa46 fc03 	asr.w	ip, r6, r3
 8000ea6:	ea1c 0f04 	tst.w	ip, r4
				temp[i * 8 + j] = 0b11111000;
 8000eaa:	bf14      	ite	ne
 8000eac:	f802 e003 	strbne.w	lr, [r2, r3]
			} else
				temp[i * 8 + j] = 0b11000000;
 8000eb0:	54d7      	strbeq	r7, [r2, r3]
 8000eb2:	3301      	adds	r3, #1
void writeLed() {
	uint8_t temp[COLOR_COUNT * 8];
	uint16_t i, j ;
	for (i = 0; i < COLOR_COUNT; i++) {

		for (j = 0; j < 8; j++) {
 8000eb4:	2b08      	cmp	r3, #8
 8000eb6:	d1f4      	bne.n	8000ea2 <writeLed+0x1a>
 8000eb8:	3001      	adds	r0, #1

/* USER CODE BEGIN 0 */
void writeLed() {
	uint8_t temp[COLOR_COUNT * 8];
	uint16_t i, j ;
	for (i = 0; i < COLOR_COUNT; i++) {
 8000eba:	28a2      	cmp	r0, #162	; 0xa2
 8000ebc:	f102 0208 	add.w	r2, r2, #8
 8000ec0:	d1ed      	bne.n	8000e9e <writeLed+0x16>
				hspi2.TxXferCount--;
			}
		}
*/

	HAL_SPI_Transmit(&hspi2,temp,COLOR_COUNT*8,COLOR_COUNT*8*10000);
 8000ec2:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <writeLed+0x50>)
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <writeLed+0x54>)
 8000ec6:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8000eca:	f7ff feb5 	bl	8000c38 <HAL_SPI_Transmit>


	//}

}
 8000ece:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
 8000ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ed4:	20000020 	.word	0x20000020
 8000ed8:	00c5c100 	.word	0x00c5c100
 8000edc:	200000c8 	.word	0x200000c8

08000ee0 <resetLed>:

void resetLed(){
 8000ee0:	b500      	push	{lr}
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	b09b      	sub	sp, #108	; 0x6c
	uint8_t temp[100];
	uint8_t i;
	for(i=0;i<100;i++){
		temp[i]=0;
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	a901      	add	r1, sp, #4
 8000eea:	5453      	strb	r3, [r2, r1]
 8000eec:	3201      	adds	r2, #1
}

void resetLed(){
	uint8_t temp[100];
	uint8_t i;
	for(i=0;i<100;i++){
 8000eee:	2a64      	cmp	r2, #100	; 0x64
 8000ef0:	d1fa      	bne.n	8000ee8 <resetLed+0x8>
		temp[i]=0;
	}
	HAL_SPI_Transmit(&hspi2,temp,100,10000);
 8000ef2:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ef6:	4803      	ldr	r0, [pc, #12]	; (8000f04 <resetLed+0x24>)
 8000ef8:	f7ff fe9e 	bl	8000c38 <HAL_SPI_Transmit>



}
 8000efc:	b01b      	add	sp, #108	; 0x6c
 8000efe:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f02:	bf00      	nop
 8000f04:	200000c8 	.word	0x200000c8

08000f08 <setColor>:


void setColor(uint8_t g, uint8_t r, uint8_t b)
{
 8000f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f0a:	4d0c      	ldr	r5, [pc, #48]	; (8000f3c <setColor+0x34>)
 8000f0c:	2600      	movs	r6, #0
	uint8_t t;
	  for(t = 0; t < COLOR_COUNT; t++)
	  {
		  if(t%3 == 0)
 8000f0e:	2703      	movs	r7, #3
 8000f10:	b2f4      	uxtb	r4, r6
 8000f12:	fbb4 f3f7 	udiv	r3, r4, r7
 8000f16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000f1a:	1ae3      	subs	r3, r4, r3
 8000f1c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8000f20:	d101      	bne.n	8000f26 <setColor+0x1e>
		  {
			  colors[t] = g;
 8000f22:	7028      	strb	r0, [r5, #0]
 8000f24:	e003      	b.n	8000f2e <setColor+0x26>
		  }
		  if(t%3 == 1)
 8000f26:	2b01      	cmp	r3, #1
		  {
			  colors[t] = r;
 8000f28:	bf0c      	ite	eq
 8000f2a:	7029      	strbeq	r1, [r5, #0]
		  }
		  if(t%3 == 2)
		  {
			  colors[t] = b;
 8000f2c:	702a      	strbne	r2, [r5, #0]
 8000f2e:	3601      	adds	r6, #1


void setColor(uint8_t g, uint8_t r, uint8_t b)
{
	uint8_t t;
	  for(t = 0; t < COLOR_COUNT; t++)
 8000f30:	2ea2      	cmp	r6, #162	; 0xa2
 8000f32:	f105 0501 	add.w	r5, r5, #1
 8000f36:	d1eb      	bne.n	8000f10 <setColor+0x8>
		  {
			  colors[t] = b;
		  }
	  }

}
 8000f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000020 	.word	0x20000020

08000f40 <setColumColor>:

	  colors[(index*3)+2] = b;
}

void setColumColor(int index,int full,uint8_t g, uint8_t r, uint8_t b)
{
 8000f40:	b5f0      	push	{r4, r5, r6, r7, lr}
	int act = 0;
	for(act = 0; act < full ; act++)
	{
		  colors[(index*27 + act*3)] = g;
 8000f42:	241b      	movs	r4, #27
 8000f44:	4344      	muls	r4, r0
 8000f46:	4811      	ldr	r0, [pc, #68]	; (8000f8c <setColumColor+0x4c>)

	  colors[(index*3)+2] = b;
}

void setColumColor(int index,int full,uint8_t g, uint8_t r, uint8_t b)
{
 8000f48:	f89d 7014 	ldrb.w	r7, [sp, #20]
 8000f4c:	1905      	adds	r5, r0, r4
	int act = 0;
	for(act = 0; act < full ; act++)
 8000f4e:	2600      	movs	r6, #0
 8000f50:	428e      	cmp	r6, r1
 8000f52:	f105 0503 	add.w	r5, r5, #3
 8000f56:	da07      	bge.n	8000f68 <setColumColor+0x28>
	{
		  colors[(index*27 + act*3)] = g;
 8000f58:	f805 2c03 	strb.w	r2, [r5, #-3]

		  colors[(index*27 + act*3)+1] = r;
 8000f5c:	f805 3c02 	strb.w	r3, [r5, #-2]

		  colors[(index*27 + act*3)+2] = b;
 8000f60:	f805 7c01 	strb.w	r7, [r5, #-1]
}

void setColumColor(int index,int full,uint8_t g, uint8_t r, uint8_t b)
{
	int act = 0;
	for(act = 0; act < full ; act++)
 8000f64:	3601      	adds	r6, #1
 8000f66:	e7f3      	b.n	8000f50 <setColumColor+0x10>
 8000f68:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8000f6c:	441c      	add	r4, r3
 8000f6e:	4420      	add	r0, r4

	}

	for(act = full; act < 9 ; act++)
	{
		  colors[(index*27 + act*3)] = 0;
 8000f70:	2300      	movs	r3, #0

		  colors[(index*27 + act*3)+2] = b;

	}

	for(act = full; act < 9 ; act++)
 8000f72:	2908      	cmp	r1, #8
 8000f74:	f100 0003 	add.w	r0, r0, #3
 8000f78:	dc07      	bgt.n	8000f8a <setColumColor+0x4a>
	{
		  colors[(index*27 + act*3)] = 0;
 8000f7a:	f800 3c03 	strb.w	r3, [r0, #-3]

		  colors[(index*27 + act*3)+1] = 0;
 8000f7e:	f800 3c02 	strb.w	r3, [r0, #-2]

		  colors[(index*27 + act*3)+2] = 0;
 8000f82:	f800 3c01 	strb.w	r3, [r0, #-1]

		  colors[(index*27 + act*3)+2] = b;

	}

	for(act = full; act < 9 ; act++)
 8000f86:	3101      	adds	r1, #1
 8000f88:	e7f3      	b.n	8000f72 <setColumColor+0x32>

		  colors[(index*27 + act*3)+2] = 0;

	}

}
 8000f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f8c:	20000020 	.word	0x20000020

08000f90 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000f90:	b530      	push	{r4, r5, lr}
 8000f92:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f94:	2200      	movs	r2, #0
 8000f96:	4b27      	ldr	r3, [pc, #156]	; (8001034 <SystemClock_Config+0xa4>)
 8000f98:	9200      	str	r2, [sp, #0]
 8000f9a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000f9c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000fa0:	6419      	str	r1, [r3, #64]	; 0x40
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fa4:	4924      	ldr	r1, [pc, #144]	; (8001038 <SystemClock_Config+0xa8>)
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fae:	9201      	str	r2, [sp, #4]
 8000fb0:	680b      	ldr	r3, [r1, #0]
 8000fb2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fba:	600b      	str	r3, [r1, #0]
 8000fbc:	680b      	ldr	r3, [r1, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fbe:	920e      	str	r2, [sp, #56]	; 0x38

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000fc8:	2310      	movs	r3, #16
 8000fca:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fcc:	2308      	movs	r3, #8

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fce:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd0:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fd2:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd4:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000fd6:	2332      	movs	r3, #50	; 0x32

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd8:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fda:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fdc:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000fde:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe0:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fe2:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fe4:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe6:	f7ff fb7f 	bl	80006e8 <HAL_RCC_OscConfig>
 8000fea:	b100      	cbz	r0, 8000fee <SystemClock_Config+0x5e>
 8000fec:	e7fe      	b.n	8000fec <SystemClock_Config+0x5c>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fee:	230f      	movs	r3, #15
 8000ff0:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff2:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff8:	9006      	str	r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ffa:	4629      	mov	r1, r5
 8000ffc:	a802      	add	r0, sp, #8

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffe:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001000:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001002:	f7ff fab7 	bl	8000574 <HAL_RCC_ClockConfig>
 8001006:	4604      	mov	r4, r0
 8001008:	b100      	cbz	r0, 800100c <SystemClock_Config+0x7c>
 800100a:	e7fe      	b.n	800100a <SystemClock_Config+0x7a>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800100c:	f7ff fb66 	bl	80006dc <HAL_RCC_GetHCLKFreq>
 8001010:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001014:	fbb0 f0f3 	udiv	r0, r0, r3
 8001018:	f7ff f990 	bl	800033c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800101c:	2004      	movs	r0, #4
 800101e:	f7ff f9a3 	bl	8000368 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001022:	4622      	mov	r2, r4
 8001024:	4621      	mov	r1, r4
 8001026:	f04f 30ff 	mov.w	r0, #4294967295
 800102a:	f7ff f947 	bl	80002bc <HAL_NVIC_SetPriority>
}
 800102e:	b015      	add	sp, #84	; 0x54
 8001030:	bd30      	pop	{r4, r5, pc}
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800
 8001038:	40007000 	.word	0x40007000

0800103c <main>:
}

/* USER CODE END 0 */

int main(void)
{
 800103c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001040:	b08c      	sub	sp, #48	; 0x30
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	2400      	movs	r4, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001044:	f7ff f8f2 	bl	800022c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001048:	f7ff ffa2 	bl	8000f90 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104c:	4b65      	ldr	r3, [pc, #404]	; (80011e4 <main+0x1a8>)
 800104e:	9403      	str	r4, [sp, #12]
 8001050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001052:	4865      	ldr	r0, [pc, #404]	; (80011e8 <main+0x1ac>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001054:	f042 0204 	orr.w	r2, r2, #4
 8001058:	631a      	str	r2, [r3, #48]	; 0x30
 800105a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800105c:	f002 0204 	and.w	r2, r2, #4
 8001060:	9203      	str	r2, [sp, #12]
 8001062:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001064:	9404      	str	r4, [sp, #16]
 8001066:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001068:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800106c:	631a      	str	r2, [r3, #48]	; 0x30
 800106e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001070:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001074:	9204      	str	r2, [sp, #16]
 8001076:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001078:	9405      	str	r4, [sp, #20]
 800107a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800107c:	f042 0201 	orr.w	r2, r2, #1
 8001080:	631a      	str	r2, [r3, #48]	; 0x30
 8001082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001084:	f002 0201 	and.w	r2, r2, #1
 8001088:	9205      	str	r2, [sp, #20]
 800108a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108c:	9406      	str	r4, [sp, #24]
 800108e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001090:	f042 0202 	orr.w	r2, r2, #2
 8001094:	631a      	str	r2, [r3, #48]	; 0x30
 8001096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001098:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800109c:	4622      	mov	r2, r4

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	9306      	str	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010a0:	2120      	movs	r1, #32

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010a4:	f7ff fa5e 	bl	8000564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ac:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010ae:	a907      	add	r1, sp, #28
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010b0:	4b4e      	ldr	r3, [pc, #312]	; (80011ec <main+0x1b0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010b2:	484f      	ldr	r0, [pc, #316]	; (80011f0 <main+0x1b4>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010b4:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010b8:	f7ff f97a 	bl	80003b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010bc:	230c      	movs	r3, #12
 80010be:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c0:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2702      	movs	r7, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	a907      	add	r1, sp, #28
  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010c8:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	4847      	ldr	r0, [pc, #284]	; (80011e8 <main+0x1ac>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ce:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f7ff f96d 	bl	80003b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010d6:	2320      	movs	r3, #32
 80010d8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010da:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010dc:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010de:	4842      	ldr	r0, [pc, #264]	; (80011e8 <main+0x1ac>)
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f7ff f963 	bl	80003b0 <HAL_GPIO_Init>

/* SPI2 init function */
static void MX_SPI2_Init(void)
{

  hspi2.Instance = SPI2;
 80010ea:	4842      	ldr	r0, [pc, #264]	; (80011f4 <main+0x1b8>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010ec:	4a42      	ldr	r2, [pc, #264]	; (80011f8 <main+0x1bc>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010ee:	6084      	str	r4, [r0, #8]
/* SPI2 init function */
static void MX_SPI2_Init(void)
{

  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010f0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80010f4:	e880 000c 	stmia.w	r0, {r2, r3}
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010fc:	6183      	str	r3, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80010fe:	2308      	movs	r3, #8
 8001100:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 10;
 8001102:	230a      	movs	r3, #10
{

  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001104:	60c4      	str	r4, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001106:	6144      	str	r4, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001108:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800110a:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800110c:	6284      	str	r4, [r0, #40]	; 0x28

  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800110e:	6107      	str	r7, [r0, #16]
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 10;
 8001110:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001112:	f7ff fd54 	bl	8000bbe <HAL_SPI_Init>
 8001116:	4604      	mov	r4, r0
 8001118:	b100      	cbz	r0, 800111c <main+0xe0>
 800111a:	e7fe      	b.n	800111a <main+0xde>

  /* USER CODE BEGIN 2 */

  	int a = 0;
	int b = 0;
	setColor(0,0,0);
 800111c:	4602      	mov	r2, r0
 800111e:	4601      	mov	r1, r0
 8001120:	f7ff fef2 	bl	8000f08 <setColor>
  MX_GPIO_Init();
  MX_SPI2_Init();

  /* USER CODE BEGIN 2 */

  	int a = 0;
 8001124:	4605      	mov	r5, r0

		resetLed();



		setColumColor(0,a,0,0,5);
 8001126:	4682      	mov	sl, r0
	while (1) {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

		resetLed();
 8001128:	f7ff feda 	bl	8000ee0 <resetLed>



		setColumColor(0,a,0,0,5);
 800112c:	f04f 0805 	mov.w	r8, #5
 8001130:	2300      	movs	r3, #0
		setColumColor(1,b,2,0,1);
 8001132:	f04f 0901 	mov.w	r9, #1

		resetLed();



		setColumColor(0,a,0,0,5);
 8001136:	461a      	mov	r2, r3
 8001138:	4629      	mov	r1, r5
 800113a:	4618      	mov	r0, r3
 800113c:	f8cd 8000 	str.w	r8, [sp]
 8001140:	f7ff fefe 	bl	8000f40 <setColumColor>
		setColumColor(1,b,2,0,1);
 8001144:	f8cd 9000 	str.w	r9, [sp]
 8001148:	4621      	mov	r1, r4
 800114a:	4648      	mov	r0, r9
 800114c:	2300      	movs	r3, #0
 800114e:	2202      	movs	r2, #2
 8001150:	f7ff fef6 	bl	8000f40 <setColumColor>
		setColumColor(2,a,2,6,0);
 8001154:	2202      	movs	r2, #2
 8001156:	4629      	mov	r1, r5
 8001158:	4610      	mov	r0, r2
 800115a:	f8cd a000 	str.w	sl, [sp]
 800115e:	2306      	movs	r3, #6
 8001160:	f7ff feee 	bl	8000f40 <setColumColor>
		setColumColor(3,(b*5)%9,1,3,3);
 8001164:	2609      	movs	r6, #9
 8001166:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 800116a:	fb90 f3f6 	sdiv	r3, r0, r6
 800116e:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8001172:	2303      	movs	r3, #3
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	464a      	mov	r2, r9
 8001178:	1a41      	subs	r1, r0, r1
		setColumColor(4,(a*3)%9,5,0,2);
 800117a:	fa05 f909 	lsl.w	r9, r5, r9


		setColumColor(0,a,0,0,5);
		setColumColor(1,b,2,0,1);
		setColumColor(2,a,2,6,0);
		setColumColor(3,(b*5)%9,1,3,3);
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fede 	bl	8000f40 <setColumColor>
		setColumColor(4,(a*3)%9,5,0,2);
 8001184:	eb09 0105 	add.w	r1, r9, r5
 8001188:	fb91 f6f6 	sdiv	r6, r1, r6
 800118c:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
 8001190:	4642      	mov	r2, r8
 8001192:	1b89      	subs	r1, r1, r6
 8001194:	9700      	str	r7, [sp, #0]
 8001196:	2300      	movs	r3, #0
 8001198:	2004      	movs	r0, #4
 800119a:	f7ff fed1 	bl	8000f40 <setColumColor>
		setColumColor(5,a*2 % 7,6,6,0);
 800119e:	2306      	movs	r3, #6
 80011a0:	2107      	movs	r1, #7
 80011a2:	fb99 f1f1 	sdiv	r1, r9, r1
 80011a6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80011aa:	ebc1 0109 	rsb	r1, r1, r9
 80011ae:	461a      	mov	r2, r3
 80011b0:	4640      	mov	r0, r8

		a++; b++;
 80011b2:	3501      	adds	r5, #1
		setColumColor(0,a,0,0,5);
		setColumColor(1,b,2,0,1);
		setColumColor(2,a,2,6,0);
		setColumColor(3,(b*5)%9,1,3,3);
		setColumColor(4,(a*3)%9,5,0,2);
		setColumColor(5,a*2 % 7,6,6,0);
 80011b4:	f8cd a000 	str.w	sl, [sp]
 80011b8:	f7ff fec2 	bl	8000f40 <setColumColor>

		a++; b++;
 80011bc:	3401      	adds	r4, #1
		if(a>7) a=4;
 80011be:	2d08      	cmp	r5, #8
 80011c0:	bfa8      	it	ge
 80011c2:	2504      	movge	r5, #4
		if(b>8) b=2;
 80011c4:	2c09      	cmp	r4, #9
 80011c6:	bfa8      	it	ge
 80011c8:	2402      	movge	r4, #2



//		setColor(0,0,10);

		writeLed();
 80011ca:	f7ff fe5d 	bl	8000e88 <writeLed>

		resetLed();
 80011ce:	f7ff fe87 	bl	8000ee0 <resetLed>


		HAL_Delay(100);
 80011d2:	2064      	movs	r0, #100	; 0x64
 80011d4:	f7ff f852 	bl	800027c <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80011d8:	2120      	movs	r1, #32
 80011da:	4803      	ldr	r0, [pc, #12]	; (80011e8 <main+0x1ac>)
 80011dc:	f7ff f9c6 	bl	800056c <HAL_GPIO_TogglePin>


	}
 80011e0:	e7a2      	b.n	8001128 <main+0xec>
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020000 	.word	0x40020000
 80011ec:	10210000 	.word	0x10210000
 80011f0:	40020800 	.word	0x40020800
 80011f4:	200000c8 	.word	0x200000c8
 80011f8:	40003800 	.word	0x40003800

080011fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011fe:	2007      	movs	r0, #7
 8001200:	f7ff f84a 	bl	8000298 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001204:	2200      	movs	r2, #0
 8001206:	4611      	mov	r1, r2
 8001208:	f06f 000b 	mvn.w	r0, #11
 800120c:	f7ff f856 	bl	80002bc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001210:	2200      	movs	r2, #0
 8001212:	4611      	mov	r1, r2
 8001214:	f06f 000a 	mvn.w	r0, #10
 8001218:	f7ff f850 	bl	80002bc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	4611      	mov	r1, r2
 8001220:	f06f 0009 	mvn.w	r0, #9
 8001224:	f7ff f84a 	bl	80002bc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	4611      	mov	r1, r2
 800122c:	f06f 0004 	mvn.w	r0, #4
 8001230:	f7ff f844 	bl	80002bc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001234:	2200      	movs	r2, #0
 8001236:	4611      	mov	r1, r2
 8001238:	f06f 0003 	mvn.w	r0, #3
 800123c:	f7ff f83e 	bl	80002bc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001240:	2200      	movs	r2, #0
 8001242:	4611      	mov	r1, r2
 8001244:	f06f 0001 	mvn.w	r0, #1
 8001248:	f7ff f838 	bl	80002bc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	4611      	mov	r1, r2
 8001250:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001254:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001258:	f7ff b830 	b.w	80002bc <HAL_NVIC_SetPriority>

0800125c <HAL_SPI_MspInit>:

  /* USER CODE END MspInit 1 */
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800125c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI2)
 800125e:	6802      	ldr	r2, [r0, #0]
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <HAL_SPI_MspInit+0x6c>)
 8001262:	429a      	cmp	r2, r3

  /* USER CODE END MspInit 1 */
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001264:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI2)
 8001266:	d12c      	bne.n	80012c2 <HAL_SPI_MspInit+0x66>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001268:	2400      	movs	r4, #0
 800126a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800126e:	9400      	str	r4, [sp, #0]
 8001270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001272:	4816      	ldr	r0, [pc, #88]	; (80012cc <HAL_SPI_MspInit+0x70>)
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001274:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001278:	641a      	str	r2, [r3, #64]	; 0x40
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	9403      	str	r4, [sp, #12]
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800127e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001282:	9300      	str	r3, [sp, #0]
  
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001284:	2502      	movs	r5, #2
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001286:	9b00      	ldr	r3, [sp, #0]
  
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001288:	9501      	str	r5, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800128a:	2307      	movs	r3, #7
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128e:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001290:	9305      	str	r3, [sp, #20]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001296:	f7ff f88b 	bl	80003b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800129a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800129e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a0:	a901      	add	r1, sp, #4

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012a2:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a4:	480a      	ldr	r0, [pc, #40]	; (80012d0 <HAL_SPI_MspInit+0x74>)

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012a6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ac:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ae:	f7ff f87f 	bl	80003b0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80012b2:	2024      	movs	r0, #36	; 0x24
 80012b4:	4622      	mov	r2, r4
 80012b6:	4621      	mov	r1, r4
 80012b8:	f7ff f800 	bl	80002bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80012bc:	2024      	movs	r0, #36	; 0x24
 80012be:	f7ff f831 	bl	8000324 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012c2:	b006      	add	sp, #24
 80012c4:	bd70      	pop	{r4, r5, r6, pc}
 80012c6:	bf00      	nop
 80012c8:	40003800 	.word	0x40003800
 80012cc:	40020800 	.word	0x40020800
 80012d0:	40020400 	.word	0x40020400

080012d4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80012d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d6:	f7fe ffc3 	bl	8000260 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 80012de:	f7ff b850 	b.w	8000382 <HAL_SYSTICK_IRQHandler>
	...

080012e4 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80012e4:	4801      	ldr	r0, [pc, #4]	; (80012ec <SPI2_IRQHandler+0x8>)
 80012e6:	f7ff bd55 	b.w	8000d94 <HAL_SPI_IRQHandler>
 80012ea:	bf00      	nop
 80012ec:	200000c8 	.word	0x200000c8

080012f0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f0:	490f      	ldr	r1, [pc, #60]	; (8001330 <SystemInit+0x40>)
 80012f2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80012f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <SystemInit+0x44>)
 8001300:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001302:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001304:	f042 0201 	orr.w	r2, r2, #1
 8001308:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800130a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001312:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001316:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <SystemInit+0x48>)
 800131a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001322:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001324:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001326:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800132a:	608b      	str	r3, [r1, #8]
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00
 8001334:	40023800 	.word	0x40023800
 8001338:	24003010 	.word	0x24003010

0800133c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800133c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001374 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001340:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001342:	e003      	b.n	800134c <LoopCopyDataInit>

08001344 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001346:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001348:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800134a:	3104      	adds	r1, #4

0800134c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800134c:	480b      	ldr	r0, [pc, #44]	; (800137c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001350:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001352:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001354:	d3f6      	bcc.n	8001344 <CopyDataInit>
  ldr  r2, =_sbss
 8001356:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001358:	e002      	b.n	8001360 <LoopFillZerobss>

0800135a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800135a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800135c:	f842 3b04 	str.w	r3, [r2], #4

08001360 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001360:	4b09      	ldr	r3, [pc, #36]	; (8001388 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001362:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001364:	d3f9      	bcc.n	800135a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001366:	f7ff ffc3 	bl	80012f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800136a:	f000 f811 	bl	8001390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800136e:	f7ff fe65 	bl	800103c <main>
  bx  lr    
 8001372:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001374:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001378:	0800140c 	.word	0x0800140c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800137c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001380:	20000004 	.word	0x20000004
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8001384:	20000004 	.word	0x20000004
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001388:	20000120 	.word	0x20000120

0800138c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800138c:	e7fe      	b.n	800138c <ADC_IRQHandler>
	...

08001390 <__libc_init_array>:
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <__libc_init_array+0x3c>)
 8001394:	4c0e      	ldr	r4, [pc, #56]	; (80013d0 <__libc_init_array+0x40>)
 8001396:	1ae4      	subs	r4, r4, r3
 8001398:	10a4      	asrs	r4, r4, #2
 800139a:	2500      	movs	r5, #0
 800139c:	461e      	mov	r6, r3
 800139e:	42a5      	cmp	r5, r4
 80013a0:	d004      	beq.n	80013ac <__libc_init_array+0x1c>
 80013a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013a6:	4798      	blx	r3
 80013a8:	3501      	adds	r5, #1
 80013aa:	e7f8      	b.n	800139e <__libc_init_array+0xe>
 80013ac:	f000 f816 	bl	80013dc <_init>
 80013b0:	4c08      	ldr	r4, [pc, #32]	; (80013d4 <__libc_init_array+0x44>)
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <__libc_init_array+0x48>)
 80013b4:	1ae4      	subs	r4, r4, r3
 80013b6:	10a4      	asrs	r4, r4, #2
 80013b8:	2500      	movs	r5, #0
 80013ba:	461e      	mov	r6, r3
 80013bc:	42a5      	cmp	r5, r4
 80013be:	d004      	beq.n	80013ca <__libc_init_array+0x3a>
 80013c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013c4:	4798      	blx	r3
 80013c6:	3501      	adds	r5, #1
 80013c8:	e7f8      	b.n	80013bc <__libc_init_array+0x2c>
 80013ca:	bd70      	pop	{r4, r5, r6, pc}
 80013cc:	08001404 	.word	0x08001404
 80013d0:	08001404 	.word	0x08001404
 80013d4:	08001408 	.word	0x08001408
 80013d8:	08001404 	.word	0x08001404

080013dc <_init>:
 80013dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013de:	bf00      	nop
 80013e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013e2:	bc08      	pop	{r3}
 80013e4:	469e      	mov	lr, r3
 80013e6:	4770      	bx	lr

080013e8 <_fini>:
 80013e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ea:	bf00      	nop
 80013ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ee:	bc08      	pop	{r3}
 80013f0:	469e      	mov	lr, r3
 80013f2:	4770      	bx	lr
