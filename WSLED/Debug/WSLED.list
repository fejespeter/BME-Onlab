
F:\GitHub\BME-Onlab\BME-Onlab\WSLED\Debug\WSLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ecc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002090  08002090  00012090  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080020a8  080020a8  000120a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080020ac  080020ac  000120ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080020b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000484  20000004  080020b4  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000488  080020b4  00020488  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c6c2  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000229e  00000000  00000000  0002c6f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005e31  00000000  00000000  0002e994  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000850  00000000  00000000  000347c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d68  00000000  00000000  00035018  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004c3e  00000000  00000000  00035d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002f25  00000000  00000000  0003a9be  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0003d8e3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001664  00000000  00000000  0003d964  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002078 	.word	0x08002078

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08002078 	.word	0x08002078

08000204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000204:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000206:	4b08      	ldr	r3, [pc, #32]	; (8000228 <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000208:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800020a:	6818      	ldr	r0, [r3, #0]
 800020c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000210:	fbb0 f0f3 	udiv	r0, r0, r3
 8000214:	f000 fb5c 	bl	80008d0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000218:	2200      	movs	r2, #0
 800021a:	4621      	mov	r1, r4
 800021c:	f04f 30ff 	mov.w	r0, #4294967295
 8000220:	f000 fb16 	bl	8000850 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000224:	2000      	movs	r0, #0
 8000226:	bd10      	pop	{r4, pc}
 8000228:	20000000 	.word	0x20000000

0800022c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800022c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800022e:	4b0b      	ldr	r3, [pc, #44]	; (800025c <HAL_Init+0x30>)
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000236:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000238:	681a      	ldr	r2, [r3, #0]
 800023a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800023e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000246:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000248:	2003      	movs	r0, #3
 800024a:	f000 faef 	bl	800082c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800024e:	2000      	movs	r0, #0
 8000250:	f7ff ffd8 	bl	8000204 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000254:	f001 fd85 	bl	8001d62 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000258:	2000      	movs	r0, #0
 800025a:	bd08      	pop	{r3, pc}
 800025c:	40023c00 	.word	0x40023c00

08000260 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000260:	4a02      	ldr	r2, [pc, #8]	; (800026c <HAL_IncTick+0xc>)
 8000262:	6813      	ldr	r3, [r2, #0]
 8000264:	3301      	adds	r3, #1
 8000266:	6013      	str	r3, [r2, #0]
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	200000a8 	.word	0x200000a8

08000270 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000270:	4b01      	ldr	r3, [pc, #4]	; (8000278 <HAL_GetTick+0x8>)
 8000272:	6818      	ldr	r0, [r3, #0]
}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	200000a8 	.word	0x200000a8

0800027c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800027c:	b513      	push	{r0, r1, r4, lr}
 800027e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 8000280:	f7ff fff6 	bl	8000270 <HAL_GetTick>
 8000284:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000286:	f7ff fff3 	bl	8000270 <HAL_GetTick>
 800028a:	9b01      	ldr	r3, [sp, #4]
 800028c:	1b00      	subs	r0, r0, r4
 800028e:	4298      	cmp	r0, r3
 8000290:	d3f9      	bcc.n	8000286 <HAL_Delay+0xa>
  {
  }
}
 8000292:	b002      	add	sp, #8
 8000294:	bd10      	pop	{r4, pc}
	...

08000298 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000298:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800029a:	4604      	mov	r4, r0
 800029c:	2800      	cmp	r0, #0
 800029e:	f000 809e 	beq.w	80003de <HAL_ADC_Init+0x146>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80002a2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80002a4:	b923      	cbnz	r3, 80002b0 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80002a6:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80002a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002ac:	f001 fd8a 	bl	8001dc4 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80002b2:	06db      	lsls	r3, r3, #27
 80002b4:	f100 808e 	bmi.w	80003d4 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80002b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80002ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80002be:	f023 0302 	bic.w	r3, r3, #2
 80002c2:	f043 0302 	orr.w	r3, r3, #2
 80002c6:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80002c8:	4b46      	ldr	r3, [pc, #280]	; (80003e4 <HAL_ADC_Init+0x14c>)
 80002ca:	685a      	ldr	r2, [r3, #4]
 80002cc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80002d0:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80002d2:	6859      	ldr	r1, [r3, #4]
 80002d4:	6862      	ldr	r2, [r4, #4]
 80002d6:	430a      	orrs	r2, r1
 80002d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80002da:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80002dc:	6921      	ldr	r1, [r4, #16]
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80002de:	685a      	ldr	r2, [r3, #4]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80002e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80002e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80002e6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80002e8:	685a      	ldr	r2, [r3, #4]
 80002ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80002ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80002f0:	685a      	ldr	r2, [r3, #4]
 80002f2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80002f6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80002f8:	6859      	ldr	r1, [r3, #4]
 80002fa:	68a2      	ldr	r2, [r4, #8]
 80002fc:	430a      	orrs	r2, r1
 80002fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000300:	689a      	ldr	r2, [r3, #8]
 8000302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000306:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000308:	6899      	ldr	r1, [r3, #8]
 800030a:	68e2      	ldr	r2, [r4, #12]
 800030c:	430a      	orrs	r2, r1
 800030e:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000310:	4a35      	ldr	r2, [pc, #212]	; (80003e8 <HAL_ADC_Init+0x150>)
 8000312:	4290      	cmp	r0, r2
 8000314:	d00e      	beq.n	8000334 <HAL_ADC_Init+0x9c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000316:	6899      	ldr	r1, [r3, #8]
 8000318:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800031c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800031e:	689a      	ldr	r2, [r3, #8]
 8000320:	4302      	orrs	r2, r0
 8000322:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000324:	689a      	ldr	r2, [r3, #8]
 8000326:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800032a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800032c:	6899      	ldr	r1, [r3, #8]
 800032e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000330:	430a      	orrs	r2, r1
 8000332:	e006      	b.n	8000342 <HAL_ADC_Init+0xaa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000334:	689a      	ldr	r2, [r3, #8]
 8000336:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800033a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800033c:	689a      	ldr	r2, [r3, #8]
 800033e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000342:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000344:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000346:	69a1      	ldr	r1, [r4, #24]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000348:	f022 0202 	bic.w	r2, r2, #2
 800034c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800034e:	689a      	ldr	r2, [r3, #8]
 8000350:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000354:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000356:	6a22      	ldr	r2, [r4, #32]
 8000358:	b19a      	cbz	r2, 8000382 <HAL_ADC_Init+0xea>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800035a:	685a      	ldr	r2, [r3, #4]
 800035c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000360:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000362:	685a      	ldr	r2, [r3, #4]
 8000364:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000368:	605a      	str	r2, [r3, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800036a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800036e:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000372:	fab2 f182 	clz	r1, r2
 8000376:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000378:	6858      	ldr	r0, [r3, #4]
 800037a:	3a01      	subs	r2, #1
 800037c:	408a      	lsls	r2, r1
 800037e:	4302      	orrs	r2, r0
 8000380:	e002      	b.n	8000388 <HAL_ADC_Init+0xf0>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000382:	685a      	ldr	r2, [r3, #4]
 8000384:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000388:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800038a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800038c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000390:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000392:	69e2      	ldr	r2, [r4, #28]
 8000394:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000396:	3a01      	subs	r2, #1
 8000398:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 800039c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800039e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80003a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80003a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80003a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80003a8:	689a      	ldr	r2, [r3, #8]
 80003aa:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80003ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80003b0:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80003b2:	6961      	ldr	r1, [r4, #20]
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80003b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80003b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80003ba:	689a      	ldr	r2, [r3, #8]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80003bc:	2000      	movs	r0, #0
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80003be:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80003c2:	609a      	str	r2, [r3, #8]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80003c4:	6460      	str	r0, [r4, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80003c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80003c8:	f023 0303 	bic.w	r3, r3, #3
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	6423      	str	r3, [r4, #64]	; 0x40
 80003d2:	e000      	b.n	80003d6 <HAL_ADC_Init+0x13e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80003d4:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80003d6:	2300      	movs	r3, #0
 80003d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80003dc:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80003de:	2001      	movs	r0, #1
  /* Release Lock */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80003e0:	bd10      	pop	{r4, pc}
 80003e2:	bf00      	nop
 80003e4:	40012300 	.word	0x40012300
 80003e8:	0f000001 	.word	0x0f000001

080003ec <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80003ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80003ee:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 80003f0:	2200      	movs	r2, #0
 80003f2:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80003f4:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80003f8:	2a01      	cmp	r2, #1
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80003fa:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80003fc:	d064      	beq.n	80004c8 <HAL_ADC_Start_DMA+0xdc>
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80003fe:	6805      	ldr	r5, [r0, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000400:	2201      	movs	r2, #1
 8000402:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000406:	68aa      	ldr	r2, [r5, #8]
 8000408:	07d2      	lsls	r2, r2, #31
 800040a:	d503      	bpl.n	8000414 <HAL_ADC_Start_DMA+0x28>
      counter--;
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800040c:	68aa      	ldr	r2, [r5, #8]
 800040e:	07d0      	lsls	r0, r2, #31
 8000410:	d413      	bmi.n	800043a <HAL_ADC_Start_DMA+0x4e>
 8000412:	e04e      	b.n	80004b2 <HAL_ADC_Start_DMA+0xc6>
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000414:	68aa      	ldr	r2, [r5, #8]
 8000416:	f042 0201 	orr.w	r2, r2, #1
 800041a:	60aa      	str	r2, [r5, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800041c:	4a2c      	ldr	r2, [pc, #176]	; (80004d0 <HAL_ADC_Start_DMA+0xe4>)
 800041e:	6810      	ldr	r0, [r2, #0]
 8000420:	4a2c      	ldr	r2, [pc, #176]	; (80004d4 <HAL_ADC_Start_DMA+0xe8>)
 8000422:	fbb0 f0f2 	udiv	r0, r0, r2
 8000426:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800042a:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 800042c:	9a01      	ldr	r2, [sp, #4]
 800042e:	2a00      	cmp	r2, #0
 8000430:	d0ec      	beq.n	800040c <HAL_ADC_Start_DMA+0x20>
    {
      counter--;
 8000432:	9a01      	ldr	r2, [sp, #4]
 8000434:	3a01      	subs	r2, #1
 8000436:	9201      	str	r2, [sp, #4]
 8000438:	e7f8      	b.n	800042c <HAL_ADC_Start_DMA+0x40>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800043a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800043c:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000440:	f020 0001 	bic.w	r0, r0, #1
 8000444:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8000448:	6420      	str	r0, [r4, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800044a:	686a      	ldr	r2, [r5, #4]
 800044c:	0552      	lsls	r2, r2, #21
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800044e:	bf41      	itttt	mi
 8000450:	6c20      	ldrmi	r0, [r4, #64]	; 0x40
 8000452:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8000456:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 800045a:	6420      	strmi	r0, [r4, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800045c:	6c22      	ldr	r2, [r4, #64]	; 0x40
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800045e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000460:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000464:	bf1c      	itt	ne
 8000466:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 8000468:	f022 0206 	bicne.w	r2, r2, #6
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800046c:	6462      	str	r2, [r4, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800046e:	2200      	movs	r2, #0
 8000470:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000474:	4a18      	ldr	r2, [pc, #96]	; (80004d8 <HAL_ADC_Start_DMA+0xec>)
 8000476:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000478:	4a18      	ldr	r2, [pc, #96]	; (80004dc <HAL_ADC_Start_DMA+0xf0>)
 800047a:	6402      	str	r2, [r0, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800047c:	4a18      	ldr	r2, [pc, #96]	; (80004e0 <HAL_ADC_Start_DMA+0xf4>)
 800047e:	64c2      	str	r2, [r0, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000480:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000484:	602a      	str	r2, [r5, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000486:	686a      	ldr	r2, [r5, #4]
 8000488:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800048c:	606a      	str	r2, [r5, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800048e:	68aa      	ldr	r2, [r5, #8]
 8000490:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000494:	60aa      	str	r2, [r5, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000496:	460a      	mov	r2, r1
 8000498:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 800049c:	f000 facc 	bl	8000a38 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80004a0:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <HAL_ADC_Start_DMA+0xf8>)
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	f013 0f1f 	tst.w	r3, #31
 80004a8:	6823      	ldr	r3, [r4, #0]
 80004aa:	d004      	beq.n	80004b6 <HAL_ADC_Start_DMA+0xca>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80004ac:	4a0e      	ldr	r2, [pc, #56]	; (80004e8 <HAL_ADC_Start_DMA+0xfc>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d001      	beq.n	80004b6 <HAL_ADC_Start_DMA+0xca>
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80004b2:	2000      	movs	r0, #0
 80004b4:	e009      	b.n	80004ca <HAL_ADC_Start_DMA+0xde>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80004b6:	6898      	ldr	r0, [r3, #8]
 80004b8:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80004bc:	d1f9      	bne.n	80004b2 <HAL_ADC_Start_DMA+0xc6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80004be:	689a      	ldr	r2, [r3, #8]
 80004c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	e000      	b.n	80004ca <HAL_ADC_Start_DMA+0xde>
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80004c8:	2002      	movs	r0, #2
    }
  }
  
  /* Return function status */
  return HAL_OK;
}
 80004ca:	b003      	add	sp, #12
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	bf00      	nop
 80004d0:	20000000 	.word	0x20000000
 80004d4:	000f4240 	.word	0x000f4240
 80004d8:	08000547 	.word	0x08000547
 80004dc:	080005a7 	.word	0x080005a7
 80004e0:	080006dd 	.word	0x080006dd
 80004e4:	40012300 	.word	0x40012300
 80004e8:	40012000 	.word	0x40012000

080004ec <HAL_ADC_Stop_DMA>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80004ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80004f0:	2b01      	cmp	r3, #1
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80004f2:	b510      	push	{r4, lr}
 80004f4:	4604      	mov	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80004f6:	d024      	beq.n	8000542 <HAL_ADC_Stop_DMA+0x56>
 80004f8:	2301      	movs	r3, #1
 80004fa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80004fe:	6803      	ldr	r3, [r0, #0]
 8000500:	689a      	ldr	r2, [r3, #8]
 8000502:	f022 0201 	bic.w	r2, r2, #1
 8000506:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000508:	689a      	ldr	r2, [r3, #8]
 800050a:	07d2      	lsls	r2, r2, #31
 800050c:	d414      	bmi.n	8000538 <HAL_ADC_Stop_DMA+0x4c>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800050e:	689a      	ldr	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000510:	6b80      	ldr	r0, [r0, #56]	; 0x38
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8000512:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000516:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000518:	f000 face 	bl	8000ab8 <HAL_DMA_Abort>
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800051c:	6822      	ldr	r2, [r4, #0]
 800051e:	6853      	ldr	r3, [r2, #4]
 8000520:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000524:	6053      	str	r3, [r2, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000526:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000528:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800052c:	f023 0301 	bic.w	r3, r3, #1
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6423      	str	r3, [r4, #64]	; 0x40
 8000536:	e000      	b.n	800053a <HAL_ADC_Stop_DMA+0x4e>
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000538:	2000      	movs	r0, #0
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800053a:	2300      	movs	r3, #0
 800053c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8000540:	bd10      	pop	{r4, pc}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000542:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 8000544:	bd10      	pop	{r4, pc}

08000546 <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000546:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800054a:	f012 0f50 	tst.w	r2, #80	; 0x50
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800054e:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000550:	d124      	bne.n	800059c <ADC_DMAConvCplt+0x56>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000552:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000558:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	6891      	ldr	r1, [r2, #8]
 800055e:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8000562:	d117      	bne.n	8000594 <ADC_DMAConvCplt+0x4e>
 8000564:	6999      	ldr	r1, [r3, #24]
 8000566:	b9a9      	cbnz	r1, 8000594 <ADC_DMAConvCplt+0x4e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000568:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800056a:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 800056e:	d002      	beq.n	8000576 <ADC_DMAConvCplt+0x30>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000570:	6891      	ldr	r1, [r2, #8]
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000572:	0549      	lsls	r1, r1, #21
 8000574:	d40e      	bmi.n	8000594 <ADC_DMAConvCplt+0x4e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000576:	6851      	ldr	r1, [r2, #4]
 8000578:	f021 0120 	bic.w	r1, r1, #32
 800057c:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800057e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000580:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000584:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000586:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000588:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800058a:	bf5e      	ittt	pl
 800058c:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 800058e:	f042 0201 	orrpl.w	r2, r2, #1
 8000592:	641a      	strpl	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8000594:	4618      	mov	r0, r3
 8000596:	f001 fa21 	bl	80019dc <HAL_ADC_ConvCpltCallback>
 800059a:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800059c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  }
}
 800059e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_ADC_ConvCpltCallback(hadc);
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80005a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a4:	4718      	bx	r3

080005a6 <ADC_DMAHalfConvCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80005a6:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80005a8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80005aa:	f001 fa1d 	bl	80019e8 <HAL_ADC_ConvHalfCpltCallback>
 80005ae:	bd08      	pop	{r3, pc}

080005b0 <HAL_ADC_LevelOutOfWindowCallback>:
 80005b0:	4770      	bx	lr

080005b2 <HAL_ADC_ErrorCallback>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80005b2:	4770      	bx	lr

080005b4 <HAL_ADC_IRQHandler>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80005b4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80005b6:	6803      	ldr	r3, [r0, #0]
 80005b8:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80005ba:	685a      	ldr	r2, [r3, #4]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80005bc:	078d      	lsls	r5, r1, #30
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80005be:	4604      	mov	r4, r0
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80005c0:	d52b      	bpl.n	800061a <HAL_ADC_IRQHandler+0x66>
 80005c2:	0690      	lsls	r0, r2, #26
 80005c4:	d529      	bpl.n	800061a <HAL_ADC_IRQHandler+0x66>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80005c8:	06d1      	lsls	r1, r2, #27
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80005ca:	bf5e      	ittt	pl
 80005cc:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 80005ce:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 80005d2:	6422      	strpl	r2, [r4, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80005d4:	689a      	ldr	r2, [r3, #8]
 80005d6:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80005da:	d117      	bne.n	800060c <HAL_ADC_IRQHandler+0x58>
 80005dc:	69a2      	ldr	r2, [r4, #24]
 80005de:	b9aa      	cbnz	r2, 800060c <HAL_ADC_IRQHandler+0x58>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80005e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80005e2:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80005e6:	d002      	beq.n	80005ee <HAL_ADC_IRQHandler+0x3a>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80005e8:	689a      	ldr	r2, [r3, #8]
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80005ea:	0552      	lsls	r2, r2, #21
 80005ec:	d40e      	bmi.n	800060c <HAL_ADC_IRQHandler+0x58>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80005ee:	685a      	ldr	r2, [r3, #4]
 80005f0:	f022 0220 	bic.w	r2, r2, #32
 80005f4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80005f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005fc:	6423      	str	r3, [r4, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80005fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000600:	04db      	lsls	r3, r3, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000602:	bf5e      	ittt	pl
 8000604:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8000606:	f043 0301 	orrpl.w	r3, r3, #1
 800060a:	6423      	strpl	r3, [r4, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */ 
    HAL_ADC_ConvCpltCallback(hadc);
 800060c:	4620      	mov	r0, r4
 800060e:	f001 f9e5 	bl	80019dc <HAL_ADC_ConvCpltCallback>
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000612:	6823      	ldr	r3, [r4, #0]
 8000614:	f06f 0212 	mvn.w	r2, #18
 8000618:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800061a:	6823      	ldr	r3, [r4, #0]
 800061c:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800061e:	685a      	ldr	r2, [r3, #4]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000620:	074d      	lsls	r5, r1, #29
 8000622:	d532      	bpl.n	800068a <HAL_ADC_IRQHandler+0xd6>
 8000624:	0610      	lsls	r0, r2, #24
 8000626:	d530      	bpl.n	800068a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000628:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800062a:	06d1      	lsls	r1, r2, #27
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800062c:	bf5e      	ittt	pl
 800062e:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8000630:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8000634:	6422      	strpl	r2, [r4, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000636:	689a      	ldr	r2, [r3, #8]
 8000638:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800063c:	d11e      	bne.n	800067c <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800063e:	6b9a      	ldr	r2, [r3, #56]	; 0x38

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000640:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000644:	d002      	beq.n	800064c <HAL_ADC_IRQHandler+0x98>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000646:	689a      	ldr	r2, [r3, #8]
    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000648:	0552      	lsls	r2, r2, #21
 800064a:	d417      	bmi.n	800067c <HAL_ADC_IRQHandler+0xc8>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800064c:	685a      	ldr	r2, [r3, #4]
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800064e:	0555      	lsls	r5, r2, #21
 8000650:	d414      	bmi.n	800067c <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000652:	689a      	ldr	r2, [r3, #8]
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000654:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000658:	d110      	bne.n	800067c <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800065a:	69a2      	ldr	r2, [r4, #24]
 800065c:	b972      	cbnz	r2, 800067c <HAL_ADC_IRQHandler+0xc8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800065e:	685a      	ldr	r2, [r3, #4]
 8000660:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000664:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000666:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000668:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800066c:	6423      	str	r3, [r4, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800066e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000670:	05d8      	lsls	r0, r3, #23
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000672:	bf5e      	ittt	pl
 8000674:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8000676:	f043 0301 	orrpl.w	r3, r3, #1
 800067a:	6423      	strpl	r3, [r4, #64]	; 0x40
      }
    }

    /* Conversion complete callback */ 
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800067c:	4620      	mov	r0, r4
 800067e:	f000 f8d3 	bl	8000828 <HAL_ADCEx_InjectedConvCpltCallback>
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000682:	6823      	ldr	r3, [r4, #0]
 8000684:	f06f 020c 	mvn.w	r2, #12
 8000688:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800068a:	6823      	ldr	r3, [r4, #0]
 800068c:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800068e:	685a      	ldr	r2, [r3, #4]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000690:	07c9      	lsls	r1, r1, #31
 8000692:	d50f      	bpl.n	80006b4 <HAL_ADC_IRQHandler+0x100>
 8000694:	0655      	lsls	r5, r2, #25
 8000696:	d50d      	bpl.n	80006b4 <HAL_ADC_IRQHandler+0x100>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	07d8      	lsls	r0, r3, #31
 800069c:	d50a      	bpl.n	80006b4 <HAL_ADC_IRQHandler+0x100>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800069e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006a4:	6423      	str	r3, [r4, #64]	; 0x40
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80006a6:	4620      	mov	r0, r4
 80006a8:	f7ff ff82 	bl	80005b0 <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80006ac:	6823      	ldr	r3, [r4, #0]
 80006ae:	f06f 0201 	mvn.w	r2, #1
 80006b2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80006b4:	6823      	ldr	r3, [r4, #0]
 80006b6:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80006b8:	685a      	ldr	r2, [r3, #4]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80006ba:	0689      	lsls	r1, r1, #26
 80006bc:	d50d      	bpl.n	80006da <HAL_ADC_IRQHandler+0x126>
 80006be:	0152      	lsls	r2, r2, #5
 80006c0:	d50b      	bpl.n	80006da <HAL_ADC_IRQHandler+0x126>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80006c2:	6c62      	ldr	r2, [r4, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80006c4:	f06f 0520 	mvn.w	r5, #32
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80006c8:	f042 0202 	orr.w	r2, r2, #2
 80006cc:	6462      	str	r2, [r4, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
    
    /* Error callback */ 
    HAL_ADC_ErrorCallback(hadc);
 80006ce:	4620      	mov	r0, r4
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80006d0:	601d      	str	r5, [r3, #0]
    
    /* Error callback */ 
    HAL_ADC_ErrorCallback(hadc);
 80006d2:	f7ff ff6e 	bl	80005b2 <HAL_ADC_ErrorCallback>
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80006d6:	6823      	ldr	r3, [r4, #0]
 80006d8:	601d      	str	r5, [r3, #0]
 80006da:	bd38      	pop	{r3, r4, r5, pc}

080006dc <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80006dc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80006de:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80006e0:	2340      	movs	r3, #64	; 0x40
 80006e2:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80006e4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80006e6:	f043 0304 	orr.w	r3, r3, #4
 80006ea:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 80006ec:	f7ff ff61 	bl	80005b2 <HAL_ADC_ErrorCallback>
 80006f0:	bd08      	pop	{r3, pc}
	...

080006f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80006f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80006f6:	2300      	movs	r3, #0
 80006f8:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006fa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d069      	beq.n	80007d6 <HAL_ADC_ConfigChannel+0xe2>
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000702:	680d      	ldr	r5, [r1, #0]
 8000704:	6804      	ldr	r4, [r0, #0]
 8000706:	688f      	ldr	r7, [r1, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000708:	2301      	movs	r3, #1
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800070a:	2d09      	cmp	r5, #9
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800070c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000710:	b2ae      	uxth	r6, r5
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000712:	d910      	bls.n	8000736 <HAL_ADC_ConfigChannel+0x42>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000714:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8000718:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800071c:	f1a2 031e 	sub.w	r3, r2, #30
 8000720:	2207      	movs	r2, #7
 8000722:	409a      	lsls	r2, r3
 8000724:	ea2e 0202 	bic.w	r2, lr, r2
 8000728:	60e2      	str	r2, [r4, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800072a:	68e2      	ldr	r2, [r4, #12]
 800072c:	fa07 f303 	lsl.w	r3, r7, r3
 8000730:	4313      	orrs	r3, r2
 8000732:	60e3      	str	r3, [r4, #12]
 8000734:	e00e      	b.n	8000754 <HAL_ADC_ConfigChannel+0x60>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000736:	6922      	ldr	r2, [r4, #16]
 8000738:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800073c:	f04f 0e07 	mov.w	lr, #7
 8000740:	fa0e fe03 	lsl.w	lr, lr, r3
 8000744:	ea22 020e 	bic.w	r2, r2, lr
 8000748:	6122      	str	r2, [r4, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800074a:	6922      	ldr	r2, [r4, #16]
 800074c:	fa07 f303 	lsl.w	r3, r7, r3
 8000750:	4313      	orrs	r3, r2
 8000752:	6123      	str	r3, [r4, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000754:	684b      	ldr	r3, [r1, #4]
 8000756:	2b06      	cmp	r3, #6
 8000758:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800075c:	d80d      	bhi.n	800077a <HAL_ADC_ConfigChannel+0x86>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800075e:	4413      	add	r3, r2
 8000760:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000762:	1f59      	subs	r1, r3, #5
 8000764:	231f      	movs	r3, #31
 8000766:	408b      	lsls	r3, r1
 8000768:	ea27 0303 	bic.w	r3, r7, r3
 800076c:	6363      	str	r3, [r4, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800076e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000770:	fa06 f101 	lsl.w	r1, r6, r1
 8000774:	4311      	orrs	r1, r2
 8000776:	6361      	str	r1, [r4, #52]	; 0x34
 8000778:	e01d      	b.n	80007b6 <HAL_ADC_ConfigChannel+0xc2>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800077a:	2b0c      	cmp	r3, #12
 800077c:	d80e      	bhi.n	800079c <HAL_ADC_ConfigChannel+0xa8>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800077e:	4413      	add	r3, r2
 8000780:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000782:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000786:	231f      	movs	r3, #31
 8000788:	4093      	lsls	r3, r2
 800078a:	ea21 0303 	bic.w	r3, r1, r3
 800078e:	6323      	str	r3, [r4, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000790:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000792:	fa06 f202 	lsl.w	r2, r6, r2
 8000796:	431a      	orrs	r2, r3
 8000798:	6322      	str	r2, [r4, #48]	; 0x30
 800079a:	e00c      	b.n	80007b6 <HAL_ADC_ConfigChannel+0xc2>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800079c:	4413      	add	r3, r2
 800079e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80007a0:	3b41      	subs	r3, #65	; 0x41
 80007a2:	221f      	movs	r2, #31
 80007a4:	409a      	lsls	r2, r3
 80007a6:	ea27 0202 	bic.w	r2, r7, r2
 80007aa:	62e2      	str	r2, [r4, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80007ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80007ae:	fa06 f203 	lsl.w	r2, r6, r3
 80007b2:	430a      	orrs	r2, r1
 80007b4:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <HAL_ADC_ConfigChannel+0x120>)
 80007b8:	429c      	cmp	r4, r3
 80007ba:	d004      	beq.n	80007c6 <HAL_ADC_ConfigChannel+0xd2>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80007bc:	2300      	movs	r3, #0
 80007be:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80007c2:	4618      	mov	r0, r3
 80007c4:	e023      	b.n	800080e <HAL_ADC_ConfigChannel+0x11a>
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007c6:	2d12      	cmp	r5, #18
 80007c8:	d107      	bne.n	80007da <HAL_ADC_ConfigChannel+0xe6>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80007ca:	4a13      	ldr	r2, [pc, #76]	; (8000818 <HAL_ADC_ConfigChannel+0x124>)
 80007cc:	6853      	ldr	r3, [r2, #4]
 80007ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007d2:	6053      	str	r3, [r2, #4]
 80007d4:	e7f2      	b.n	80007bc <HAL_ADC_ConfigChannel+0xc8>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007d6:	2002      	movs	r0, #2
 80007d8:	e019      	b.n	800080e <HAL_ADC_ConfigChannel+0x11a>
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <HAL_ADC_ConfigChannel+0x128>)
 80007dc:	429d      	cmp	r5, r3
 80007de:	d001      	beq.n	80007e4 <HAL_ADC_ConfigChannel+0xf0>
 80007e0:	2d11      	cmp	r5, #17
 80007e2:	d1eb      	bne.n	80007bc <HAL_ADC_ConfigChannel+0xc8>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80007e4:	490c      	ldr	r1, [pc, #48]	; (8000818 <HAL_ADC_ConfigChannel+0x124>)
 80007e6:	684a      	ldr	r2, [r1, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80007e8:	429d      	cmp	r5, r3
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80007ea:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80007ee:	604a      	str	r2, [r1, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80007f0:	d1e4      	bne.n	80007bc <HAL_ADC_ConfigChannel+0xc8>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <HAL_ADC_ConfigChannel+0x12c>)
 80007f4:	4a0b      	ldr	r2, [pc, #44]	; (8000824 <HAL_ADC_ConfigChannel+0x130>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80007fc:	230a      	movs	r3, #10
 80007fe:	4353      	muls	r3, r2
      while(counter != 0U)
      {
        counter--;
 8000800:	9301      	str	r3, [sp, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
      while(counter != 0U)
 8000802:	9b01      	ldr	r3, [sp, #4]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d0d9      	beq.n	80007bc <HAL_ADC_ConfigChannel+0xc8>
      {
        counter--;
 8000808:	9b01      	ldr	r3, [sp, #4]
 800080a:	3b01      	subs	r3, #1
 800080c:	e7f8      	b.n	8000800 <HAL_ADC_ConfigChannel+0x10c>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return HAL_OK;
}
 800080e:	b003      	add	sp, #12
 8000810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000812:	bf00      	nop
 8000814:	40012000 	.word	0x40012000
 8000818:	40012300 	.word	0x40012300
 800081c:	10000012 	.word	0x10000012
 8000820:	20000000 	.word	0x20000000
 8000824:	000f4240 	.word	0x000f4240

08000828 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000828:	4770      	bx	lr
	...

0800082c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800082c:	4a07      	ldr	r2, [pc, #28]	; (800084c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800082e:	68d3      	ldr	r3, [r2, #12]
 8000830:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000834:	041b      	lsls	r3, r3, #16
 8000836:	0c1b      	lsrs	r3, r3, #16
 8000838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800083c:	0200      	lsls	r0, r0, #8
 800083e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000842:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000846:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000848:	60d3      	str	r3, [r2, #12]
 800084a:	4770      	bx	lr
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <HAL_NVIC_SetPriority+0x60>)
 8000852:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000854:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000858:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800085a:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800085e:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000860:	2c04      	cmp	r4, #4
 8000862:	bf28      	it	cs
 8000864:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000866:	2d06      	cmp	r5, #6

  return (
 8000868:	f04f 0501 	mov.w	r5, #1
 800086c:	fa05 f404 	lsl.w	r4, r5, r4
 8000870:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000874:	bf8c      	ite	hi
 8000876:	3b03      	subhi	r3, #3
 8000878:	2300      	movls	r3, #0

  return (
 800087a:	400c      	ands	r4, r1
 800087c:	409c      	lsls	r4, r3
 800087e:	fa05 f303 	lsl.w	r3, r5, r3
 8000882:	3b01      	subs	r3, #1
 8000884:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000886:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000888:	ea42 0204 	orr.w	r2, r2, r4
 800088c:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000890:	bfaf      	iteee	ge
 8000892:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000896:	f000 000f 	andlt.w	r0, r0, #15
 800089a:	4b06      	ldrlt	r3, [pc, #24]	; (80008b4 <HAL_NVIC_SetPriority+0x64>)
 800089c:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089e:	bfa5      	ittet	ge
 80008a0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80008a4:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a6:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80008ac:	bd30      	pop	{r4, r5, pc}
 80008ae:	bf00      	nop
 80008b0:	e000ed00 	.word	0xe000ed00
 80008b4:	e000ed14 	.word	0xe000ed14

080008b8 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80008b8:	0942      	lsrs	r2, r0, #5
 80008ba:	2301      	movs	r3, #1
 80008bc:	f000 001f 	and.w	r0, r0, #31
 80008c0:	fa03 f000 	lsl.w	r0, r3, r0
 80008c4:	4b01      	ldr	r3, [pc, #4]	; (80008cc <HAL_NVIC_EnableIRQ+0x14>)
 80008c6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80008ca:	4770      	bx	lr
 80008cc:	e000e100 	.word	0xe000e100

080008d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d0:	3801      	subs	r0, #1
 80008d2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008d6:	d20a      	bcs.n	80008ee <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008da:	4a07      	ldr	r2, [pc, #28]	; (80008f8 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008dc:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008de:	21f0      	movs	r1, #240	; 0xf0
 80008e0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e6:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ee:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000e010 	.word	0xe000e010
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008fe:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000900:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000902:	bf0c      	ite	eq
 8000904:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000908:	f022 0204 	bicne.w	r2, r2, #4
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	4770      	bx	lr
 8000910:	e000e010 	.word	0xe000e010

08000914 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000914:	4770      	bx	lr

08000916 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000916:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000918:	f7ff fffc 	bl	8000914 <HAL_SYSTICK_Callback>
 800091c:	bd08      	pop	{r3, pc}
	...

08000920 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000920:	6803      	ldr	r3, [r0, #0]
 8000922:	b2da      	uxtb	r2, r3
 8000924:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000928:	f023 0303 	bic.w	r3, r3, #3
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800092c:	2118      	movs	r1, #24
 800092e:	3a10      	subs	r2, #16
 8000930:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000934:	4904      	ldr	r1, [pc, #16]	; (8000948 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000936:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000938:	bf88      	it	hi
 800093a:	3304      	addhi	r3, #4
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800093c:	5c89      	ldrb	r1, [r1, r2]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800093e:	6583      	str	r3, [r0, #88]	; 0x58
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000940:	65c1      	str	r1, [r0, #92]	; 0x5c
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8000942:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	08002090 	.word	0x08002090

0800094c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8000950:	f7ff fc8e 	bl	8000270 <HAL_GetTick>
 8000954:	4605      	mov	r5, r0
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000956:	2c00      	cmp	r4, #0
 8000958:	d064      	beq.n	8000a24 <HAL_DMA_Init+0xd8>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800095a:	2300      	movs	r3, #0
 800095c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000960:	6822      	ldr	r2, [r4, #0]
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000962:	2302      	movs	r3, #2
 8000964:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000968:	6813      	ldr	r3, [r2, #0]
 800096a:	f023 0301 	bic.w	r3, r3, #1
 800096e:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000970:	6821      	ldr	r1, [r4, #0]
 8000972:	680b      	ldr	r3, [r1, #0]
 8000974:	07d8      	lsls	r0, r3, #31
 8000976:	d508      	bpl.n	800098a <HAL_DMA_Init+0x3e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000978:	f7ff fc7a 	bl	8000270 <HAL_GetTick>
 800097c:	1b40      	subs	r0, r0, r5
 800097e:	2805      	cmp	r0, #5
 8000980:	d9f6      	bls.n	8000970 <HAL_DMA_Init+0x24>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000982:	2320      	movs	r3, #32
 8000984:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000986:	2003      	movs	r0, #3
 8000988:	e051      	b.n	8000a2e <HAL_DMA_Init+0xe2>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800098a:	680b      	ldr	r3, [r1, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800098c:	4a29      	ldr	r2, [pc, #164]	; (8000a34 <HAL_DMA_Init+0xe8>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800098e:	6865      	ldr	r5, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000990:	69a0      	ldr	r0, [r4, #24]
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000992:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000994:	68a3      	ldr	r3, [r4, #8]
 8000996:	431d      	orrs	r5, r3
 8000998:	68e3      	ldr	r3, [r4, #12]
 800099a:	431d      	orrs	r5, r3
 800099c:	6923      	ldr	r3, [r4, #16]
 800099e:	431d      	orrs	r5, r3
 80009a0:	6963      	ldr	r3, [r4, #20]
 80009a2:	432b      	orrs	r3, r5
 80009a4:	69e5      	ldr	r5, [r4, #28]
 80009a6:	4303      	orrs	r3, r0
 80009a8:	432b      	orrs	r3, r5
 80009aa:	6a25      	ldr	r5, [r4, #32]
 80009ac:	432b      	orrs	r3, r5
 80009ae:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80009b2:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80009b4:	bf01      	itttt	eq
 80009b6:	6b25      	ldreq	r5, [r4, #48]	; 0x30
 80009b8:	6ae6      	ldreq	r6, [r4, #44]	; 0x2c
 80009ba:	4335      	orreq	r5, r6
 80009bc:	432b      	orreq	r3, r5
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80009be:	600b      	str	r3, [r1, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80009c0:	694b      	ldr	r3, [r1, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009c2:	2a04      	cmp	r2, #4

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80009c4:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80009c8:	ea43 0302 	orr.w	r3, r3, r2

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009cc:	d11c      	bne.n	8000a08 <HAL_DMA_Init+0xbc>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80009ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80009d0:	4313      	orrs	r3, r2
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80009d2:	b920      	cbnz	r0, 80009de <HAL_DMA_Init+0x92>
  {
    switch (tmp)
 80009d4:	2a01      	cmp	r2, #1
 80009d6:	d00b      	beq.n	80009f0 <HAL_DMA_Init+0xa4>
 80009d8:	d313      	bcc.n	8000a02 <HAL_DMA_Init+0xb6>
 80009da:	2a02      	cmp	r2, #2
 80009dc:	e010      	b.n	8000a00 <HAL_DMA_Init+0xb4>
        break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80009de:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80009e2:	d10a      	bne.n	80009fa <HAL_DMA_Init+0xae>
  {
    switch (tmp)
 80009e4:	2a03      	cmp	r2, #3
 80009e6:	d80f      	bhi.n	8000a08 <HAL_DMA_Init+0xbc>
 80009e8:	e8df f002 	tbb	[pc, r2]
 80009ec:	021e0b1e 	.word	0x021e0b1e
        break;
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80009f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80009f2:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 80009f6:	d107      	bne.n	8000a08 <HAL_DMA_Init+0xbc>
 80009f8:	e016      	b.n	8000a28 <HAL_DMA_Init+0xdc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80009fa:	2a02      	cmp	r2, #2
 80009fc:	d914      	bls.n	8000a28 <HAL_DMA_Init+0xdc>
 80009fe:	2a03      	cmp	r2, #3
 8000a00:	d102      	bne.n	8000a08 <HAL_DMA_Init+0xbc>
      case DMA_FIFO_THRESHOLD_HALFFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000a02:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000a04:	01d2      	lsls	r2, r2, #7
 8000a06:	d40f      	bmi.n	8000a28 <HAL_DMA_Init+0xdc>
      return HAL_ERROR; 
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000a08:	614b      	str	r3, [r1, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000a0a:	4620      	mov	r0, r4
 8000a0c:	f7ff ff88 	bl	8000920 <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a10:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000a12:	233f      	movs	r3, #63	; 0x3f
 8000a14:	4093      	lsls	r3, r2
 8000a16:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a18:	2000      	movs	r0, #0
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a1a:	2301      	movs	r3, #1
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a1c:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a1e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8000a22:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8000a24:	2001      	movs	r0, #1
 8000a26:	bd70      	pop	{r4, r5, r6, pc}
    tmp |= hdma->Init.FIFOThreshold;
    
    if(DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a28:	2340      	movs	r3, #64	; 0x40
 8000a2a:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 8000a32:	bd70      	pop	{r4, r5, r6, pc}
 8000a34:	f010803f 	.word	0xf010803f

08000a38 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a38:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a3a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000a3e:	2c01      	cmp	r4, #1
 8000a40:	d038      	beq.n	8000ab4 <HAL_DMA_Start_IT+0x7c>
 8000a42:	2401      	movs	r4, #1
 8000a44:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a48:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a4c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a4e:	2c01      	cmp	r4, #1
 8000a50:	f04f 0500 	mov.w	r5, #0
 8000a54:	f04f 0402 	mov.w	r4, #2
 8000a58:	d128      	bne.n	8000aac <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a5a:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a5e:	6804      	ldr	r4, [r0, #0]
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a60:	6545      	str	r5, [r0, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a62:	6825      	ldr	r5, [r4, #0]
 8000a64:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000a68:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000a6a:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000a6c:	6883      	ldr	r3, [r0, #8]
 8000a6e:	2b40      	cmp	r3, #64	; 0x40
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000a70:	bf0e      	itee	eq
 8000a72:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000a74:	60a1      	strne	r1, [r4, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000a76:	60e2      	strne	r2, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a78:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000a7a:	bf08      	it	eq
 8000a7c:	60e1      	streq	r1, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a7e:	233f      	movs	r3, #63	; 0x3f
 8000a80:	4093      	lsls	r3, r2
 8000a82:	60b3      	str	r3, [r6, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a84:	6823      	ldr	r3, [r4, #0]
 8000a86:	f043 0316 	orr.w	r3, r3, #22
 8000a8a:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000a8c:	6963      	ldr	r3, [r4, #20]
 8000a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a92:	6163      	str	r3, [r4, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000a94:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000a96:	b11b      	cbz	r3, 8000aa0 <HAL_DMA_Start_IT+0x68>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a98:	6823      	ldr	r3, [r4, #0]
 8000a9a:	f043 0308 	orr.w	r3, r3, #8
 8000a9e:	6023      	str	r3, [r4, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000aa0:	6823      	ldr	r3, [r4, #0]
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	6023      	str	r3, [r4, #0]
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000aac:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000ab0:	4620      	mov	r0, r4
 8000ab2:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000ab4:	2002      	movs	r0, #2
    /* Return error status */
    status = HAL_BUSY;
  }
  
  return status;
}
 8000ab6:	bd70      	pop	{r4, r5, r6, pc}

08000ab8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ab8:	b570      	push	{r4, r5, r6, lr}
 8000aba:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000abc:	6d85      	ldr	r5, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8000abe:	f7ff fbd7 	bl	8000270 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ac2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8000ac6:	2b02      	cmp	r3, #2
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  
  uint32_t tickstart = HAL_GetTick();
 8000ac8:	4606      	mov	r6, r0
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000aca:	d006      	beq.n	8000ada <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ada:	6823      	ldr	r3, [r4, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	f022 0216 	bic.w	r2, r2, #22
 8000ae2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ae4:	695a      	ldr	r2, [r3, #20]
 8000ae6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000aea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000aec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000aee:	b90a      	cbnz	r2, 8000af4 <HAL_DMA_Abort+0x3c>
 8000af0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000af2:	b11a      	cbz	r2, 8000afc <HAL_DMA_Abort+0x44>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	f022 0208 	bic.w	r2, r2, #8
 8000afa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	f022 0201 	bic.w	r2, r2, #1
 8000b02:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b04:	6823      	ldr	r3, [r4, #0]
 8000b06:	6818      	ldr	r0, [r3, #0]
 8000b08:	f010 0001 	ands.w	r0, r0, #1
 8000b0c:	d00d      	beq.n	8000b2a <HAL_DMA_Abort+0x72>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000b0e:	f7ff fbaf 	bl	8000270 <HAL_GetTick>
 8000b12:	1b80      	subs	r0, r0, r6
 8000b14:	2805      	cmp	r0, #5
 8000b16:	d9f5      	bls.n	8000b04 <HAL_DMA_Abort+0x4c>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000b18:	2320      	movs	r3, #32
 8000b1a:	6563      	str	r3, [r4, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000b1c:	2003      	movs	r0, #3
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000b1e:	2300      	movs	r3, #0
 8000b20:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000b24:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8000b28:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b2a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000b2c:	233f      	movs	r3, #63	; 0x3f
 8000b2e:	4093      	lsls	r3, r2
 8000b30:	60ab      	str	r3, [r5, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000b32:	2301      	movs	r3, #1
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b34:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000b38:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  }
  return HAL_OK;
}
 8000b3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000b40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b46:	6d85      	ldr	r5, [r0, #88]	; 0x58
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8000b48:	4b59      	ldr	r3, [pc, #356]	; (8000cb0 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b4a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8000b4c:	681f      	ldr	r7, [r3, #0]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;
 8000b4e:	682e      	ldr	r6, [r5, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b50:	2308      	movs	r3, #8
 8000b52:	4093      	lsls	r3, r2
 8000b54:	421e      	tst	r6, r3
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b56:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b58:	d00c      	beq.n	8000b74 <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000b5a:	6801      	ldr	r1, [r0, #0]
 8000b5c:	6808      	ldr	r0, [r1, #0]
 8000b5e:	0740      	lsls	r0, r0, #29
 8000b60:	d508      	bpl.n	8000b74 <HAL_DMA_IRQHandler+0x34>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000b62:	6808      	ldr	r0, [r1, #0]
 8000b64:	f020 0004 	bic.w	r0, r0, #4
 8000b68:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000b6a:	60ab      	str	r3, [r5, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000b6c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b74:	4b4f      	ldr	r3, [pc, #316]	; (8000cb4 <HAL_DMA_IRQHandler+0x174>)
 8000b76:	4093      	lsls	r3, r2
 8000b78:	421e      	tst	r6, r3
 8000b7a:	d008      	beq.n	8000b8e <HAL_DMA_IRQHandler+0x4e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000b7c:	6821      	ldr	r1, [r4, #0]
 8000b7e:	6949      	ldr	r1, [r1, #20]
 8000b80:	0609      	lsls	r1, r1, #24
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000b82:	bf41      	itttt	mi
 8000b84:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000b86:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 8000b88:	f043 0302 	orrmi.w	r3, r3, #2
 8000b8c:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b8e:	4b4a      	ldr	r3, [pc, #296]	; (8000cb8 <HAL_DMA_IRQHandler+0x178>)
 8000b90:	4093      	lsls	r3, r2
 8000b92:	421e      	tst	r6, r3
 8000b94:	d008      	beq.n	8000ba8 <HAL_DMA_IRQHandler+0x68>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000b96:	6821      	ldr	r1, [r4, #0]
 8000b98:	6809      	ldr	r1, [r1, #0]
 8000b9a:	0788      	lsls	r0, r1, #30
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000b9c:	bf41      	itttt	mi
 8000b9e:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ba0:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 8000ba2:	f043 0304 	orrmi.w	r3, r3, #4
 8000ba6:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ba8:	2310      	movs	r3, #16
 8000baa:	fa03 f202 	lsl.w	r2, r3, r2
 8000bae:	4216      	tst	r6, r2
 8000bb0:	d017      	beq.n	8000be2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000bb2:	6823      	ldr	r3, [r4, #0]
 8000bb4:	6819      	ldr	r1, [r3, #0]
 8000bb6:	0709      	lsls	r1, r1, #28
 8000bb8:	d513      	bpl.n	8000be2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000bba:	60aa      	str	r2, [r5, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	0350      	lsls	r0, r2, #13
 8000bc0:	d504      	bpl.n	8000bcc <HAL_DMA_IRQHandler+0x8c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	0319      	lsls	r1, r3, #12
 8000bc6:	d508      	bpl.n	8000bda <HAL_DMA_IRQHandler+0x9a>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000bc8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000bca:	e007      	b.n	8000bdc <HAL_DMA_IRQHandler+0x9c>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	05d2      	lsls	r2, r2, #23
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bd0:	bf5e      	ittt	pl
 8000bd2:	681a      	ldrpl	r2, [r3, #0]
 8000bd4:	f022 0208 	bicpl.w	r2, r2, #8
 8000bd8:	601a      	strpl	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000bda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bdc:	b10b      	cbz	r3, 8000be2 <HAL_DMA_IRQHandler+0xa2>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000bde:	4620      	mov	r0, r4
 8000be0:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000be2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000be4:	2220      	movs	r2, #32
 8000be6:	408a      	lsls	r2, r1
 8000be8:	4216      	tst	r6, r2
 8000bea:	d03b      	beq.n	8000c64 <HAL_DMA_IRQHandler+0x124>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000bec:	6823      	ldr	r3, [r4, #0]
 8000bee:	6818      	ldr	r0, [r3, #0]
 8000bf0:	06c6      	lsls	r6, r0, #27
 8000bf2:	d537      	bpl.n	8000c64 <HAL_DMA_IRQHandler+0x124>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000bf4:	60aa      	str	r2, [r5, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000bf6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000bfa:	2a05      	cmp	r2, #5
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bfc:	681a      	ldr	r2, [r3, #0]
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000bfe:	d119      	bne.n	8000c34 <HAL_DMA_IRQHandler+0xf4>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c00:	f022 0216 	bic.w	r2, r2, #22
 8000c04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c06:	695a      	ldr	r2, [r3, #20]
 8000c08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c0e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c10:	b90a      	cbnz	r2, 8000c16 <HAL_DMA_IRQHandler+0xd6>
 8000c12:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000c14:	b11a      	cbz	r2, 8000c1e <HAL_DMA_IRQHandler+0xde>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	f022 0208 	bic.w	r2, r2, #8
 8000c1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c1e:	233f      	movs	r3, #63	; 0x3f
 8000c20:	408b      	lsls	r3, r1
 8000c22:	60ab      	str	r3, [r5, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c24:	2300      	movs	r3, #0
 8000c26:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000c30:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000c32:	e037      	b.n	8000ca4 <HAL_DMA_IRQHandler+0x164>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c34:	0350      	lsls	r0, r2, #13
 8000c36:	d504      	bpl.n	8000c42 <HAL_DMA_IRQHandler+0x102>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	0319      	lsls	r1, r3, #12
 8000c3c:	d40e      	bmi.n	8000c5c <HAL_DMA_IRQHandler+0x11c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c40:	e00d      	b.n	8000c5e <HAL_DMA_IRQHandler+0x11e>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000c48:	d108      	bne.n	8000c5c <HAL_DMA_IRQHandler+0x11c>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c4a:	6819      	ldr	r1, [r3, #0]
 8000c4c:	f021 0110 	bic.w	r1, r1, #16
 8000c50:	6019      	str	r1, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c52:	2301      	movs	r3, #1
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c54:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c58:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000c5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000c5e:	b10b      	cbz	r3, 8000c64 <HAL_DMA_IRQHandler+0x124>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c60:	4620      	mov	r0, r4
 8000c62:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c66:	b303      	cbz	r3, 8000caa <HAL_DMA_IRQHandler+0x16a>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c6a:	07da      	lsls	r2, r3, #31
 8000c6c:	d519      	bpl.n	8000ca2 <HAL_DMA_IRQHandler+0x162>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c6e:	2305      	movs	r3, #5

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000c70:	6822      	ldr	r2, [r4, #0]
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c72:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000c76:	6813      	ldr	r3, [r2, #0]
 8000c78:	f023 0301 	bic.w	r3, r3, #1
 8000c7c:	6013      	str	r3, [r2, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8000c7e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000c82:	fbb7 f7f3 	udiv	r7, r7, r3
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);

      do
      {
        if (++count > timeout)
 8000c86:	9b01      	ldr	r3, [sp, #4]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	429f      	cmp	r7, r3
 8000c8c:	9301      	str	r3, [sp, #4]
 8000c8e:	d302      	bcc.n	8000c96 <HAL_DMA_IRQHandler+0x156>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000c90:	6813      	ldr	r3, [r2, #0]
 8000c92:	07db      	lsls	r3, r3, #31
 8000c94:	d4f7      	bmi.n	8000c86 <HAL_DMA_IRQHandler+0x146>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000c96:	2300      	movs	r3, #0
 8000c98:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000ca2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000ca4:	b10b      	cbz	r3, 8000caa <HAL_DMA_IRQHandler+0x16a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	4798      	blx	r3
    }
  }
}
 8000caa:	b003      	add	sp, #12
 8000cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	00800001 	.word	0x00800001
 8000cb8:	00800004 	.word	0x00800004

08000cbc <HAL_DMA_RegisterCallback>:
{

  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdma);
 8000cbc:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8000cc0:	2b01      	cmp	r3, #1
  * @param  pCallback:            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8000cc2:	b510      	push	{r4, lr}

  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdma);
 8000cc4:	d01e      	beq.n	8000d04 <HAL_DMA_RegisterCallback+0x48>

  if(HAL_DMA_STATE_READY == hdma->State)
 8000cc6:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
{

  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdma);
 8000cca:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8000ccc:	429c      	cmp	r4, r3
{

  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdma);
 8000cce:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8000cd2:	d112      	bne.n	8000cfa <HAL_DMA_RegisterCallback+0x3e>
  {
    switch (CallbackID)
 8000cd4:	2905      	cmp	r1, #5
 8000cd6:	d80f      	bhi.n	8000cf8 <HAL_DMA_RegisterCallback+0x3c>
 8000cd8:	e8df f001 	tbb	[pc, r1]
 8000cdc:	09070503 	.word	0x09070503
 8000ce0:	0d0b      	.short	0x0d0b
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8000ce2:	63c2      	str	r2, [r0, #60]	; 0x3c
 8000ce4:	e008      	b.n	8000cf8 <HAL_DMA_RegisterCallback+0x3c>
      break;

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8000ce6:	6402      	str	r2, [r0, #64]	; 0x40
 8000ce8:	e006      	b.n	8000cf8 <HAL_DMA_RegisterCallback+0x3c>
      break;

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8000cea:	6442      	str	r2, [r0, #68]	; 0x44
 8000cec:	e004      	b.n	8000cf8 <HAL_DMA_RegisterCallback+0x3c>
      break;

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8000cee:	6482      	str	r2, [r0, #72]	; 0x48
 8000cf0:	e002      	b.n	8000cf8 <HAL_DMA_RegisterCallback+0x3c>
      break;

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8000cf2:	64c2      	str	r2, [r0, #76]	; 0x4c
 8000cf4:	e000      	b.n	8000cf8 <HAL_DMA_RegisterCallback+0x3c>
      break;

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8000cf6:	6502      	str	r2, [r0, #80]	; 0x50
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{

  HAL_StatusTypeDef status = HAL_OK;
 8000cf8:	2300      	movs	r3, #0
    /* Return error status */
    status =  HAL_ERROR;
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  
  return status;
 8000d00:	4618      	mov	r0, r3
 8000d02:	bd10      	pop	{r4, pc}
{

  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d04:	2002      	movs	r0, #2

  /* Release Lock */
  __HAL_UNLOCK(hdma);
  
  return status;
}
 8000d06:	bd10      	pop	{r4, pc}

08000d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d0c:	4f67      	ldr	r7, [pc, #412]	; (8000eac <HAL_GPIO_Init+0x1a4>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d0e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d10:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8000eb4 <HAL_GPIO_Init+0x1ac>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d14:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000eb8 <HAL_GPIO_Init+0x1b0>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d18:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d1a:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8000d20:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000d22:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8000d24:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000d26:	ea34 0303 	bics.w	r3, r4, r3
 8000d2a:	f040 80b7 	bne.w	8000e9c <HAL_GPIO_Init+0x194>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d2e:	684d      	ldr	r5, [r1, #4]
 8000d30:	f025 0a10 	bic.w	sl, r5, #16
 8000d34:	f1ba 0f02 	cmp.w	sl, #2
 8000d38:	d114      	bne.n	8000d64 <HAL_GPIO_Init+0x5c>
 8000d3a:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 8000d3e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000d42:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d46:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000d4a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000d4e:	230f      	movs	r3, #15
 8000d50:	fa03 f30b 	lsl.w	r3, r3, fp
 8000d54:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000d58:	690b      	ldr	r3, [r1, #16]
 8000d5a:	fa03 f30b 	lsl.w	r3, r3, fp
 8000d5e:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000d60:	f8c9 3020 	str.w	r3, [r9, #32]
 8000d64:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d68:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d6c:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d6e:	fa09 f90b 	lsl.w	r9, r9, fp
 8000d72:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d76:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d7a:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d7e:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d82:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d86:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d88:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8000d8c:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d8e:	d80f      	bhi.n	8000db0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d90:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d92:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d94:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d98:	fa06 f60b 	lsl.w	r6, r6, fp
 8000d9c:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 8000d9e:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da0:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000da2:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da6:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000daa:	4096      	lsls	r6, r2
 8000dac:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8000dae:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000db0:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000db2:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000db6:	688b      	ldr	r3, [r1, #8]
 8000db8:	fa03 f30b 	lsl.w	r3, r3, fp
 8000dbc:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8000dc0:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dc2:	00eb      	lsls	r3, r5, #3
 8000dc4:	d56a      	bpl.n	8000e9c <HAL_GPIO_Init+0x194>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	9303      	str	r3, [sp, #12]
 8000dca:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dce:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <HAL_GPIO_Init+0x1a8>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd0:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000dd4:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8000dd8:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 8000ddc:	f022 0903 	bic.w	r9, r2, #3
 8000de0:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8000de4:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000de8:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 8000dec:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000dee:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000df4:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000df8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000dfc:	260f      	movs	r6, #15
 8000dfe:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e02:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000e04:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e08:	d018      	beq.n	8000e3c <HAL_GPIO_Init+0x134>
 8000e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e0e:	4298      	cmp	r0, r3
 8000e10:	d016      	beq.n	8000e40 <HAL_GPIO_Init+0x138>
 8000e12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e16:	4298      	cmp	r0, r3
 8000e18:	d014      	beq.n	8000e44 <HAL_GPIO_Init+0x13c>
 8000e1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	d012      	beq.n	8000e48 <HAL_GPIO_Init+0x140>
 8000e22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e26:	4298      	cmp	r0, r3
 8000e28:	d010      	beq.n	8000e4c <HAL_GPIO_Init+0x144>
 8000e2a:	4540      	cmp	r0, r8
 8000e2c:	d010      	beq.n	8000e50 <HAL_GPIO_Init+0x148>
 8000e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000e32:	4298      	cmp	r0, r3
 8000e34:	bf14      	ite	ne
 8000e36:	2307      	movne	r3, #7
 8000e38:	2306      	moveq	r3, #6
 8000e3a:	e00a      	b.n	8000e52 <HAL_GPIO_Init+0x14a>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	e008      	b.n	8000e52 <HAL_GPIO_Init+0x14a>
 8000e40:	2301      	movs	r3, #1
 8000e42:	e006      	b.n	8000e52 <HAL_GPIO_Init+0x14a>
 8000e44:	2302      	movs	r3, #2
 8000e46:	e004      	b.n	8000e52 <HAL_GPIO_Init+0x14a>
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e002      	b.n	8000e52 <HAL_GPIO_Init+0x14a>
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	e000      	b.n	8000e52 <HAL_GPIO_Init+0x14a>
 8000e50:	2305      	movs	r3, #5
 8000e52:	fa03 f30a 	lsl.w	r3, r3, sl
 8000e56:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e58:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e5c:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e5e:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e60:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8000e64:	bf0c      	ite	eq
 8000e66:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8000e68:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 8000e6a:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8000e6e:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e72:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8000e76:	bf0c      	ite	eq
 8000e78:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8000e7a:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 8000e7c:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e7e:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e80:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8000e84:	bf0c      	ite	eq
 8000e86:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8000e88:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 8000e8a:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8000e8e:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e92:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8000e94:	bf54      	ite	pl
 8000e96:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000e98:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 8000e9a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9c:	3201      	adds	r2, #1
 8000e9e:	2a10      	cmp	r2, #16
 8000ea0:	f47f af3e 	bne.w	8000d20 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8000ea4:	b005      	add	sp, #20
 8000ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000eaa:	bf00      	nop
 8000eac:	40013c00 	.word	0x40013c00
 8000eb0:	40020000 	.word	0x40020000
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40021400 	.word	0x40021400

08000ebc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ebc:	b902      	cbnz	r2, 8000ec0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ebe:	0409      	lsls	r1, r1, #16
 8000ec0:	6181      	str	r1, [r0, #24]
 8000ec2:	4770      	bx	lr

08000ec4 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000ec4:	6943      	ldr	r3, [r0, #20]
 8000ec6:	4059      	eors	r1, r3
 8000ec8:	6141      	str	r1, [r0, #20]
 8000eca:	4770      	bx	lr

08000ecc <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ecc:	4b55      	ldr	r3, [pc, #340]	; (8001024 <HAL_RCC_ClockConfig+0x158>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	f002 020f 	and.w	r2, r2, #15
 8000ed4:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eda:	4605      	mov	r5, r0
 8000edc:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ede:	d30a      	bcc.n	8000ef6 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ee0:	6829      	ldr	r1, [r5, #0]
 8000ee2:	0788      	lsls	r0, r1, #30
 8000ee4:	d511      	bpl.n	8000f0a <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ee6:	4850      	ldr	r0, [pc, #320]	; (8001028 <HAL_RCC_ClockConfig+0x15c>)
 8000ee8:	6883      	ldr	r3, [r0, #8]
 8000eea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000eee:	68ab      	ldr	r3, [r5, #8]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	6083      	str	r3, [r0, #8]
 8000ef4:	e009      	b.n	8000f0a <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ef6:	b2ca      	uxtb	r2, r1
 8000ef8:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 030f 	and.w	r3, r3, #15
 8000f00:	4299      	cmp	r1, r3
 8000f02:	d0ed      	beq.n	8000ee0 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000f04:	2001      	movs	r0, #1
 8000f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f0a:	07c9      	lsls	r1, r1, #31
 8000f0c:	d406      	bmi.n	8000f1c <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f0e:	4b45      	ldr	r3, [pc, #276]	; (8001024 <HAL_RCC_ClockConfig+0x158>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	f002 020f 	and.w	r2, r2, #15
 8000f16:	4296      	cmp	r6, r2
 8000f18:	d351      	bcc.n	8000fbe <HAL_RCC_ClockConfig+0xf2>
 8000f1a:	e057      	b.n	8000fcc <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f1c:	686b      	ldr	r3, [r5, #4]
 8000f1e:	4a42      	ldr	r2, [pc, #264]	; (8001028 <HAL_RCC_ClockConfig+0x15c>)
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d103      	bne.n	8000f2c <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f24:	6812      	ldr	r2, [r2, #0]
 8000f26:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000f2a:	e008      	b.n	8000f3e <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000f2c:	1e99      	subs	r1, r3, #2
 8000f2e:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f30:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000f32:	d802      	bhi.n	8000f3a <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f34:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000f38:	e001      	b.n	8000f3e <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f3a:	f012 0f02 	tst.w	r2, #2
 8000f3e:	d0e1      	beq.n	8000f04 <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f40:	4c39      	ldr	r4, [pc, #228]	; (8001028 <HAL_RCC_ClockConfig+0x15c>)
 8000f42:	68a2      	ldr	r2, [r4, #8]
 8000f44:	f022 0203 	bic.w	r2, r2, #3
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000f4c:	f7ff f990 	bl	8000270 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f50:	686b      	ldr	r3, [r5, #4]
 8000f52:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000f54:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f56:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f5a:	d10c      	bne.n	8000f76 <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f5c:	68a3      	ldr	r3, [r4, #8]
 8000f5e:	f003 030c 	and.w	r3, r3, #12
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	d0d3      	beq.n	8000f0e <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f66:	f7ff f983 	bl	8000270 <HAL_GetTick>
 8000f6a:	1bc0      	subs	r0, r0, r7
 8000f6c:	4540      	cmp	r0, r8
 8000f6e:	d9f5      	bls.n	8000f5c <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 8000f70:	2003      	movs	r0, #3
 8000f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d10a      	bne.n	8000f90 <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f7a:	68a3      	ldr	r3, [r4, #8]
 8000f7c:	f003 030c 	and.w	r3, r3, #12
 8000f80:	2b08      	cmp	r3, #8
 8000f82:	d0c4      	beq.n	8000f0e <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f84:	f7ff f974 	bl	8000270 <HAL_GetTick>
 8000f88:	1bc0      	subs	r0, r0, r7
 8000f8a:	4540      	cmp	r0, r8
 8000f8c:	d9f5      	bls.n	8000f7a <HAL_RCC_ClockConfig+0xae>
 8000f8e:	e7ef      	b.n	8000f70 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d10f      	bne.n	8000fb4 <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000f94:	68a3      	ldr	r3, [r4, #8]
 8000f96:	f003 030c 	and.w	r3, r3, #12
 8000f9a:	2b0c      	cmp	r3, #12
 8000f9c:	d0b7      	beq.n	8000f0e <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f9e:	f7ff f967 	bl	8000270 <HAL_GetTick>
 8000fa2:	1bc0      	subs	r0, r0, r7
 8000fa4:	4540      	cmp	r0, r8
 8000fa6:	d9f5      	bls.n	8000f94 <HAL_RCC_ClockConfig+0xc8>
 8000fa8:	e7e2      	b.n	8000f70 <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000faa:	f7ff f961 	bl	8000270 <HAL_GetTick>
 8000fae:	1bc0      	subs	r0, r0, r7
 8000fb0:	4540      	cmp	r0, r8
 8000fb2:	d8dd      	bhi.n	8000f70 <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fb4:	68a3      	ldr	r3, [r4, #8]
 8000fb6:	f013 0f0c 	tst.w	r3, #12
 8000fba:	d1f6      	bne.n	8000faa <HAL_RCC_ClockConfig+0xde>
 8000fbc:	e7a7      	b.n	8000f0e <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fbe:	b2f2      	uxtb	r2, r6
 8000fc0:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 030f 	and.w	r3, r3, #15
 8000fc8:	429e      	cmp	r6, r3
 8000fca:	d19b      	bne.n	8000f04 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fcc:	6829      	ldr	r1, [r5, #0]
 8000fce:	074a      	lsls	r2, r1, #29
 8000fd0:	d506      	bpl.n	8000fe0 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fd2:	4815      	ldr	r0, [pc, #84]	; (8001028 <HAL_RCC_ClockConfig+0x15c>)
 8000fd4:	6883      	ldr	r3, [r0, #8]
 8000fd6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000fda:	68eb      	ldr	r3, [r5, #12]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fe0:	070b      	lsls	r3, r1, #28
 8000fe2:	d507      	bpl.n	8000ff4 <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000fe4:	4a10      	ldr	r2, [pc, #64]	; (8001028 <HAL_RCC_ClockConfig+0x15c>)
 8000fe6:	6929      	ldr	r1, [r5, #16]
 8000fe8:	6893      	ldr	r3, [r2, #8]
 8000fea:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000fee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ff2:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000ff4:	f000 fa00 	bl	80013f8 <HAL_RCC_GetSysClockFreq>
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <HAL_RCC_ClockConfig+0x15c>)
 8000ffa:	22f0      	movs	r2, #240	; 0xf0
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	fa92 f2a2 	rbit	r2, r2
 8001002:	fab2 f282 	clz	r2, r2
 8001006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800100a:	40d3      	lsrs	r3, r2
 800100c:	4a07      	ldr	r2, [pc, #28]	; (800102c <HAL_RCC_ClockConfig+0x160>)
 800100e:	5cd3      	ldrb	r3, [r2, r3]
 8001010:	40d8      	lsrs	r0, r3
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <HAL_RCC_ClockConfig+0x164>)
 8001014:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001016:	2000      	movs	r0, #0
 8001018:	f7ff f8f4 	bl	8000204 <HAL_InitTick>
  
  return HAL_OK;
 800101c:	2000      	movs	r0, #0
}
 800101e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001022:	bf00      	nop
 8001024:	40023c00 	.word	0x40023c00
 8001028:	40023800 	.word	0x40023800
 800102c:	08002098 	.word	0x08002098
 8001030:	20000000 	.word	0x20000000

08001034 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001034:	4b01      	ldr	r3, [pc, #4]	; (800103c <HAL_RCC_GetHCLKFreq+0x8>)
 8001036:	6818      	ldr	r0, [r3, #0]
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000000 	.word	0x20000000

08001040 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001042:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	fa92 f2a2 	rbit	r2, r2
 800104c:	fab2 f282 	clz	r2, r2
 8001050:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001054:	40d3      	lsrs	r3, r2
 8001056:	4a04      	ldr	r2, [pc, #16]	; (8001068 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001058:	5cd3      	ldrb	r3, [r2, r3]
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_RCC_GetPCLK1Freq+0x2c>)
 800105c:	6810      	ldr	r0, [r2, #0]
}
 800105e:	40d8      	lsrs	r0, r3
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800
 8001068:	08002098 	.word	0x08002098
 800106c:	20000000 	.word	0x20000000

08001070 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001072:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	fa92 f2a2 	rbit	r2, r2
 800107c:	fab2 f282 	clz	r2, r2
 8001080:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001084:	40d3      	lsrs	r3, r2
 8001086:	4a04      	ldr	r2, [pc, #16]	; (8001098 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001088:	5cd3      	ldrb	r3, [r2, r3]
 800108a:	4a04      	ldr	r2, [pc, #16]	; (800109c <HAL_RCC_GetPCLK2Freq+0x2c>)
 800108c:	6810      	ldr	r0, [r2, #0]
} 
 800108e:	40d8      	lsrs	r0, r3
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	08002098 	.word	0x08002098
 800109c:	20000000 	.word	0x20000000

080010a0 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a0:	6803      	ldr	r3, [r0, #0]
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a6:	07de      	lsls	r6, r3, #31
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a8:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010aa:	d403      	bmi.n	80010b4 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ac:	6823      	ldr	r3, [r4, #0]
 80010ae:	079d      	lsls	r5, r3, #30
 80010b0:	d458      	bmi.n	8001164 <HAL_RCC_OscConfig+0xc4>
 80010b2:	e0b1      	b.n	8001218 <HAL_RCC_OscConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80010b4:	4b97      	ldr	r3, [pc, #604]	; (8001314 <HAL_RCC_OscConfig+0x274>)
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	f002 020c 	and.w	r2, r2, #12
 80010bc:	2a04      	cmp	r2, #4
 80010be:	d010      	beq.n	80010e2 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80010c0:	689a      	ldr	r2, [r3, #8]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80010c2:	f002 020c 	and.w	r2, r2, #12
 80010c6:	2a08      	cmp	r2, #8
 80010c8:	d102      	bne.n	80010d0 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	0258      	lsls	r0, r3, #9
 80010ce:	d408      	bmi.n	80010e2 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010d0:	4b90      	ldr	r3, [pc, #576]	; (8001314 <HAL_RCC_OscConfig+0x274>)
 80010d2:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80010d4:	f002 020c 	and.w	r2, r2, #12
 80010d8:	2a0c      	cmp	r2, #12
 80010da:	d10b      	bne.n	80010f4 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	0251      	lsls	r1, r2, #9
 80010e0:	d508      	bpl.n	80010f4 <HAL_RCC_OscConfig+0x54>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e2:	4b8c      	ldr	r3, [pc, #560]	; (8001314 <HAL_RCC_OscConfig+0x274>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	039a      	lsls	r2, r3, #14
 80010e8:	d5e0      	bpl.n	80010ac <HAL_RCC_OscConfig+0xc>
 80010ea:	6863      	ldr	r3, [r4, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1dd      	bne.n	80010ac <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 80010f0:	2001      	movs	r0, #1
 80010f2:	e17a      	b.n	80013ea <HAL_RCC_OscConfig+0x34a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f4:	6862      	ldr	r2, [r4, #4]
 80010f6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80010fa:	d104      	bne.n	8001106 <HAL_RCC_OscConfig+0x66>
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	e014      	b.n	8001130 <HAL_RCC_OscConfig+0x90>
 8001106:	4d83      	ldr	r5, [pc, #524]	; (8001314 <HAL_RCC_OscConfig+0x274>)
 8001108:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800110c:	682b      	ldr	r3, [r5, #0]
 800110e:	d107      	bne.n	8001120 <HAL_RCC_OscConfig+0x80>
 8001110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001114:	602b      	str	r3, [r5, #0]
 8001116:	682b      	ldr	r3, [r5, #0]
 8001118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800111c:	602b      	str	r3, [r5, #0]
 800111e:	e007      	b.n	8001130 <HAL_RCC_OscConfig+0x90>
 8001120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001124:	602b      	str	r3, [r5, #0]
 8001126:	682b      	ldr	r3, [r5, #0]
 8001128:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112c:	602b      	str	r3, [r5, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800112e:	b16a      	cbz	r2, 800114c <HAL_RCC_OscConfig+0xac>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001130:	f7ff f89e 	bl	8000270 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001134:	4d77      	ldr	r5, [pc, #476]	; (8001314 <HAL_RCC_OscConfig+0x274>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001136:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001138:	682b      	ldr	r3, [r5, #0]
 800113a:	039b      	lsls	r3, r3, #14
 800113c:	d4b6      	bmi.n	80010ac <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800113e:	f7ff f897 	bl	8000270 <HAL_GetTick>
 8001142:	1b80      	subs	r0, r0, r6
 8001144:	2864      	cmp	r0, #100	; 0x64
 8001146:	d9f7      	bls.n	8001138 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001148:	2003      	movs	r0, #3
 800114a:	e14e      	b.n	80013ea <HAL_RCC_OscConfig+0x34a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114c:	f7ff f890 	bl	8000270 <HAL_GetTick>
 8001150:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001152:	682b      	ldr	r3, [r5, #0]
 8001154:	039f      	lsls	r7, r3, #14
 8001156:	d5a9      	bpl.n	80010ac <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001158:	f7ff f88a 	bl	8000270 <HAL_GetTick>
 800115c:	1b80      	subs	r0, r0, r6
 800115e:	2864      	cmp	r0, #100	; 0x64
 8001160:	d9f7      	bls.n	8001152 <HAL_RCC_OscConfig+0xb2>
 8001162:	e7f1      	b.n	8001148 <HAL_RCC_OscConfig+0xa8>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001164:	4b6b      	ldr	r3, [pc, #428]	; (8001314 <HAL_RCC_OscConfig+0x274>)
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	f012 0f0c 	tst.w	r2, #12
 800116c:	d010      	beq.n	8001190 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800116e:	689a      	ldr	r2, [r3, #8]
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001170:	f002 020c 	and.w	r2, r2, #12
 8001174:	2a08      	cmp	r2, #8
 8001176:	d102      	bne.n	800117e <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	0258      	lsls	r0, r3, #9
 800117c:	d508      	bpl.n	8001190 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800117e:	4a65      	ldr	r2, [pc, #404]	; (8001314 <HAL_RCC_OscConfig+0x274>)
 8001180:	6893      	ldr	r3, [r2, #8]
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	2b0c      	cmp	r3, #12
 8001188:	d117      	bne.n	80011ba <HAL_RCC_OscConfig+0x11a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800118a:	6853      	ldr	r3, [r2, #4]
 800118c:	0259      	lsls	r1, r3, #9
 800118e:	d414      	bmi.n	80011ba <HAL_RCC_OscConfig+0x11a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001190:	4b60      	ldr	r3, [pc, #384]	; (8001314 <HAL_RCC_OscConfig+0x274>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	0792      	lsls	r2, r2, #30
 8001196:	d502      	bpl.n	800119e <HAL_RCC_OscConfig+0xfe>
 8001198:	68e2      	ldr	r2, [r4, #12]
 800119a:	2a01      	cmp	r2, #1
 800119c:	d1a8      	bne.n	80010f0 <HAL_RCC_OscConfig+0x50>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	21f8      	movs	r1, #248	; 0xf8
 80011a2:	fa91 f1a1 	rbit	r1, r1
 80011a6:	6920      	ldr	r0, [r4, #16]
 80011a8:	fab1 f181 	clz	r1, r1
 80011ac:	fa00 f101 	lsl.w	r1, r0, r1
 80011b0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80011b4:	430a      	orrs	r2, r1
 80011b6:	601a      	str	r2, [r3, #0]
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b8:	e02e      	b.n	8001218 <HAL_RCC_OscConfig+0x178>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011ba:	68e2      	ldr	r2, [r4, #12]
 80011bc:	4b56      	ldr	r3, [pc, #344]	; (8001318 <HAL_RCC_OscConfig+0x278>)
 80011be:	b1ea      	cbz	r2, 80011fc <HAL_RCC_OscConfig+0x15c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011c0:	2201      	movs	r2, #1
 80011c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c4:	f7ff f854 	bl	8000270 <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c8:	4d52      	ldr	r5, [pc, #328]	; (8001314 <HAL_RCC_OscConfig+0x274>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ca:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011cc:	682b      	ldr	r3, [r5, #0]
 80011ce:	4851      	ldr	r0, [pc, #324]	; (8001314 <HAL_RCC_OscConfig+0x274>)
 80011d0:	079b      	lsls	r3, r3, #30
 80011d2:	d405      	bmi.n	80011e0 <HAL_RCC_OscConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d4:	f7ff f84c 	bl	8000270 <HAL_GetTick>
 80011d8:	1b80      	subs	r0, r0, r6
 80011da:	2802      	cmp	r0, #2
 80011dc:	d9f6      	bls.n	80011cc <HAL_RCC_OscConfig+0x12c>
 80011de:	e7b3      	b.n	8001148 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e0:	6803      	ldr	r3, [r0, #0]
 80011e2:	22f8      	movs	r2, #248	; 0xf8
 80011e4:	fa92 f2a2 	rbit	r2, r2
 80011e8:	6921      	ldr	r1, [r4, #16]
 80011ea:	fab2 f282 	clz	r2, r2
 80011ee:	fa01 f202 	lsl.w	r2, r1, r2
 80011f2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80011f6:	4313      	orrs	r3, r2
 80011f8:	6003      	str	r3, [r0, #0]
 80011fa:	e00d      	b.n	8001218 <HAL_RCC_OscConfig+0x178>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011fe:	f7ff f837 	bl	8000270 <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001202:	4d44      	ldr	r5, [pc, #272]	; (8001314 <HAL_RCC_OscConfig+0x274>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001204:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001206:	682b      	ldr	r3, [r5, #0]
 8001208:	079f      	lsls	r7, r3, #30
 800120a:	d505      	bpl.n	8001218 <HAL_RCC_OscConfig+0x178>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800120c:	f7ff f830 	bl	8000270 <HAL_GetTick>
 8001210:	1b80      	subs	r0, r0, r6
 8001212:	2802      	cmp	r0, #2
 8001214:	d9f7      	bls.n	8001206 <HAL_RCC_OscConfig+0x166>
 8001216:	e797      	b.n	8001148 <HAL_RCC_OscConfig+0xa8>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	071e      	lsls	r6, r3, #28
 800121c:	d403      	bmi.n	8001226 <HAL_RCC_OscConfig+0x186>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800121e:	6823      	ldr	r3, [r4, #0]
 8001220:	075d      	lsls	r5, r3, #29
 8001222:	d548      	bpl.n	80012b6 <HAL_RCC_OscConfig+0x216>
 8001224:	e01f      	b.n	8001266 <HAL_RCC_OscConfig+0x1c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001226:	6962      	ldr	r2, [r4, #20]
 8001228:	4b3c      	ldr	r3, [pc, #240]	; (800131c <HAL_RCC_OscConfig+0x27c>)
 800122a:	b172      	cbz	r2, 800124a <HAL_RCC_OscConfig+0x1aa>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800122c:	2201      	movs	r2, #1
 800122e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001230:	f7ff f81e 	bl	8000270 <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001234:	4d37      	ldr	r5, [pc, #220]	; (8001314 <HAL_RCC_OscConfig+0x274>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001236:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001238:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800123a:	0798      	lsls	r0, r3, #30
 800123c:	d4ef      	bmi.n	800121e <HAL_RCC_OscConfig+0x17e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800123e:	f7ff f817 	bl	8000270 <HAL_GetTick>
 8001242:	1b80      	subs	r0, r0, r6
 8001244:	2802      	cmp	r0, #2
 8001246:	d9f7      	bls.n	8001238 <HAL_RCC_OscConfig+0x198>
 8001248:	e77e      	b.n	8001148 <HAL_RCC_OscConfig+0xa8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800124a:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124c:	f7ff f810 	bl	8000270 <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001250:	4d30      	ldr	r5, [pc, #192]	; (8001314 <HAL_RCC_OscConfig+0x274>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001252:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001254:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001256:	0799      	lsls	r1, r3, #30
 8001258:	d5e1      	bpl.n	800121e <HAL_RCC_OscConfig+0x17e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800125a:	f7ff f809 	bl	8000270 <HAL_GetTick>
 800125e:	1b80      	subs	r0, r0, r6
 8001260:	2802      	cmp	r0, #2
 8001262:	d9f7      	bls.n	8001254 <HAL_RCC_OscConfig+0x1b4>
 8001264:	e770      	b.n	8001148 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	9301      	str	r3, [sp, #4]
 800126a:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <HAL_RCC_OscConfig+0x274>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800126c:	4d2c      	ldr	r5, [pc, #176]	; (8001320 <HAL_RCC_OscConfig+0x280>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800126e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001270:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001274:	641a      	str	r2, [r3, #64]	; 0x40
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127c:	9301      	str	r3, [sp, #4]
 800127e:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001280:	682b      	ldr	r3, [r5, #0]
 8001282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001286:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001288:	f7fe fff2 	bl	8000270 <HAL_GetTick>
 800128c:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800128e:	682b      	ldr	r3, [r5, #0]
 8001290:	05da      	lsls	r2, r3, #23
 8001292:	d513      	bpl.n	80012bc <HAL_RCC_OscConfig+0x21c>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001294:	68a3      	ldr	r3, [r4, #8]
 8001296:	4d1f      	ldr	r5, [pc, #124]	; (8001314 <HAL_RCC_OscConfig+0x274>)
 8001298:	2b01      	cmp	r3, #1
 800129a:	d115      	bne.n	80012c8 <HAL_RCC_OscConfig+0x228>
 800129c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a4:	f7fe ffe4 	bl	8000270 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a8:	4d1a      	ldr	r5, [pc, #104]	; (8001314 <HAL_RCC_OscConfig+0x274>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012aa:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ac:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012b2:	079b      	lsls	r3, r3, #30
 80012b4:	d519      	bpl.n	80012ea <HAL_RCC_OscConfig+0x24a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012b6:	69a2      	ldr	r2, [r4, #24]
 80012b8:	bba2      	cbnz	r2, 8001324 <HAL_RCC_OscConfig+0x284>
 80012ba:	e07b      	b.n	80013b4 <HAL_RCC_OscConfig+0x314>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80012bc:	f7fe ffd8 	bl	8000270 <HAL_GetTick>
 80012c0:	1b80      	subs	r0, r0, r6
 80012c2:	2802      	cmp	r0, #2
 80012c4:	d9e3      	bls.n	800128e <HAL_RCC_OscConfig+0x1ee>
 80012c6:	e73f      	b.n	8001148 <HAL_RCC_OscConfig+0xa8>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c8:	2b05      	cmp	r3, #5
 80012ca:	d104      	bne.n	80012d6 <HAL_RCC_OscConfig+0x236>
 80012cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012ce:	f043 0304 	orr.w	r3, r3, #4
 80012d2:	672b      	str	r3, [r5, #112]	; 0x70
 80012d4:	e7e2      	b.n	800129c <HAL_RCC_OscConfig+0x1fc>
 80012d6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80012d8:	f022 0201 	bic.w	r2, r2, #1
 80012dc:	672a      	str	r2, [r5, #112]	; 0x70
 80012de:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80012e0:	f022 0204 	bic.w	r2, r2, #4
 80012e4:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012e6:	b133      	cbz	r3, 80012f6 <HAL_RCC_OscConfig+0x256>
 80012e8:	e7dc      	b.n	80012a4 <HAL_RCC_OscConfig+0x204>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ea:	f7fe ffc1 	bl	8000270 <HAL_GetTick>
 80012ee:	1b80      	subs	r0, r0, r6
 80012f0:	42b8      	cmp	r0, r7
 80012f2:	d9dd      	bls.n	80012b0 <HAL_RCC_OscConfig+0x210>
 80012f4:	e728      	b.n	8001148 <HAL_RCC_OscConfig+0xa8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f6:	f7fe ffbb 	bl	8000270 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012fa:	f241 3788 	movw	r7, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fe:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001300:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001302:	0798      	lsls	r0, r3, #30
 8001304:	d5d7      	bpl.n	80012b6 <HAL_RCC_OscConfig+0x216>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001306:	f7fe ffb3 	bl	8000270 <HAL_GetTick>
 800130a:	1b80      	subs	r0, r0, r6
 800130c:	42b8      	cmp	r0, r7
 800130e:	d9f7      	bls.n	8001300 <HAL_RCC_OscConfig+0x260>
 8001310:	e71a      	b.n	8001148 <HAL_RCC_OscConfig+0xa8>
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	42470000 	.word	0x42470000
 800131c:	42470e80 	.word	0x42470e80
 8001320:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001324:	4d32      	ldr	r5, [pc, #200]	; (80013f0 <HAL_RCC_OscConfig+0x350>)
 8001326:	68ab      	ldr	r3, [r5, #8]
 8001328:	f003 030c 	and.w	r3, r3, #12
 800132c:	2b08      	cmp	r3, #8
 800132e:	f43f aedf 	beq.w	80010f0 <HAL_RCC_OscConfig+0x50>
 8001332:	4e30      	ldr	r6, [pc, #192]	; (80013f4 <HAL_RCC_OscConfig+0x354>)
 8001334:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001336:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001338:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800133a:	d14a      	bne.n	80013d2 <HAL_RCC_OscConfig+0x332>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133c:	f7fe ff98 	bl	8000270 <HAL_GetTick>
 8001340:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001342:	682b      	ldr	r3, [r5, #0]
 8001344:	4f2a      	ldr	r7, [pc, #168]	; (80013f0 <HAL_RCC_OscConfig+0x350>)
 8001346:	0199      	lsls	r1, r3, #6
 8001348:	d436      	bmi.n	80013b8 <HAL_RCC_OscConfig+0x318>
 800134a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800134e:	fa92 f2a2 	rbit	r2, r2
 8001352:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001356:	fab2 fc82 	clz	ip, r2
 800135a:	fa93 f3a3 	rbit	r3, r3
 800135e:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8001362:	fab3 fe83 	clz	lr, r3
 8001366:	fa91 f1a1 	rbit	r1, r1
 800136a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800136e:	fab1 f581 	clz	r5, r1
 8001372:	fa92 f2a2 	rbit	r2, r2
 8001376:	69e3      	ldr	r3, [r4, #28]
 8001378:	fab2 f082 	clz	r0, r2
 800137c:	6a22      	ldr	r2, [r4, #32]
 800137e:	ea43 0102 	orr.w	r1, r3, r2
 8001382:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001384:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001386:	fa02 f20c 	lsl.w	r2, r2, ip
 800138a:	4311      	orrs	r1, r2
 800138c:	085a      	lsrs	r2, r3, #1
 800138e:	3a01      	subs	r2, #1
 8001390:	fa02 f30e 	lsl.w	r3, r2, lr
 8001394:	430b      	orrs	r3, r1
 8001396:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001398:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800139a:	40a9      	lsls	r1, r5
 800139c:	430b      	orrs	r3, r1
 800139e:	4082      	lsls	r2, r0
 80013a0:	4313      	orrs	r3, r2
 80013a2:	607b      	str	r3, [r7, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013a4:	2301      	movs	r3, #1
 80013a6:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a8:	f7fe ff62 	bl	8000270 <HAL_GetTick>
 80013ac:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	019a      	lsls	r2, r3, #6
 80013b2:	d508      	bpl.n	80013c6 <HAL_RCC_OscConfig+0x326>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80013b4:	2000      	movs	r0, #0
 80013b6:	e018      	b.n	80013ea <HAL_RCC_OscConfig+0x34a>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013b8:	f7fe ff5a 	bl	8000270 <HAL_GetTick>
 80013bc:	ebc8 0000 	rsb	r0, r8, r0
 80013c0:	2802      	cmp	r0, #2
 80013c2:	d9be      	bls.n	8001342 <HAL_RCC_OscConfig+0x2a2>
 80013c4:	e6c0      	b.n	8001148 <HAL_RCC_OscConfig+0xa8>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c6:	f7fe ff53 	bl	8000270 <HAL_GetTick>
 80013ca:	1b00      	subs	r0, r0, r4
 80013cc:	2802      	cmp	r0, #2
 80013ce:	d9ee      	bls.n	80013ae <HAL_RCC_OscConfig+0x30e>
 80013d0:	e6ba      	b.n	8001148 <HAL_RCC_OscConfig+0xa8>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d2:	f7fe ff4d 	bl	8000270 <HAL_GetTick>
 80013d6:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d8:	682b      	ldr	r3, [r5, #0]
 80013da:	019b      	lsls	r3, r3, #6
 80013dc:	d5ea      	bpl.n	80013b4 <HAL_RCC_OscConfig+0x314>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013de:	f7fe ff47 	bl	8000270 <HAL_GetTick>
 80013e2:	1b00      	subs	r0, r0, r4
 80013e4:	2802      	cmp	r0, #2
 80013e6:	d9f7      	bls.n	80013d8 <HAL_RCC_OscConfig+0x338>
 80013e8:	e6ae      	b.n	8001148 <HAL_RCC_OscConfig+0xa8>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80013ea:	b002      	add	sp, #8
 80013ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013f0:	40023800 	.word	0x40023800
 80013f4:	42470060 	.word	0x42470060

080013f8 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013f8:	4930      	ldr	r1, [pc, #192]	; (80014bc <HAL_RCC_GetSysClockFreq+0xc4>)
 80013fa:	6888      	ldr	r0, [r1, #8]
 80013fc:	f000 000c 	and.w	r0, r0, #12
 8001400:	2808      	cmp	r0, #8
 8001402:	d008      	beq.n	8001416 <HAL_RCC_GetSysClockFreq+0x1e>
 8001404:	280c      	cmp	r0, #12
 8001406:	d02f      	beq.n	8001468 <HAL_RCC_GetSysClockFreq+0x70>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001408:	4a2d      	ldr	r2, [pc, #180]	; (80014c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800140a:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800140c:	2804      	cmp	r0, #4
 800140e:	bf0c      	ite	eq
 8001410:	4618      	moveq	r0, r3
 8001412:	4610      	movne	r0, r2
 8001414:	4770      	bx	lr
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001416:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001418:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800141a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800141e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001422:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001426:	684b      	ldr	r3, [r1, #4]
 8001428:	fa92 f2a2 	rbit	r2, r2
 800142c:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001430:	fab2 f282 	clz	r2, r2
 8001434:	ea01 0103 	and.w	r1, r1, r3
 8001438:	fa21 f102 	lsr.w	r1, r1, r2
 800143c:	bf14      	ite	ne
 800143e:	4a21      	ldrne	r2, [pc, #132]	; (80014c4 <HAL_RCC_GetSysClockFreq+0xcc>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001440:	4a1f      	ldreq	r2, [pc, #124]	; (80014c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001442:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001446:	4a1d      	ldr	r2, [pc, #116]	; (80014bc <HAL_RCC_GetSysClockFreq+0xc4>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001448:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 800144c:	6852      	ldr	r2, [r2, #4]
 800144e:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001452:	fa90 f0a0 	rbit	r0, r0
 8001456:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 800145a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800145e:	fa22 f000 	lsr.w	r0, r2, r0
 8001462:	3001      	adds	r0, #1
 8001464:	0040      	lsls	r0, r0, #1
 8001466:	e025      	b.n	80014b4 <HAL_RCC_GetSysClockFreq+0xbc>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001468:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800146a:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800146c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001470:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001474:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001478:	684b      	ldr	r3, [r1, #4]
 800147a:	fa92 f2a2 	rbit	r2, r2
 800147e:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001482:	fab2 f282 	clz	r2, r2
 8001486:	ea01 0103 	and.w	r1, r1, r3
 800148a:	fa21 f102 	lsr.w	r1, r1, r2
 800148e:	bf14      	ite	ne
 8001490:	4a0c      	ldrne	r2, [pc, #48]	; (80014c4 <HAL_RCC_GetSysClockFreq+0xcc>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001492:	4a0b      	ldreq	r2, [pc, #44]	; (80014c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001494:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 8001498:	4a08      	ldr	r2, [pc, #32]	; (80014bc <HAL_RCC_GetSysClockFreq+0xc4>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800149a:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 800149e:	6852      	ldr	r2, [r2, #4]
 80014a0:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 80014a4:	fa90 f0a0 	rbit	r0, r0
 80014a8:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllr;
 80014ac:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80014b0:	fa22 f000 	lsr.w	r0, r2, r0
 80014b4:	fbb3 f0f0 	udiv	r0, r3, r0
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	00f42400 	.word	0x00f42400
 80014c4:	007a1200 	.word	0x007a1200

080014c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80014c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014cc:	9e06      	ldr	r6, [sp, #24]
 80014ce:	4604      	mov	r4, r0
 80014d0:	4688      	mov	r8, r1
 80014d2:	4617      	mov	r7, r2
 80014d4:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80014d6:	6822      	ldr	r2, [r4, #0]
 80014d8:	6893      	ldr	r3, [r2, #8]
 80014da:	ea38 0303 	bics.w	r3, r8, r3
 80014de:	bf0c      	ite	eq
 80014e0:	2301      	moveq	r3, #1
 80014e2:	2300      	movne	r3, #0
 80014e4:	429f      	cmp	r7, r3
 80014e6:	d033      	beq.n	8001550 <SPI_WaitFlagStateUntilTimeout+0x88>
  {
    if(Timeout != HAL_MAX_DELAY)
 80014e8:	1c6b      	adds	r3, r5, #1
 80014ea:	d0f5      	beq.n	80014d8 <SPI_WaitFlagStateUntilTimeout+0x10>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80014ec:	b94d      	cbnz	r5, 8001502 <SPI_WaitFlagStateUntilTimeout+0x3a>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80014f6:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80014f8:	6862      	ldr	r2, [r4, #4]
 80014fa:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80014fe:	d111      	bne.n	8001524 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8001500:	e005      	b.n	800150e <SPI_WaitFlagStateUntilTimeout+0x46>
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001502:	f7fe feb5 	bl	8000270 <HAL_GetTick>
 8001506:	1b80      	subs	r0, r0, r6
 8001508:	4285      	cmp	r5, r0
 800150a:	d8e4      	bhi.n	80014d6 <SPI_WaitFlagStateUntilTimeout+0xe>
 800150c:	e7ef      	b.n	80014ee <SPI_WaitFlagStateUntilTimeout+0x26>
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800150e:	68a2      	ldr	r2, [r4, #8]
 8001510:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001514:	d002      	beq.n	800151c <SPI_WaitFlagStateUntilTimeout+0x54>
 8001516:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800151a:	d103      	bne.n	8001524 <SPI_WaitFlagStateUntilTimeout+0x5c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001522:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001524:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001526:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800152a:	d108      	bne.n	800153e <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
 800152c:	6819      	ldr	r1, [r3, #0]
 800152e:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 8001532:	400a      	ands	r2, r1
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800153c:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 800153e:	2301      	movs	r3, #1
 8001540:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001544:	2300      	movs	r3, #0
 8001546:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800154a:	2003      	movs	r0, #3
 800154c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001550:	2000      	movs	r0, #0
}
 8001552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001556 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001556:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001558:	460b      	mov	r3, r1
 800155a:	9200      	str	r2, [sp, #0]
 800155c:	2180      	movs	r1, #128	; 0x80
 800155e:	2200      	movs	r2, #0
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001560:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001562:	f7ff ffb1 	bl	80014c8 <SPI_WaitFlagStateUntilTimeout>
 8001566:	b120      	cbz	r0, 8001572 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001568:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800156a:	f043 0320 	orr.w	r3, r3, #32
 800156e:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8001570:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8001572:	b002      	add	sp, #8
 8001574:	bd10      	pop	{r4, pc}

08001576 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001576:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001578:	4604      	mov	r4, r0
 800157a:	2800      	cmp	r0, #0
 800157c:	d036      	beq.n	80015ec <HAL_SPI_Init+0x76>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001582:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001586:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800158a:	b91b      	cbnz	r3, 8001594 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800158c:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001590:	f000 fc64 	bl	8001e5c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001594:	68a1      	ldr	r1, [r4, #8]
 8001596:	6860      	ldr	r0, [r4, #4]
 8001598:	4308      	orrs	r0, r1
 800159a:	68e1      	ldr	r1, [r4, #12]
 800159c:	4308      	orrs	r0, r1
 800159e:	6921      	ldr	r1, [r4, #16]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80015a0:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80015a2:	4308      	orrs	r0, r1
 80015a4:	6961      	ldr	r1, [r4, #20]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80015a6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80015aa:	6823      	ldr	r3, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80015ac:	4308      	orrs	r0, r1
 80015ae:	69e1      	ldr	r1, [r4, #28]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80015b0:	681a      	ldr	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80015b2:	4308      	orrs	r0, r1
 80015b4:	6a21      	ldr	r1, [r4, #32]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80015b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80015bc:	4308      	orrs	r0, r1
 80015be:	69a2      	ldr	r2, [r4, #24]
 80015c0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80015c2:	4308      	orrs	r0, r1
 80015c4:	f402 7100 	and.w	r1, r2, #512	; 0x200
 80015c8:	4301      	orrs	r1, r0
 80015ca:	6019      	str	r1, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80015cc:	0c12      	lsrs	r2, r2, #16
 80015ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80015d0:	f002 0204 	and.w	r2, r2, #4
 80015d4:	430a      	orrs	r2, r1
 80015d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80015d8:	69da      	ldr	r2, [r3, #28]
 80015da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015de:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80015e0:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80015e2:	2301      	movs	r3, #1
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80015e4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80015e6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 80015ea:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
    return HAL_ERROR;
 80015ec:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
}
 80015ee:	bd10      	pop	{r4, pc}

080015f0 <HAL_SPI_Transmit_DMA>:

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80015f0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80015f4:	2b01      	cmp	r3, #1
  * @param  pData: pointer to data buffer
  * @param  Size: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80015f6:	b510      	push	{r4, lr}
 80015f8:	4604      	mov	r4, r0

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80015fa:	d046      	beq.n	800168a <HAL_SPI_Transmit_DMA+0x9a>
 80015fc:	2301      	movs	r3, #1
 80015fe:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  if(hspi->State != HAL_SPI_STATE_READY)
 8001602:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
 8001606:	b2c0      	uxtb	r0, r0
 8001608:	4298      	cmp	r0, r3
 800160a:	d139      	bne.n	8001680 <HAL_SPI_Transmit_DMA+0x90>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if((pData == NULL) || (Size == 0U))
 800160c:	2900      	cmp	r1, #0
 800160e:	d038      	beq.n	8001682 <HAL_SPI_Transmit_DMA+0x92>
 8001610:	2a00      	cmp	r2, #0
 8001612:	d036      	beq.n	8001682 <HAL_SPI_Transmit_DMA+0x92>
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001614:	2303      	movs	r3, #3
 8001616:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800161a:	2300      	movs	r3, #0
 800161c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800161e:	63a3      	str	r3, [r4, #56]	; 0x38
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;
 8001620:	86e2      	strh	r2, [r4, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
  hspi->TxISR       = NULL;
 8001622:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
  hspi->RxXferSize  = 0U;
  hspi->RxXferCount = 0U;
 8001624:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
  hspi->TxISR       = NULL;
  hspi->RxISR       = NULL;
 8001626:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001628:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800162a:	68a3      	ldr	r3, [r4, #8]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
 800162c:	86a2      	strh	r2, [r4, #52]	; 0x34
 800162e:	6822      	ldr	r2, [r4, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8001630:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001632:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->RxISR       = NULL;
  hspi->RxXferSize  = 0U;
  hspi->RxXferCount = 0U;

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  {
    SPI_1LINE_TX(hspi);
 8001638:	bf02      	ittt	eq
 800163a:	6813      	ldreq	r3, [r2, #0]
 800163c:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8001640:	6013      	streq	r3, [r2, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <HAL_SPI_Transmit_DMA+0xa0>)
 8001644:	6403      	str	r3, [r0, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8001646:	4b13      	ldr	r3, [pc, #76]	; (8001694 <HAL_SPI_Transmit_DMA+0xa4>)
 8001648:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <HAL_SPI_Transmit_DMA+0xa8>)
 800164c:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800164e:	2300      	movs	r3, #0
 8001650:	6503      	str	r3, [r0, #80]	; 0x50

  /* Enable the Tx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8001652:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001654:	320c      	adds	r2, #12
 8001656:	b29b      	uxth	r3, r3
 8001658:	f7ff f9ee 	bl	8000a38 <HAL_DMA_Start_IT>

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800165c:	6823      	ldr	r3, [r4, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	0652      	lsls	r2, r2, #25
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001662:	bf5e      	ittt	pl
 8001664:	681a      	ldrpl	r2, [r3, #0]
 8001666:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800166a:	601a      	strpl	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	f042 0220 	orr.w	r2, r2, #32
 8001672:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	f042 0202 	orr.w	r2, r2, #2
 800167a:	605a      	str	r2, [r3, #4]
  * @param  Size: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
  HAL_StatusTypeDef errorcode = HAL_OK;
 800167c:	2000      	movs	r0, #0
 800167e:	e000      	b.n	8001682 <HAL_SPI_Transmit_DMA+0x92>
  /* Process Locked */
  __HAL_LOCK(hspi);

  if(hspi->State != HAL_SPI_STATE_READY)
  {
    errorcode = HAL_BUSY;
 8001680:	2002      	movs	r0, #2
  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001682:	2300      	movs	r3, #0
 8001684:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8001688:	bd10      	pop	{r4, pc}

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800168a:	2002      	movs	r0, #2

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
  return errorcode;
}
 800168c:	bd10      	pop	{r4, pc}
 800168e:	bf00      	nop
 8001690:	080016a1 	.word	0x080016a1
 8001694:	080016cf 	.word	0x080016cf
 8001698:	080016ad 	.word	0x080016ad

0800169c <HAL_SPI_TxCpltCallback>:
 800169c:	4770      	bx	lr

0800169e <HAL_SPI_TxHalfCpltCallback>:
 800169e:	4770      	bx	lr

080016a0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80016a0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;

  HAL_SPI_TxHalfCpltCallback(hspi);
 80016a2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80016a4:	f7ff fffb 	bl	800169e <HAL_SPI_TxHalfCpltCallback>
 80016a8:	bd08      	pop	{r3, pc}

080016aa <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80016aa:	4770      	bx	lr

080016ac <SPI_DMAError>:
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
  SPI_HandleTypeDef* hspi = (SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016ac:	6b80      	ldr	r0, [r0, #56]	; 0x38

/* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80016ae:	6802      	ldr	r2, [r0, #0]
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80016b0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = (SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;

/* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80016b2:	6853      	ldr	r3, [r2, #4]
 80016b4:	f023 0303 	bic.w	r3, r3, #3
 80016b8:	6053      	str	r3, [r2, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80016ba:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80016bc:	f043 0310 	orr.w	r3, r3, #16
 80016c0:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80016c2:	2301      	movs	r3, #1
 80016c4:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 80016c8:	f7ff ffef 	bl	80016aa <HAL_SPI_ErrorCallback>
 80016cc:	bd08      	pop	{r3, pc}

080016ce <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80016ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80016d0:	4605      	mov	r5, r0
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016d2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  uint32_t tickstart = 0U;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80016d4:	f7fe fdcc 	bl	8000270 <HAL_GetTick>

  /* DMA Normal Mode */
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80016d8:	682b      	ldr	r3, [r5, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	05db      	lsls	r3, r3, #23
{
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  uint32_t tickstart = 0U;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80016de:	4602      	mov	r2, r0

  /* DMA Normal Mode */
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80016e0:	d421      	bmi.n	8001726 <SPI_DMATransmitCplt+0x58>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80016e2:	6821      	ldr	r1, [r4, #0]
 80016e4:	684b      	ldr	r3, [r1, #4]
 80016e6:	f023 0302 	bic.w	r3, r3, #2
 80016ea:	604b      	str	r3, [r1, #4]

    /* Check the end of the transaction */
    if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80016ec:	4620      	mov	r0, r4
 80016ee:	2164      	movs	r1, #100	; 0x64
 80016f0:	f7ff ff31 	bl	8001556 <SPI_CheckFlag_BSY>
 80016f4:	b118      	cbz	r0, 80016fe <SPI_DMATransmitCplt+0x30>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80016f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80016f8:	f043 0320 	orr.w	r3, r3, #32
 80016fc:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80016fe:	68a3      	ldr	r3, [r4, #8]
 8001700:	b933      	cbnz	r3, 8001710 <SPI_DMATransmitCplt+0x42>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	6823      	ldr	r3, [r4, #0]
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	9201      	str	r2, [sp, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	9b01      	ldr	r3, [sp, #4]
    }

    hspi->TxXferCount = 0U;
 8001710:	2300      	movs	r3, #0
 8001712:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8001714:	2301      	movs	r3, #1
 8001716:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800171a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800171c:	b11b      	cbz	r3, 8001726 <SPI_DMATransmitCplt+0x58>
    {
      HAL_SPI_ErrorCallback(hspi);
 800171e:	4620      	mov	r0, r4
 8001720:	f7ff ffc3 	bl	80016aa <HAL_SPI_ErrorCallback>
      return;
 8001724:	e002      	b.n	800172c <SPI_DMATransmitCplt+0x5e>
    }
  }
  HAL_SPI_TxCpltCallback(hspi);
 8001726:	4620      	mov	r0, r4
 8001728:	f7ff ffb8 	bl	800169c <HAL_SPI_TxCpltCallback>
}
 800172c:	b003      	add	sp, #12
 800172e:	bd30      	pop	{r4, r5, pc}

08001730 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001734:	6807      	ldr	r7, [r0, #0]
 8001736:	693b      	ldr	r3, [r7, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001738:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800173a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800173e:	68c3      	ldr	r3, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001740:	68a1      	ldr	r1, [r4, #8]
 8001742:	69c0      	ldr	r0, [r0, #28]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001744:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001746:	6922      	ldr	r2, [r4, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001748:	613b      	str	r3, [r7, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800174a:	68fb      	ldr	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800174c:	4311      	orrs	r1, r2
 800174e:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001750:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001754:	430a      	orrs	r2, r1
 8001756:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001758:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800175c:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800175e:	60fb      	str	r3, [r7, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001760:	697b      	ldr	r3, [r7, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001762:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001766:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001768:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800176c:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	4b7c      	ldr	r3, [pc, #496]	; (8001964 <UART_SetConfig+0x234>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001774:	d17c      	bne.n	8001870 <UART_SetConfig+0x140>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001776:	429f      	cmp	r7, r3
 8001778:	d003      	beq.n	8001782 <UART_SetConfig+0x52>
 800177a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800177e:	429f      	cmp	r7, r3
 8001780:	d131      	bne.n	80017e6 <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001782:	f7ff fc75 	bl	8001070 <HAL_RCC_GetPCLK2Freq>
 8001786:	6863      	ldr	r3, [r4, #4]
 8001788:	2519      	movs	r5, #25
 800178a:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800178e:	4368      	muls	r0, r5
 8001790:	fbb0 f8f8 	udiv	r8, r0, r8
 8001794:	f7ff fc6c 	bl	8001070 <HAL_RCC_GetPCLK2Freq>
 8001798:	6866      	ldr	r6, [r4, #4]
 800179a:	4368      	muls	r0, r5
 800179c:	0076      	lsls	r6, r6, #1
 800179e:	fbb0 f6f6 	udiv	r6, r0, r6
 80017a2:	f7ff fc65 	bl	8001070 <HAL_RCC_GetPCLK2Freq>
 80017a6:	6863      	ldr	r3, [r4, #4]
 80017a8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4368      	muls	r0, r5
 80017b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80017b4:	fbb0 f0f9 	udiv	r0, r0, r9
 80017b8:	fb09 6610 	mls	r6, r9, r0, r6
 80017bc:	f7ff fc58 	bl	8001070 <HAL_RCC_GetPCLK2Freq>
 80017c0:	fbb8 f8f9 	udiv	r8, r8, r9
 80017c4:	6861      	ldr	r1, [r4, #4]
 80017c6:	00f6      	lsls	r6, r6, #3
 80017c8:	3632      	adds	r6, #50	; 0x32
 80017ca:	fbb6 f6f9 	udiv	r6, r6, r9
 80017ce:	0076      	lsls	r6, r6, #1
 80017d0:	4368      	muls	r0, r5
 80017d2:	0049      	lsls	r1, r1, #1
 80017d4:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80017d8:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 80017dc:	fbb0 faf1 	udiv	sl, r0, r1
 80017e0:	f7ff fc46 	bl	8001070 <HAL_RCC_GetPCLK2Freq>
 80017e4:	e030      	b.n	8001848 <UART_SetConfig+0x118>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80017e6:	f7ff fc2b 	bl	8001040 <HAL_RCC_GetPCLK1Freq>
 80017ea:	6863      	ldr	r3, [r4, #4]
 80017ec:	2519      	movs	r5, #25
 80017ee:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80017f2:	4368      	muls	r0, r5
 80017f4:	fbb0 f8f8 	udiv	r8, r0, r8
 80017f8:	f7ff fc22 	bl	8001040 <HAL_RCC_GetPCLK1Freq>
 80017fc:	6866      	ldr	r6, [r4, #4]
 80017fe:	4368      	muls	r0, r5
 8001800:	0076      	lsls	r6, r6, #1
 8001802:	fbb0 f6f6 	udiv	r6, r0, r6
 8001806:	f7ff fc1b 	bl	8001040 <HAL_RCC_GetPCLK1Freq>
 800180a:	6863      	ldr	r3, [r4, #4]
 800180c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4368      	muls	r0, r5
 8001814:	fbb0 f0f3 	udiv	r0, r0, r3
 8001818:	fbb0 f0f9 	udiv	r0, r0, r9
 800181c:	fb09 6610 	mls	r6, r9, r0, r6
 8001820:	f7ff fc0e 	bl	8001040 <HAL_RCC_GetPCLK1Freq>
 8001824:	fbb8 f8f9 	udiv	r8, r8, r9
 8001828:	00f6      	lsls	r6, r6, #3
 800182a:	6861      	ldr	r1, [r4, #4]
 800182c:	3632      	adds	r6, #50	; 0x32
 800182e:	fbb6 f6f9 	udiv	r6, r6, r9
 8001832:	0076      	lsls	r6, r6, #1
 8001834:	4368      	muls	r0, r5
 8001836:	0049      	lsls	r1, r1, #1
 8001838:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800183c:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8001840:	fbb0 faf1 	udiv	sl, r0, r1
 8001844:	f7ff fbfc 	bl	8001040 <HAL_RCC_GetPCLK1Freq>
 8001848:	4345      	muls	r5, r0
 800184a:	6860      	ldr	r0, [r4, #4]
 800184c:	0040      	lsls	r0, r0, #1
 800184e:	fbb5 f0f0 	udiv	r0, r5, r0
 8001852:	fbb0 f0f9 	udiv	r0, r0, r9
 8001856:	fb09 a210 	mls	r2, r9, r0, sl
 800185a:	00d2      	lsls	r2, r2, #3
 800185c:	3232      	adds	r2, #50	; 0x32
 800185e:	fbb2 f3f9 	udiv	r3, r2, r9
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	4443      	add	r3, r8
 8001868:	441e      	add	r6, r3
 800186a:	60be      	str	r6, [r7, #8]
 800186c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001870:	429f      	cmp	r7, r3
 8001872:	d002      	beq.n	800187a <UART_SetConfig+0x14a>
 8001874:	4b3c      	ldr	r3, [pc, #240]	; (8001968 <UART_SetConfig+0x238>)
 8001876:	429f      	cmp	r7, r3
 8001878:	d130      	bne.n	80018dc <UART_SetConfig+0x1ac>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800187a:	f7ff fbf9 	bl	8001070 <HAL_RCC_GetPCLK2Freq>
 800187e:	6863      	ldr	r3, [r4, #4]
 8001880:	2519      	movs	r5, #25
 8001882:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8001886:	4368      	muls	r0, r5
 8001888:	fbb0 f8f8 	udiv	r8, r0, r8
 800188c:	f7ff fbf0 	bl	8001070 <HAL_RCC_GetPCLK2Freq>
 8001890:	6866      	ldr	r6, [r4, #4]
 8001892:	4368      	muls	r0, r5
 8001894:	00b6      	lsls	r6, r6, #2
 8001896:	fbb0 f6f6 	udiv	r6, r0, r6
 800189a:	f7ff fbe9 	bl	8001070 <HAL_RCC_GetPCLK2Freq>
 800189e:	6863      	ldr	r3, [r4, #4]
 80018a0:	f04f 0964 	mov.w	r9, #100	; 0x64
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4368      	muls	r0, r5
 80018a8:	fbb0 f0f3 	udiv	r0, r0, r3
 80018ac:	fbb0 f0f9 	udiv	r0, r0, r9
 80018b0:	fb09 6610 	mls	r6, r9, r0, r6
 80018b4:	f7ff fbdc 	bl	8001070 <HAL_RCC_GetPCLK2Freq>
 80018b8:	fbb8 f8f9 	udiv	r8, r8, r9
 80018bc:	6861      	ldr	r1, [r4, #4]
 80018be:	0136      	lsls	r6, r6, #4
 80018c0:	4368      	muls	r0, r5
 80018c2:	0089      	lsls	r1, r1, #2
 80018c4:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80018c8:	3632      	adds	r6, #50	; 0x32
 80018ca:	fbb0 faf1 	udiv	sl, r0, r1
 80018ce:	fbb6 f6f9 	udiv	r6, r6, r9
 80018d2:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 80018d6:	f7ff fbcb 	bl	8001070 <HAL_RCC_GetPCLK2Freq>
 80018da:	e02f      	b.n	800193c <UART_SetConfig+0x20c>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80018dc:	f7ff fbb0 	bl	8001040 <HAL_RCC_GetPCLK1Freq>
 80018e0:	6863      	ldr	r3, [r4, #4]
 80018e2:	2519      	movs	r5, #25
 80018e4:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80018e8:	4368      	muls	r0, r5
 80018ea:	fbb0 f8f8 	udiv	r8, r0, r8
 80018ee:	f7ff fba7 	bl	8001040 <HAL_RCC_GetPCLK1Freq>
 80018f2:	6866      	ldr	r6, [r4, #4]
 80018f4:	4368      	muls	r0, r5
 80018f6:	00b6      	lsls	r6, r6, #2
 80018f8:	fbb0 f6f6 	udiv	r6, r0, r6
 80018fc:	f7ff fba0 	bl	8001040 <HAL_RCC_GetPCLK1Freq>
 8001900:	6863      	ldr	r3, [r4, #4]
 8001902:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4368      	muls	r0, r5
 800190a:	fbb0 f0f3 	udiv	r0, r0, r3
 800190e:	fbb0 f0f9 	udiv	r0, r0, r9
 8001912:	fb09 6610 	mls	r6, r9, r0, r6
 8001916:	f7ff fb93 	bl	8001040 <HAL_RCC_GetPCLK1Freq>
 800191a:	fbb8 f8f9 	udiv	r8, r8, r9
 800191e:	6861      	ldr	r1, [r4, #4]
 8001920:	0136      	lsls	r6, r6, #4
 8001922:	3632      	adds	r6, #50	; 0x32
 8001924:	4368      	muls	r0, r5
 8001926:	fbb6 f6f9 	udiv	r6, r6, r9
 800192a:	0089      	lsls	r1, r1, #2
 800192c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001930:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8001934:	fbb0 faf1 	udiv	sl, r0, r1
 8001938:	f7ff fb82 	bl	8001040 <HAL_RCC_GetPCLK1Freq>
 800193c:	4345      	muls	r5, r0
 800193e:	6860      	ldr	r0, [r4, #4]
 8001940:	0080      	lsls	r0, r0, #2
 8001942:	fbb5 f0f0 	udiv	r0, r5, r0
 8001946:	fbb0 f0f9 	udiv	r0, r0, r9
 800194a:	fb09 a210 	mls	r2, r9, r0, sl
 800194e:	0112      	lsls	r2, r2, #4
 8001950:	3232      	adds	r2, #50	; 0x32
 8001952:	fbb2 f3f9 	udiv	r3, r2, r9
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	4433      	add	r3, r6
 800195c:	4443      	add	r3, r8
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001964:	40011000 	.word	0x40011000
 8001968:	40011400 	.word	0x40011400

0800196c <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800196c:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 800196e:	4604      	mov	r4, r0
 8001970:	b340      	cbz	r0, 80019c4 <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001972:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001976:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800197a:	b91b      	cbnz	r3, 8001984 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800197c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001980:	f000 fac2 	bl	8001f08 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001984:	6822      	ldr	r2, [r4, #0]
    huart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001986:	2324      	movs	r3, #36	; 0x24
 8001988:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800198c:	68d3      	ldr	r3, [r2, #12]
 800198e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001992:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001994:	4620      	mov	r0, r4
 8001996:	f7ff fecb 	bl	8001730 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800199a:	6823      	ldr	r3, [r4, #0]
 800199c:	691a      	ldr	r2, [r3, #16]
 800199e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019a4:	695a      	ldr	r2, [r3, #20]
 80019a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019aa:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019b2:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019b4:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80019b6:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019b8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80019ba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80019be:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 80019c2:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 80019c4:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 80019c6:	bd10      	pop	{r4, pc}

080019c8 <spidmacallback>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

void spidmacallback(DMA_HandleTypeDef* dhandle){
	  HAL_ADC_Start_DMA(&hadc1, adcValue, 256);
 80019c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019cc:	4901      	ldr	r1, [pc, #4]	; (80019d4 <spidmacallback+0xc>)
 80019ce:	4802      	ldr	r0, [pc, #8]	; (80019d8 <spidmacallback+0x10>)
 80019d0:	f7fe bd0c 	b.w	80003ec <HAL_ADC_Start_DMA>
 80019d4:	20000288 	.word	0x20000288
 80019d8:	20000138 	.word	0x20000138

080019dc <HAL_ADC_ConvCpltCallback>:
		erosites = (ADC_raw - 1700) * 6 ;
		adc_flag = 1;

	}*/

   	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80019dc:	2120      	movs	r1, #32
 80019de:	4801      	ldr	r0, [pc, #4]	; (80019e4 <HAL_ADC_ConvCpltCallback+0x8>)
 80019e0:	f7ff ba70 	b.w	8000ec4 <HAL_GPIO_TogglePin>
 80019e4:	40020000 	.word	0x40020000

080019e8 <HAL_ADC_ConvHalfCpltCallback>:
	//HAL_ADC_Start_DMA(&hadc1,adcValue,256);

}

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019e8:	4770      	bx	lr
	...

080019ec <writeLed>:


}
*/

void writeLed() {
 80019ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019f0:	af00      	add	r7, sp, #0
	uint16_t res = 50;

	uint16_t temp[COLOR_COUNT *8 +res+20];
 80019f2:	f5ad 6d10 	sub.w	sp, sp, #2304	; 0x900
 80019f6:	4669      	mov	r1, sp
 80019f8:	f1ad 0302 	sub.w	r3, sp, #2
 80019fc:	f10d 0226 	add.w	r2, sp, #38	; 0x26
	uint16_t i, j, k ;

	for(k=0 ; k<20; k++){
		temp[k]=0b0000000000000000;
 8001a00:	2000      	movs	r0, #0
 8001a02:	f823 0f02 	strh.w	r0, [r3, #2]!
	uint16_t res = 50;

	uint16_t temp[COLOR_COUNT *8 +res+20];
	uint16_t i, j, k ;

	for(k=0 ; k<20; k++){
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d1fb      	bne.n	8001a02 <writeLed+0x16>
 8001a0a:	4d1a      	ldr	r5, [pc, #104]	; (8001a74 <writeLed+0x88>)
 8001a0c:	f101 0028 	add.w	r0, r1, #40	; 0x28
 8001a10:	2400      	movs	r4, #0
		temp[k]=0b0000000000000000;
	}

	for (i = 00; i < COLOR_COUNT; i++) {
		for (j = 0; j < 8; j++) {
			if ((colors[i] & (127 >> j)) != 0) {
 8001a12:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
				temp[i * 8 + j+20] = 0b1111111110000000;
			} else
				temp[i * 8 + j+20] = 0b1111100000000000;
 8001a16:	f44f 4c78 	mov.w	ip, #63488	; 0xf800
	}

	for (i = 00; i < COLOR_COUNT; i++) {
		for (j = 0; j < 8; j++) {
			if ((colors[i] & (127 >> j)) != 0) {
				temp[i * 8 + j+20] = 0b1111111110000000;
 8001a1a:	f64f 7880 	movw	r8, #65408	; 0xff80
		temp[k]=0b0000000000000000;
	}

	for (i = 00; i < COLOR_COUNT; i++) {
		for (j = 0; j < 8; j++) {
			if ((colors[i] & (127 >> j)) != 0) {
 8001a1e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8001a22:	4602      	mov	r2, r0
 8001a24:	2300      	movs	r3, #0
 8001a26:	fa4e f903 	asr.w	r9, lr, r3
 8001a2a:	ea19 0f06 	tst.w	r9, r6
 8001a2e:	f103 0301 	add.w	r3, r3, #1
				temp[i * 8 + j+20] = 0b1111111110000000;
 8001a32:	bf14      	ite	ne
 8001a34:	f8a2 8000 	strhne.w	r8, [r2]
			} else
				temp[i * 8 + j+20] = 0b1111100000000000;
 8001a38:	f8a2 c000 	strheq.w	ip, [r2]
	for(k=0 ; k<20; k++){
		temp[k]=0b0000000000000000;
	}

	for (i = 00; i < COLOR_COUNT; i++) {
		for (j = 0; j < 8; j++) {
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	f102 0202 	add.w	r2, r2, #2
 8001a42:	d1f0      	bne.n	8001a26 <writeLed+0x3a>
 8001a44:	3408      	adds	r4, #8

	for(k=0 ; k<20; k++){
		temp[k]=0b0000000000000000;
	}

	for (i = 00; i < COLOR_COUNT; i++) {
 8001a46:	f5b4 6f87 	cmp.w	r4, #1080	; 0x438
 8001a4a:	f100 0010 	add.w	r0, r0, #16
 8001a4e:	d1e6      	bne.n	8001a1e <writeLed+0x32>
 8001a50:	f601 0396 	addw	r3, r1, #2198	; 0x896
 8001a54:	f601 02fa 	addw	r2, r1, #2298	; 0x8fa
				temp[i * 8 + j+20] = 0b1111100000000000;
		}
	}

for(k=COLOR_COUNT*8+20 ; k<COLOR_COUNT*8 +res+20; k++){
	temp[k]=0b0000000000000000;
 8001a58:	2000      	movs	r0, #0
			} else
				temp[i * 8 + j+20] = 0b1111100000000000;
		}
	}

for(k=COLOR_COUNT*8+20 ; k<COLOR_COUNT*8 +res+20; k++){
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d002      	beq.n	8001a64 <writeLed+0x78>
	temp[k]=0b0000000000000000;
 8001a5e:	f823 0f02 	strh.w	r0, [r3, #2]!
 8001a62:	e7fa      	b.n	8001a5a <writeLed+0x6e>
}

	HAL_SPI_Transmit_DMA(&hspi2,temp,COLOR_COUNT*8+res+20);
 8001a64:	f240 427e 	movw	r2, #1150	; 0x47e
 8001a68:	4803      	ldr	r0, [pc, #12]	; (8001a78 <writeLed+0x8c>)
 8001a6a:	f7ff fdc1 	bl	80015f0 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(&hspi2,temp,COLOR_COUNT*8+res,COLOR_COUNT*8*1000000);


}
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a74:	2000001f 	.word	0x2000001f
 8001a78:	200000e0 	.word	0x200000e0

08001a7c <setColor>:

}


void setColor(uint8_t g, uint8_t r, uint8_t b)
{
 8001a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a7e:	4d0c      	ldr	r5, [pc, #48]	; (8001ab0 <setColor+0x34>)
 8001a80:	2600      	movs	r6, #0
	uint8_t t;
	  for(t = 0; t < COLOR_COUNT; t++)
	  {
		  if(t%3 == 0)
 8001a82:	2703      	movs	r7, #3
 8001a84:	b2f4      	uxtb	r4, r6
 8001a86:	fbb4 f3f7 	udiv	r3, r4, r7
 8001a8a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001a8e:	1ae3      	subs	r3, r4, r3
 8001a90:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8001a94:	d101      	bne.n	8001a9a <setColor+0x1e>
		  {
			  colors[t] = g;
 8001a96:	7028      	strb	r0, [r5, #0]
 8001a98:	e003      	b.n	8001aa2 <setColor+0x26>
		  }
		  if(t%3 == 1)
 8001a9a:	2b01      	cmp	r3, #1
		  {
			  colors[t] = r;
 8001a9c:	bf0c      	ite	eq
 8001a9e:	7029      	strbeq	r1, [r5, #0]
		  }
		  if(t%3 == 2)
		  {
			  colors[t] = b;
 8001aa0:	702a      	strbne	r2, [r5, #0]
 8001aa2:	3601      	adds	r6, #1


void setColor(uint8_t g, uint8_t r, uint8_t b)
{
	uint8_t t;
	  for(t = 0; t < COLOR_COUNT; t++)
 8001aa4:	2e87      	cmp	r6, #135	; 0x87
 8001aa6:	f105 0501 	add.w	r5, r5, #1
 8001aaa:	d1eb      	bne.n	8001a84 <setColor+0x8>
		  {
			  colors[t] = b;
		  }
	  }

}
 8001aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000020 	.word	0x20000020

08001ab4 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001ab4:	b530      	push	{r4, r5, lr}
 8001ab6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab8:	2200      	movs	r2, #0
 8001aba:	4b27      	ldr	r3, [pc, #156]	; (8001b58 <SystemClock_Config+0xa4>)
 8001abc:	9200      	str	r2, [sp, #0]
 8001abe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001ac0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001ac4:	6419      	str	r1, [r3, #64]	; 0x40
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ac8:	4924      	ldr	r1, [pc, #144]	; (8001b5c <SystemClock_Config+0xa8>)
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ad2:	9201      	str	r2, [sp, #4]
 8001ad4:	680b      	ldr	r3, [r1, #0]
 8001ad6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ada:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ade:	600b      	str	r3, [r1, #0]
 8001ae0:	680b      	ldr	r3, [r1, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ae2:	920e      	str	r2, [sp, #56]	; 0x38

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ae4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ae8:	9301      	str	r3, [sp, #4]
 8001aea:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001aec:	2310      	movs	r3, #16
 8001aee:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001af0:	2308      	movs	r3, #8

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001af2:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001af4:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001af6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 51;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001af8:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 51;
 8001afa:	2333      	movs	r3, #51	; 0x33

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001afc:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001afe:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b00:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 51;
 8001b02:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b04:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b06:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b08:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b0a:	f7ff fac9 	bl	80010a0 <HAL_RCC_OscConfig>
 8001b0e:	b100      	cbz	r0, 8001b12 <SystemClock_Config+0x5e>
 8001b10:	e7fe      	b.n	8001b10 <SystemClock_Config+0x5c>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b12:	230f      	movs	r3, #15
 8001b14:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b16:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b1c:	9006      	str	r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b1e:	4629      	mov	r1, r5
 8001b20:	a802      	add	r0, sp, #8

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b22:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b24:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b26:	f7ff f9d1 	bl	8000ecc <HAL_RCC_ClockConfig>
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	b100      	cbz	r0, 8001b30 <SystemClock_Config+0x7c>
 8001b2e:	e7fe      	b.n	8001b2e <SystemClock_Config+0x7a>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001b30:	f7ff fa80 	bl	8001034 <HAL_RCC_GetHCLKFreq>
 8001b34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b38:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b3c:	f7fe fec8 	bl	80008d0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001b40:	2004      	movs	r0, #4
 8001b42:	f7fe fedb 	bl	80008fc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001b46:	4622      	mov	r2, r4
 8001b48:	4621      	mov	r1, r4
 8001b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4e:	f7fe fe7f 	bl	8000850 <HAL_NVIC_SetPriority>
}
 8001b52:	b015      	add	sp, #84	; 0x54
 8001b54:	bd30      	pop	{r4, r5, pc}
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40007000 	.word	0x40007000

08001b60 <main>:
}

/* USER CODE END 0 */

int main(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08c      	sub	sp, #48	; 0x30
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b64:	2400      	movs	r4, #0
 8001b66:	4d6f      	ldr	r5, [pc, #444]	; (8001d24 <main+0x1c4>)
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b68:	f7fe fb60 	bl	800022c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001b6c:	f7ff ffa2 	bl	8001ab4 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b70:	9403      	str	r4, [sp, #12]
 8001b72:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b74:	486c      	ldr	r0, [pc, #432]	; (8001d28 <main+0x1c8>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b76:	f043 0304 	orr.w	r3, r3, #4
 8001b7a:	632b      	str	r3, [r5, #48]	; 0x30
 8001b7c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	9303      	str	r3, [sp, #12]
 8001b84:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b86:	9404      	str	r4, [sp, #16]
 8001b88:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b8e:	632b      	str	r3, [r5, #48]	; 0x30
 8001b90:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b96:	9304      	str	r3, [sp, #16]
 8001b98:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	9405      	str	r4, [sp, #20]
 8001b9c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	632b      	str	r3, [r5, #48]	; 0x30
 8001ba4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	9305      	str	r3, [sp, #20]
 8001bac:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bae:	9406      	str	r4, [sp, #24]
 8001bb0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001bb2:	f043 0302 	orr.w	r3, r3, #2
 8001bb6:	632b      	str	r3, [r5, #48]	; 0x30
 8001bb8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001bba:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bbe:	4622      	mov	r2, r4

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc0:	9306      	str	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bc2:	2120      	movs	r1, #32

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc4:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bc6:	f7ff f979 	bl	8000ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bce:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bd0:	a907      	add	r1, sp, #28
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bd2:	4b56      	ldr	r3, [pc, #344]	; (8001d2c <main+0x1cc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bd4:	4856      	ldr	r0, [pc, #344]	; (8001d30 <main+0x1d0>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bd6:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bda:	f7ff f895 	bl	8000d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bde:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be4:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be6:	a907      	add	r1, sp, #28
  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001be8:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bea:	484f      	ldr	r0, [pc, #316]	; (8001d28 <main+0x1c8>)
  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bec:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bee:	270c      	movs	r7, #12
 8001bf0:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf8:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfa:	f7ff f885 	bl	8000d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001bfe:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c00:	a907      	add	r1, sp, #28
 8001c02:	4849      	ldr	r0, [pc, #292]	; (8001d28 <main+0x1c8>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c04:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c06:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c0c:	f7ff f87c 	bl	8000d08 <HAL_GPIO_Init>
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c10:	9401      	str	r4, [sp, #4]
 8001c12:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001c14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c18:	632b      	str	r3, [r5, #48]	; 0x30
 8001c1a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001c1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c20:	9301      	str	r3, [sp, #4]
 8001c22:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c24:	9402      	str	r4, [sp, #8]
 8001c26:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001c28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c2c:	632b      	str	r3, [r5, #48]	; 0x30
 8001c2e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001c34:	4622      	mov	r2, r4
 8001c36:	4621      	mov	r1, r4
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c38:	9302      	str	r3, [sp, #8]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001c3a:	200f      	movs	r0, #15
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c3c:	9b02      	ldr	r3, [sp, #8]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001c3e:	f7fe fe07 	bl	8000850 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001c42:	200f      	movs	r0, #15
 8001c44:	f7fe fe38 	bl	80008b8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001c48:	4622      	mov	r2, r4
 8001c4a:	4621      	mov	r1, r4
 8001c4c:	2038      	movs	r0, #56	; 0x38
 8001c4e:	f7fe fdff 	bl	8000850 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c52:	2038      	movs	r0, #56	; 0x38
 8001c54:	f7fe fe30 	bl	80008b8 <HAL_NVIC_EnableIRQ>

/* SPI2 init function */
static void MX_SPI2_Init(void)
{

  hspi2.Instance = SPI2;
 8001c58:	4836      	ldr	r0, [pc, #216]	; (8001d34 <main+0x1d4>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c5a:	4b37      	ldr	r3, [pc, #220]	; (8001d38 <main+0x1d8>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c5c:	6084      	str	r4, [r0, #8]
/* SPI2 init function */
static void MX_SPI2_Init(void)
{

  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c5e:	f44f 7582 	mov.w	r5, #260	; 0x104
 8001c62:	e880 0028 	stmia.w	r0, {r3, r5}
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001c66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c6a:	60c3      	str	r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 10;
 8001c6c:	250a      	movs	r5, #10
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c6e:	f44f 7300 	mov.w	r3, #512	; 0x200

  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001c72:	f8c0 8010 	str.w	r8, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c76:	6144      	str	r4, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c78:	6183      	str	r3, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c7a:	61c4      	str	r4, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c7c:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c7e:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c80:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001c82:	62c5      	str	r5, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c84:	f7ff fc77 	bl	8001576 <HAL_SPI_Init>
 8001c88:	b100      	cbz	r0, 8001c8c <main+0x12c>
 8001c8a:	e7fe      	b.n	8001c8a <main+0x12a>

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8001c8c:	4c2b      	ldr	r4, [pc, #172]	; (8001d3c <main+0x1dc>)
 8001c8e:	4b2c      	ldr	r3, [pc, #176]	; (8001d40 <main+0x1e0>)
 8001c90:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001c92:	6060      	str	r0, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c94:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c96:	6220      	str	r0, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c98:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c9a:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <main+0x1e4>)
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c9c:	60e0      	str	r0, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c9e:	4620      	mov	r0, r4
    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
 8001ca0:	6126      	str	r6, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ca2:	61a6      	str	r6, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ca4:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8001ca6:	61e6      	str	r6, [r4, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ca8:	6326      	str	r6, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001caa:	6166      	str	r6, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cac:	f7fe faf4 	bl	8000298 <HAL_ADC_Init>
 8001cb0:	b100      	cbz	r0, 8001cb4 <main+0x154>
 8001cb2:	e7fe      	b.n	8001cb2 <main+0x152>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_10;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cb4:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cb6:	a907      	add	r1, sp, #28
 8001cb8:	4620      	mov	r0, r4
    Error_Handler();
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_10;
 8001cba:	9507      	str	r5, [sp, #28]
  sConfig.Rank = 1;
 8001cbc:	9608      	str	r6, [sp, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cbe:	f7fe fd19 	bl	80006f4 <HAL_ADC_ConfigChannel>
 8001cc2:	b100      	cbz	r0, 8001cc6 <main+0x166>
 8001cc4:	e7fe      	b.n	8001cc4 <main+0x164>

/* UART4 init function */
static void MX_UART4_Init(void)
{

  huart4.Instance = UART4;
 8001cc6:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <main+0x1e8>)
  huart4.Init.BaudRate = 250000;
 8001cc8:	4920      	ldr	r1, [pc, #128]	; (8001d4c <main+0x1ec>)
 8001cca:	4a21      	ldr	r2, [pc, #132]	; (8001d50 <main+0x1f0>)
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ccc:	6098      	str	r0, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001cce:	60d8      	str	r0, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001cd0:	6118      	str	r0, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd2:	6198      	str	r0, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd4:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001cd6:	4618      	mov	r0, r3
/* UART4 init function */
static void MX_UART4_Init(void)
{

  huart4.Instance = UART4;
  huart4.Init.BaudRate = 250000;
 8001cd8:	e883 0006 	stmia.w	r3, {r1, r2}
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001cdc:	615f      	str	r7, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001cde:	f7ff fe45 	bl	800196c <HAL_UART_Init>
 8001ce2:	4605      	mov	r5, r0
 8001ce4:	b100      	cbz	r0, 8001ce8 <main+0x188>
 8001ce6:	e7fe      	b.n	8001ce6 <main+0x186>
  MX_SPI2_Init();
  MX_ADC1_Init();
  MX_UART4_Init();

  /* USER CODE BEGIN 2 */
  HAL_DMA_RegisterCallback(&hdma_spi2_tx,HAL_DMA_XFER_CPLT_CB_ID, spidmacallback);
 8001ce8:	4601      	mov	r1, r0
 8001cea:	4a1a      	ldr	r2, [pc, #104]	; (8001d54 <main+0x1f4>)
 8001cec:	481a      	ldr	r0, [pc, #104]	; (8001d58 <main+0x1f8>)
 8001cee:	f7fe ffe5 	bl	8000cbc <HAL_DMA_RegisterCallback>
 	  HAL_ADC_Start_DMA(&hadc1, adcValue, 256);
 8001cf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cf6:	4919      	ldr	r1, [pc, #100]	; (8001d5c <main+0x1fc>)
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	f7fe fb77 	bl	80003ec <HAL_ADC_Start_DMA>

  	  setColor(0,0,0);
 8001cfe:	462a      	mov	r2, r5
 8001d00:	4629      	mov	r1, r5
 8001d02:	4628      	mov	r0, r5
 8001d04:	f7ff feba 	bl	8001a7c <setColor>
	while (1) {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

		HAL_Delay(100);
 8001d08:	2064      	movs	r0, #100	; 0x64
 8001d0a:	f7fe fab7 	bl	800027c <HAL_Delay>


		setColor(0,0,64);
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4608      	mov	r0, r1
 8001d12:	2240      	movs	r2, #64	; 0x40
 8001d14:	f7ff feb2 	bl	8001a7c <setColor>
		//__disable_irq();

		HAL_ADC_Stop_DMA(&hadc1);
 8001d18:	4808      	ldr	r0, [pc, #32]	; (8001d3c <main+0x1dc>)
 8001d1a:	f7fe fbe7 	bl	80004ec <HAL_ADC_Stop_DMA>

		writeLed();
 8001d1e:	f7ff fe65 	bl	80019ec <writeLed>
 8001d22:	e7f1      	b.n	8001d08 <main+0x1a8>
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	10210000 	.word	0x10210000
 8001d30:	40020800 	.word	0x40020800
 8001d34:	200000e0 	.word	0x200000e0
 8001d38:	40003800 	.word	0x40003800
 8001d3c:	20000138 	.word	0x20000138
 8001d40:	40012000 	.word	0x40012000
 8001d44:	0f000001 	.word	0x0f000001
 8001d48:	200001e8 	.word	0x200001e8
 8001d4c:	40004c00 	.word	0x40004c00
 8001d50:	0003d090 	.word	0x0003d090
 8001d54:	080019c9 	.word	0x080019c9
 8001d58:	20000228 	.word	0x20000228
 8001d5c:	20000288 	.word	0x20000288

08001d60 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8001d60:	e7fe      	b.n	8001d60 <Error_Handler>

08001d62 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d62:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d64:	2007      	movs	r0, #7
 8001d66:	f7fe fd61 	bl	800082c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	f06f 000b 	mvn.w	r0, #11
 8001d72:	f7fe fd6d 	bl	8000850 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	4611      	mov	r1, r2
 8001d7a:	f06f 000a 	mvn.w	r0, #10
 8001d7e:	f7fe fd67 	bl	8000850 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001d82:	2200      	movs	r2, #0
 8001d84:	4611      	mov	r1, r2
 8001d86:	f06f 0009 	mvn.w	r0, #9
 8001d8a:	f7fe fd61 	bl	8000850 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	4611      	mov	r1, r2
 8001d92:	f06f 0004 	mvn.w	r0, #4
 8001d96:	f7fe fd5b 	bl	8000850 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	f06f 0003 	mvn.w	r0, #3
 8001da2:	f7fe fd55 	bl	8000850 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	4611      	mov	r1, r2
 8001daa:	f06f 0001 	mvn.w	r0, #1
 8001dae:	f7fe fd4f 	bl	8000850 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001db2:	2200      	movs	r2, #0
 8001db4:	4611      	mov	r1, r2
 8001db6:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001dbe:	f7fe bd47 	b.w	8000850 <HAL_NVIC_SetPriority>
	...

08001dc4 <HAL_ADC_MspInit>:

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dc4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8001dc6:	6802      	ldr	r2, [r0, #0]
 8001dc8:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <HAL_ADC_MspInit+0x88>)
 8001dca:	429a      	cmp	r2, r3

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dcc:	b086      	sub	sp, #24
 8001dce:	4606      	mov	r6, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8001dd0:	d139      	bne.n	8001e46 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dd2:	2500      	movs	r5, #0
 8001dd4:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001dd8:	9500      	str	r5, [sp, #0]
 8001dda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PC0     ------> ADC1_IN10 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ddc:	481c      	ldr	r0, [pc, #112]	; (8001e50 <HAL_ADC_MspInit+0x8c>)

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA2_Stream0;
 8001dde:	4c1d      	ldr	r4, [pc, #116]	; (8001e54 <HAL_ADC_MspInit+0x90>)
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001de0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001de4:	645a      	str	r2, [r3, #68]	; 0x44
 8001de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	9503      	str	r5, [sp, #12]
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	9b00      	ldr	r3, [sp, #0]
  
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001df2:	2301      	movs	r3, #1
 8001df4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df6:	a901      	add	r1, sp, #4
  
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dfc:	f7fe ff84 	bl	8000d08 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA2_Stream0;
 8001e00:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <HAL_ADC_MspInit+0x94>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e02:	60a5      	str	r5, [r4, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA2_Stream0;
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e04:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e0c:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e12:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e18:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e1a:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e1c:	f44f 7380 	mov.w	r3, #256	; 0x100
    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA2_Stream0;
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e20:	60e5      	str	r5, [r4, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e22:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e24:	6225      	str	r5, [r4, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e26:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e28:	f7fe fd90 	bl	800094c <HAL_DMA_Init>
 8001e2c:	b108      	cbz	r0, 8001e32 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001e2e:	f7ff ff97 	bl	8001d60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e34:	63b4      	str	r4, [r6, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001e36:	2012      	movs	r0, #18
 8001e38:	4611      	mov	r1, r2
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e3a:	63a6      	str	r6, [r4, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001e3c:	f7fe fd08 	bl	8000850 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001e40:	2012      	movs	r0, #18
 8001e42:	f7fe fd39 	bl	80008b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e46:	b006      	add	sp, #24
 8001e48:	bd70      	pop	{r4, r5, r6, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40012000 	.word	0x40012000
 8001e50:	40020800 	.word	0x40020800
 8001e54:	20000184 	.word	0x20000184
 8001e58:	40026410 	.word	0x40026410

08001e5c <HAL_SPI_MspInit>:
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI2)
 8001e60:	6802      	ldr	r2, [r0, #0]
 8001e62:	4b24      	ldr	r3, [pc, #144]	; (8001ef4 <HAL_SPI_MspInit+0x98>)
 8001e64:	429a      	cmp	r2, r3
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e66:	b086      	sub	sp, #24
 8001e68:	4606      	mov	r6, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI2)
 8001e6a:	d140      	bne.n	8001eee <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e6c:	2500      	movs	r5, #0
 8001e6e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001e72:	9500      	str	r5, [sp, #0]
 8001e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e76:	4820      	ldr	r0, [pc, #128]	; (8001ef8 <HAL_SPI_MspInit+0x9c>)
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	9503      	str	r5, [sp, #12]
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e86:	9300      	str	r3, [sp, #0]
  
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e88:	2402      	movs	r4, #2
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e8a:	9b00      	ldr	r3, [sp, #0]
  
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e8c:	9401      	str	r4, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001e8e:	2307      	movs	r3, #7
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e90:	f04f 0803 	mov.w	r8, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e94:	a901      	add	r1, sp, #4
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001e98:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e9a:	f44f 6780 	mov.w	r7, #1024	; 0x400
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9e:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea2:	f7fe ff31 	bl	8000d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ea6:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea8:	4814      	ldr	r0, [pc, #80]	; (8001efc <HAL_SPI_MspInit+0xa0>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eac:	a901      	add	r1, sp, #4

    /* Peripheral DMA init*/
  
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001eae:	4c14      	ldr	r4, [pc, #80]	; (8001f00 <HAL_SPI_MspInit+0xa4>)

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001eb0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001eb2:	9701      	str	r7, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb6:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eba:	f7fe ff25 	bl	8000d08 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001ebe:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <HAL_SPI_MspInit+0xa8>)
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ec0:	60e5      	str	r5, [r4, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_spi2_tx.Instance = DMA1_Stream4;
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001ec2:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ec6:	2340      	movs	r3, #64	; 0x40
 8001ec8:	60a3      	str	r3, [r4, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001eca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ece:	6163      	str	r3, [r4, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001ed0:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ed2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  
    hdma_spi2_tx.Instance = DMA1_Stream4;
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ed6:	6127      	str	r7, [r4, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ed8:	61a3      	str	r3, [r4, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001eda:	61e5      	str	r5, [r4, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001edc:	6225      	str	r5, [r4, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ede:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001ee0:	f7fe fd34 	bl	800094c <HAL_DMA_Init>
 8001ee4:	b108      	cbz	r0, 8001eea <HAL_SPI_MspInit+0x8e>
    {
      Error_Handler();
 8001ee6:	f7ff ff3b 	bl	8001d60 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001eea:	64b4      	str	r4, [r6, #72]	; 0x48
 8001eec:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001eee:	b006      	add	sp, #24
 8001ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ef4:	40003800 	.word	0x40003800
 8001ef8:	40020800 	.word	0x40020800
 8001efc:	40020400 	.word	0x40020400
 8001f00:	20000228 	.word	0x20000228
 8001f04:	40026070 	.word	0x40026070

08001f08 <HAL_UART_MspInit>:
  /* USER CODE END SPI2_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART4)
 8001f0a:	6802      	ldr	r2, [r0, #0]
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <HAL_UART_MspInit+0x44>)
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d118      	bne.n	8001f44 <HAL_UART_MspInit+0x3c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <HAL_UART_MspInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f18:	480e      	ldr	r0, [pc, #56]	; (8001f54 <HAL_UART_MspInit+0x4c>)
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f1c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001f20:	641a      	str	r2, [r3, #64]	; 0x40
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f28:	9300      	str	r3, [sp, #0]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2a:	2202      	movs	r2, #2
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f2c:	9b00      	ldr	r3, [sp, #0]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2e:	9202      	str	r2, [sp, #8]
  
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f30:	2303      	movs	r3, #3
 8001f32:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f34:	2201      	movs	r2, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f36:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f38:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f3a:	2308      	movs	r3, #8
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f3c:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f3e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f40:	f7fe fee2 	bl	8000d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001f44:	b007      	add	sp, #28
 8001f46:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f4a:	bf00      	nop
 8001f4c:	40004c00 	.word	0x40004c00
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40020000 	.word	0x40020000

08001f58 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001f58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f5a:	f7fe f981 	bl	8000260 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8001f62:	f7fe bcd8 	b.w	8000916 <HAL_SYSTICK_IRQHandler>
	...

08001f68 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001f68:	4801      	ldr	r0, [pc, #4]	; (8001f70 <DMA1_Stream4_IRQHandler+0x8>)
 8001f6a:	f7fe bde9 	b.w	8000b40 <HAL_DMA_IRQHandler>
 8001f6e:	bf00      	nop
 8001f70:	20000228 	.word	0x20000228

08001f74 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f74:	4801      	ldr	r0, [pc, #4]	; (8001f7c <ADC_IRQHandler+0x8>)
 8001f76:	f7fe bb1d 	b.w	80005b4 <HAL_ADC_IRQHandler>
 8001f7a:	bf00      	nop
 8001f7c:	20000138 	.word	0x20000138

08001f80 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f80:	4801      	ldr	r0, [pc, #4]	; (8001f88 <DMA2_Stream0_IRQHandler+0x8>)
 8001f82:	f7fe bddd 	b.w	8000b40 <HAL_DMA_IRQHandler>
 8001f86:	bf00      	nop
 8001f88:	20000184 	.word	0x20000184

08001f8c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f8c:	490f      	ldr	r1, [pc, #60]	; (8001fcc <SystemInit+0x40>)
 8001f8e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001f92:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <SystemInit+0x44>)
 8001f9c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f9e:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001fa0:	f042 0201 	orr.w	r2, r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001fa6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001fae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fb2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001fb4:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <SystemInit+0x48>)
 8001fb6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fbe:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001fc0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001fc6:	608b      	str	r3, [r1, #8]
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000ed00 	.word	0xe000ed00
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	24003010 	.word	0x24003010

08001fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002010 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001fdc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001fde:	e003      	b.n	8001fe8 <LoopCopyDataInit>

08001fe0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001fe2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001fe4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001fe6:	3104      	adds	r1, #4

08001fe8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fe8:	480b      	ldr	r0, [pc, #44]	; (8002018 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001fea:	4b0c      	ldr	r3, [pc, #48]	; (800201c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001fec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001fee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ff0:	d3f6      	bcc.n	8001fe0 <CopyDataInit>
  ldr  r2, =_sbss
 8001ff2:	4a0b      	ldr	r2, [pc, #44]	; (8002020 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ff4:	e002      	b.n	8001ffc <LoopFillZerobss>

08001ff6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ff6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ff8:	f842 3b04 	str.w	r3, [r2], #4

08001ffc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ffc:	4b09      	ldr	r3, [pc, #36]	; (8002024 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ffe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002000:	d3f9      	bcc.n	8001ff6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002002:	f7ff ffc3 	bl	8001f8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002006:	f000 f811 	bl	800202c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800200a:	f7ff fda9 	bl	8001b60 <main>
  bx  lr    
 800200e:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002010:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8002014:	080020b0 	.word	0x080020b0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002018:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800201c:	20000004 	.word	0x20000004
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8002020:	20000004 	.word	0x20000004
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002024:	20000488 	.word	0x20000488

08002028 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002028:	e7fe      	b.n	8002028 <BusFault_Handler>
	...

0800202c <__libc_init_array>:
 800202c:	b570      	push	{r4, r5, r6, lr}
 800202e:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <__libc_init_array+0x3c>)
 8002030:	4c0e      	ldr	r4, [pc, #56]	; (800206c <__libc_init_array+0x40>)
 8002032:	1ae4      	subs	r4, r4, r3
 8002034:	10a4      	asrs	r4, r4, #2
 8002036:	2500      	movs	r5, #0
 8002038:	461e      	mov	r6, r3
 800203a:	42a5      	cmp	r5, r4
 800203c:	d004      	beq.n	8002048 <__libc_init_array+0x1c>
 800203e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002042:	4798      	blx	r3
 8002044:	3501      	adds	r5, #1
 8002046:	e7f8      	b.n	800203a <__libc_init_array+0xe>
 8002048:	f000 f816 	bl	8002078 <_init>
 800204c:	4c08      	ldr	r4, [pc, #32]	; (8002070 <__libc_init_array+0x44>)
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <__libc_init_array+0x48>)
 8002050:	1ae4      	subs	r4, r4, r3
 8002052:	10a4      	asrs	r4, r4, #2
 8002054:	2500      	movs	r5, #0
 8002056:	461e      	mov	r6, r3
 8002058:	42a5      	cmp	r5, r4
 800205a:	d004      	beq.n	8002066 <__libc_init_array+0x3a>
 800205c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002060:	4798      	blx	r3
 8002062:	3501      	adds	r5, #1
 8002064:	e7f8      	b.n	8002058 <__libc_init_array+0x2c>
 8002066:	bd70      	pop	{r4, r5, r6, pc}
 8002068:	080020a8 	.word	0x080020a8
 800206c:	080020a8 	.word	0x080020a8
 8002070:	080020ac 	.word	0x080020ac
 8002074:	080020a8 	.word	0x080020a8

08002078 <_init>:
 8002078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800207a:	bf00      	nop
 800207c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800207e:	bc08      	pop	{r3}
 8002080:	469e      	mov	lr, r3
 8002082:	4770      	bx	lr

08002084 <_fini>:
 8002084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002086:	bf00      	nop
 8002088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800208a:	bc08      	pop	{r3}
 800208c:	469e      	mov	lr, r3
 800208e:	4770      	bx	lr
