
WSLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bb0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001d74  08001d74  00011d74  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001d8c  08001d8c  00011d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001d90  08001d90  00011d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000009f0  20000004  08001d98  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200009f4  08001d98  000209f4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b732  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001ffa  00000000  00000000  0002b766  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000574a  00000000  00000000  0002d760  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000798  00000000  00000000  00032eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000cb8  00000000  00000000  00033648  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004623  00000000  00000000  00034300  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002c16  00000000  00000000  00038923  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0003b539  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000014b8  00000000  00000000  0003b5b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001d5c 	.word	0x08001d5c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08001d5c 	.word	0x08001d5c

08000204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000204:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000206:	4b08      	ldr	r3, [pc, #32]	; (8000228 <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000208:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800020a:	6818      	ldr	r0, [r3, #0]
 800020c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000210:	fbb0 f0f3 	udiv	r0, r0, r3
 8000214:	f000 fa9a 	bl	800074c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000218:	2200      	movs	r2, #0
 800021a:	4621      	mov	r1, r4
 800021c:	f04f 30ff 	mov.w	r0, #4294967295
 8000220:	f000 fa54 	bl	80006cc <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000224:	2000      	movs	r0, #0
 8000226:	bd10      	pop	{r4, pc}
 8000228:	20000000 	.word	0x20000000

0800022c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800022c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800022e:	4b0b      	ldr	r3, [pc, #44]	; (800025c <HAL_Init+0x30>)
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000236:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000238:	681a      	ldr	r2, [r3, #0]
 800023a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800023e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000246:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000248:	2003      	movs	r0, #3
 800024a:	f000 fa2d 	bl	80006a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800024e:	2000      	movs	r0, #0
 8000250:	f7ff ffd8 	bl	8000204 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000254:	f001 fc2d 	bl	8001ab2 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000258:	2000      	movs	r0, #0
 800025a:	bd08      	pop	{r3, pc}
 800025c:	40023c00 	.word	0x40023c00

08000260 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000260:	4a02      	ldr	r2, [pc, #8]	; (800026c <HAL_IncTick+0xc>)
 8000262:	6813      	ldr	r3, [r2, #0]
 8000264:	3301      	adds	r3, #1
 8000266:	6013      	str	r3, [r2, #0]
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	20000074 	.word	0x20000074

08000270 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000270:	4b01      	ldr	r3, [pc, #4]	; (8000278 <HAL_GetTick+0x8>)
 8000272:	6818      	ldr	r0, [r3, #0]
}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	20000074 	.word	0x20000074

0800027c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800027c:	b513      	push	{r0, r1, r4, lr}
 800027e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 8000280:	f7ff fff6 	bl	8000270 <HAL_GetTick>
 8000284:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000286:	f7ff fff3 	bl	8000270 <HAL_GetTick>
 800028a:	9b01      	ldr	r3, [sp, #4]
 800028c:	1b00      	subs	r0, r0, r4
 800028e:	4298      	cmp	r0, r3
 8000290:	d3f9      	bcc.n	8000286 <HAL_Delay+0xa>
  {
  }
}
 8000292:	b002      	add	sp, #8
 8000294:	bd10      	pop	{r4, pc}
	...

08000298 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000298:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800029a:	4604      	mov	r4, r0
 800029c:	2800      	cmp	r0, #0
 800029e:	f000 809e 	beq.w	80003de <HAL_ADC_Init+0x146>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80002a2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80002a4:	b923      	cbnz	r3, 80002b0 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80002a6:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80002a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002ac:	f001 fc32 	bl	8001b14 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80002b2:	06db      	lsls	r3, r3, #27
 80002b4:	f100 808e 	bmi.w	80003d4 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80002b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80002ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80002be:	f023 0302 	bic.w	r3, r3, #2
 80002c2:	f043 0302 	orr.w	r3, r3, #2
 80002c6:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80002c8:	4b46      	ldr	r3, [pc, #280]	; (80003e4 <HAL_ADC_Init+0x14c>)
 80002ca:	685a      	ldr	r2, [r3, #4]
 80002cc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80002d0:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80002d2:	6859      	ldr	r1, [r3, #4]
 80002d4:	6862      	ldr	r2, [r4, #4]
 80002d6:	430a      	orrs	r2, r1
 80002d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80002da:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80002dc:	6921      	ldr	r1, [r4, #16]
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80002de:	685a      	ldr	r2, [r3, #4]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80002e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80002e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80002e6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80002e8:	685a      	ldr	r2, [r3, #4]
 80002ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80002ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80002f0:	685a      	ldr	r2, [r3, #4]
 80002f2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80002f6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80002f8:	6859      	ldr	r1, [r3, #4]
 80002fa:	68a2      	ldr	r2, [r4, #8]
 80002fc:	430a      	orrs	r2, r1
 80002fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000300:	689a      	ldr	r2, [r3, #8]
 8000302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000306:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000308:	6899      	ldr	r1, [r3, #8]
 800030a:	68e2      	ldr	r2, [r4, #12]
 800030c:	430a      	orrs	r2, r1
 800030e:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000310:	4a35      	ldr	r2, [pc, #212]	; (80003e8 <HAL_ADC_Init+0x150>)
 8000312:	4290      	cmp	r0, r2
 8000314:	d00e      	beq.n	8000334 <HAL_ADC_Init+0x9c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000316:	6899      	ldr	r1, [r3, #8]
 8000318:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800031c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800031e:	689a      	ldr	r2, [r3, #8]
 8000320:	4302      	orrs	r2, r0
 8000322:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000324:	689a      	ldr	r2, [r3, #8]
 8000326:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800032a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800032c:	6899      	ldr	r1, [r3, #8]
 800032e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000330:	430a      	orrs	r2, r1
 8000332:	e006      	b.n	8000342 <HAL_ADC_Init+0xaa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000334:	689a      	ldr	r2, [r3, #8]
 8000336:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800033a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800033c:	689a      	ldr	r2, [r3, #8]
 800033e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000342:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000344:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000346:	69a1      	ldr	r1, [r4, #24]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000348:	f022 0202 	bic.w	r2, r2, #2
 800034c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800034e:	689a      	ldr	r2, [r3, #8]
 8000350:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000354:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000356:	6a22      	ldr	r2, [r4, #32]
 8000358:	b19a      	cbz	r2, 8000382 <HAL_ADC_Init+0xea>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800035a:	685a      	ldr	r2, [r3, #4]
 800035c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000360:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000362:	685a      	ldr	r2, [r3, #4]
 8000364:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000368:	605a      	str	r2, [r3, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800036a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800036e:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000372:	fab2 f182 	clz	r1, r2
 8000376:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000378:	6858      	ldr	r0, [r3, #4]
 800037a:	3a01      	subs	r2, #1
 800037c:	408a      	lsls	r2, r1
 800037e:	4302      	orrs	r2, r0
 8000380:	e002      	b.n	8000388 <HAL_ADC_Init+0xf0>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000382:	685a      	ldr	r2, [r3, #4]
 8000384:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000388:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800038a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800038c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000390:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000392:	69e2      	ldr	r2, [r4, #28]
 8000394:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000396:	3a01      	subs	r2, #1
 8000398:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 800039c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800039e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80003a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80003a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80003a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80003a8:	689a      	ldr	r2, [r3, #8]
 80003aa:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80003ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80003b0:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80003b2:	6961      	ldr	r1, [r4, #20]
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80003b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80003b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80003ba:	689a      	ldr	r2, [r3, #8]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80003bc:	2000      	movs	r0, #0
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80003be:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80003c2:	609a      	str	r2, [r3, #8]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80003c4:	6460      	str	r0, [r4, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80003c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80003c8:	f023 0303 	bic.w	r3, r3, #3
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	6423      	str	r3, [r4, #64]	; 0x40
 80003d2:	e000      	b.n	80003d6 <HAL_ADC_Init+0x13e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80003d4:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80003d6:	2300      	movs	r3, #0
 80003d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80003dc:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80003de:	2001      	movs	r0, #1
  /* Release Lock */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80003e0:	bd10      	pop	{r4, pc}
 80003e2:	bf00      	nop
 80003e4:	40012300 	.word	0x40012300
 80003e8:	0f000001 	.word	0x0f000001

080003ec <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80003ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80003ee:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 80003f0:	2200      	movs	r2, #0
 80003f2:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80003f4:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80003f8:	2a01      	cmp	r2, #1
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80003fa:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80003fc:	d064      	beq.n	80004c8 <HAL_ADC_Start_DMA+0xdc>
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80003fe:	6805      	ldr	r5, [r0, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000400:	2201      	movs	r2, #1
 8000402:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000406:	68aa      	ldr	r2, [r5, #8]
 8000408:	07d2      	lsls	r2, r2, #31
 800040a:	d503      	bpl.n	8000414 <HAL_ADC_Start_DMA+0x28>
      counter--;
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800040c:	68aa      	ldr	r2, [r5, #8]
 800040e:	07d0      	lsls	r0, r2, #31
 8000410:	d413      	bmi.n	800043a <HAL_ADC_Start_DMA+0x4e>
 8000412:	e04e      	b.n	80004b2 <HAL_ADC_Start_DMA+0xc6>
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000414:	68aa      	ldr	r2, [r5, #8]
 8000416:	f042 0201 	orr.w	r2, r2, #1
 800041a:	60aa      	str	r2, [r5, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800041c:	4a2c      	ldr	r2, [pc, #176]	; (80004d0 <HAL_ADC_Start_DMA+0xe4>)
 800041e:	6810      	ldr	r0, [r2, #0]
 8000420:	4a2c      	ldr	r2, [pc, #176]	; (80004d4 <HAL_ADC_Start_DMA+0xe8>)
 8000422:	fbb0 f0f2 	udiv	r0, r0, r2
 8000426:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800042a:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 800042c:	9a01      	ldr	r2, [sp, #4]
 800042e:	2a00      	cmp	r2, #0
 8000430:	d0ec      	beq.n	800040c <HAL_ADC_Start_DMA+0x20>
    {
      counter--;
 8000432:	9a01      	ldr	r2, [sp, #4]
 8000434:	3a01      	subs	r2, #1
 8000436:	9201      	str	r2, [sp, #4]
 8000438:	e7f8      	b.n	800042c <HAL_ADC_Start_DMA+0x40>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800043a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800043c:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000440:	f020 0001 	bic.w	r0, r0, #1
 8000444:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8000448:	6420      	str	r0, [r4, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800044a:	686a      	ldr	r2, [r5, #4]
 800044c:	0552      	lsls	r2, r2, #21
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800044e:	bf41      	itttt	mi
 8000450:	6c20      	ldrmi	r0, [r4, #64]	; 0x40
 8000452:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8000456:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 800045a:	6420      	strmi	r0, [r4, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800045c:	6c22      	ldr	r2, [r4, #64]	; 0x40
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800045e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000460:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000464:	bf1c      	itt	ne
 8000466:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 8000468:	f022 0206 	bicne.w	r2, r2, #6
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800046c:	6462      	str	r2, [r4, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800046e:	2200      	movs	r2, #0
 8000470:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000474:	4a18      	ldr	r2, [pc, #96]	; (80004d8 <HAL_ADC_Start_DMA+0xec>)
 8000476:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000478:	4a18      	ldr	r2, [pc, #96]	; (80004dc <HAL_ADC_Start_DMA+0xf0>)
 800047a:	6402      	str	r2, [r0, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800047c:	4a18      	ldr	r2, [pc, #96]	; (80004e0 <HAL_ADC_Start_DMA+0xf4>)
 800047e:	64c2      	str	r2, [r0, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000480:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000484:	602a      	str	r2, [r5, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000486:	686a      	ldr	r2, [r5, #4]
 8000488:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800048c:	606a      	str	r2, [r5, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800048e:	68aa      	ldr	r2, [r5, #8]
 8000490:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000494:	60aa      	str	r2, [r5, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000496:	460a      	mov	r2, r1
 8000498:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 800049c:	f000 fa0a 	bl	80008b4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80004a0:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <HAL_ADC_Start_DMA+0xf8>)
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	f013 0f1f 	tst.w	r3, #31
 80004a8:	6823      	ldr	r3, [r4, #0]
 80004aa:	d004      	beq.n	80004b6 <HAL_ADC_Start_DMA+0xca>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80004ac:	4a0e      	ldr	r2, [pc, #56]	; (80004e8 <HAL_ADC_Start_DMA+0xfc>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d001      	beq.n	80004b6 <HAL_ADC_Start_DMA+0xca>
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80004b2:	2000      	movs	r0, #0
 80004b4:	e009      	b.n	80004ca <HAL_ADC_Start_DMA+0xde>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80004b6:	6898      	ldr	r0, [r3, #8]
 80004b8:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80004bc:	d1f9      	bne.n	80004b2 <HAL_ADC_Start_DMA+0xc6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80004be:	689a      	ldr	r2, [r3, #8]
 80004c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	e000      	b.n	80004ca <HAL_ADC_Start_DMA+0xde>
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80004c8:	2002      	movs	r0, #2
    }
  }
  
  /* Return function status */
  return HAL_OK;
}
 80004ca:	b003      	add	sp, #12
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	bf00      	nop
 80004d0:	20000000 	.word	0x20000000
 80004d4:	000f4240 	.word	0x000f4240
 80004d8:	080004ef 	.word	0x080004ef
 80004dc:	08000551 	.word	0x08000551
 80004e0:	0800055d 	.word	0x0800055d
 80004e4:	40012300 	.word	0x40012300
 80004e8:	40012000 	.word	0x40012000

080004ec <HAL_ADC_ConvCpltCallback>:
 80004ec:	4770      	bx	lr

080004ee <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80004ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80004f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004f2:	f012 0f50 	tst.w	r2, #80	; 0x50
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80004f6:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80004f8:	d124      	bne.n	8000544 <ADC_DMAConvCplt+0x56>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80004fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000500:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	6891      	ldr	r1, [r2, #8]
 8000506:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 800050a:	d117      	bne.n	800053c <ADC_DMAConvCplt+0x4e>
 800050c:	6999      	ldr	r1, [r3, #24]
 800050e:	b9a9      	cbnz	r1, 800053c <ADC_DMAConvCplt+0x4e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000510:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000512:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8000516:	d002      	beq.n	800051e <ADC_DMAConvCplt+0x30>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000518:	6891      	ldr	r1, [r2, #8]
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800051a:	0549      	lsls	r1, r1, #21
 800051c:	d40e      	bmi.n	800053c <ADC_DMAConvCplt+0x4e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800051e:	6851      	ldr	r1, [r2, #4]
 8000520:	f021 0120 	bic.w	r1, r1, #32
 8000524:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000526:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000528:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800052c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800052e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000530:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000532:	bf5e      	ittt	pl
 8000534:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 8000536:	f042 0201 	orrpl.w	r2, r2, #1
 800053a:	641a      	strpl	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff ffd5 	bl	80004ec <HAL_ADC_ConvCpltCallback>
 8000542:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  }
}
 8000546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_ADC_ConvCpltCallback(hadc);
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800054a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054c:	4718      	bx	r3

0800054e <HAL_ADC_ConvHalfCpltCallback>:
 800054e:	4770      	bx	lr

08000550 <ADC_DMAHalfConvCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000550:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000552:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000554:	f7ff fffb 	bl	800054e <HAL_ADC_ConvHalfCpltCallback>
 8000558:	bd08      	pop	{r3, pc}

0800055a <HAL_ADC_ErrorCallback>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800055a:	4770      	bx	lr

0800055c <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800055c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800055e:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8000560:	2340      	movs	r3, #64	; 0x40
 8000562:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000564:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000566:	f043 0304 	orr.w	r3, r3, #4
 800056a:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 800056c:	f7ff fff5 	bl	800055a <HAL_ADC_ErrorCallback>
 8000570:	bd08      	pop	{r3, pc}
	...

08000574 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8000576:	2300      	movs	r3, #0
 8000578:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800057a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800057e:	2b01      	cmp	r3, #1
 8000580:	d069      	beq.n	8000656 <HAL_ADC_ConfigChannel+0xe2>
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000582:	680d      	ldr	r5, [r1, #0]
 8000584:	6804      	ldr	r4, [r0, #0]
 8000586:	688f      	ldr	r7, [r1, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000588:	2301      	movs	r3, #1
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800058a:	2d09      	cmp	r5, #9
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800058c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000590:	b2ae      	uxth	r6, r5
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000592:	d910      	bls.n	80005b6 <HAL_ADC_ConfigChannel+0x42>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000594:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8000598:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800059c:	f1a2 031e 	sub.w	r3, r2, #30
 80005a0:	2207      	movs	r2, #7
 80005a2:	409a      	lsls	r2, r3
 80005a4:	ea2e 0202 	bic.w	r2, lr, r2
 80005a8:	60e2      	str	r2, [r4, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80005aa:	68e2      	ldr	r2, [r4, #12]
 80005ac:	fa07 f303 	lsl.w	r3, r7, r3
 80005b0:	4313      	orrs	r3, r2
 80005b2:	60e3      	str	r3, [r4, #12]
 80005b4:	e00e      	b.n	80005d4 <HAL_ADC_ConfigChannel+0x60>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80005b6:	6922      	ldr	r2, [r4, #16]
 80005b8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80005bc:	f04f 0e07 	mov.w	lr, #7
 80005c0:	fa0e fe03 	lsl.w	lr, lr, r3
 80005c4:	ea22 020e 	bic.w	r2, r2, lr
 80005c8:	6122      	str	r2, [r4, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80005ca:	6922      	ldr	r2, [r4, #16]
 80005cc:	fa07 f303 	lsl.w	r3, r7, r3
 80005d0:	4313      	orrs	r3, r2
 80005d2:	6123      	str	r3, [r4, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80005d4:	684b      	ldr	r3, [r1, #4]
 80005d6:	2b06      	cmp	r3, #6
 80005d8:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80005dc:	d80d      	bhi.n	80005fa <HAL_ADC_ConfigChannel+0x86>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80005de:	4413      	add	r3, r2
 80005e0:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80005e2:	1f59      	subs	r1, r3, #5
 80005e4:	231f      	movs	r3, #31
 80005e6:	408b      	lsls	r3, r1
 80005e8:	ea27 0303 	bic.w	r3, r7, r3
 80005ec:	6363      	str	r3, [r4, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80005ee:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80005f0:	fa06 f101 	lsl.w	r1, r6, r1
 80005f4:	4311      	orrs	r1, r2
 80005f6:	6361      	str	r1, [r4, #52]	; 0x34
 80005f8:	e01d      	b.n	8000636 <HAL_ADC_ConfigChannel+0xc2>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80005fa:	2b0c      	cmp	r3, #12
 80005fc:	d80e      	bhi.n	800061c <HAL_ADC_ConfigChannel+0xa8>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80005fe:	4413      	add	r3, r2
 8000600:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000602:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000606:	231f      	movs	r3, #31
 8000608:	4093      	lsls	r3, r2
 800060a:	ea21 0303 	bic.w	r3, r1, r3
 800060e:	6323      	str	r3, [r4, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000610:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000612:	fa06 f202 	lsl.w	r2, r6, r2
 8000616:	431a      	orrs	r2, r3
 8000618:	6322      	str	r2, [r4, #48]	; 0x30
 800061a:	e00c      	b.n	8000636 <HAL_ADC_ConfigChannel+0xc2>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800061c:	4413      	add	r3, r2
 800061e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8000620:	3b41      	subs	r3, #65	; 0x41
 8000622:	221f      	movs	r2, #31
 8000624:	409a      	lsls	r2, r3
 8000626:	ea27 0202 	bic.w	r2, r7, r2
 800062a:	62e2      	str	r2, [r4, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800062c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800062e:	fa06 f203 	lsl.w	r2, r6, r3
 8000632:	430a      	orrs	r2, r1
 8000634:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000636:	4b17      	ldr	r3, [pc, #92]	; (8000694 <HAL_ADC_ConfigChannel+0x120>)
 8000638:	429c      	cmp	r4, r3
 800063a:	d004      	beq.n	8000646 <HAL_ADC_ConfigChannel+0xd2>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800063c:	2300      	movs	r3, #0
 800063e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000642:	4618      	mov	r0, r3
 8000644:	e023      	b.n	800068e <HAL_ADC_ConfigChannel+0x11a>
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000646:	2d12      	cmp	r5, #18
 8000648:	d107      	bne.n	800065a <HAL_ADC_ConfigChannel+0xe6>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800064a:	4a13      	ldr	r2, [pc, #76]	; (8000698 <HAL_ADC_ConfigChannel+0x124>)
 800064c:	6853      	ldr	r3, [r2, #4]
 800064e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000652:	6053      	str	r3, [r2, #4]
 8000654:	e7f2      	b.n	800063c <HAL_ADC_ConfigChannel+0xc8>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000656:	2002      	movs	r0, #2
 8000658:	e019      	b.n	800068e <HAL_ADC_ConfigChannel+0x11a>
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <HAL_ADC_ConfigChannel+0x128>)
 800065c:	429d      	cmp	r5, r3
 800065e:	d001      	beq.n	8000664 <HAL_ADC_ConfigChannel+0xf0>
 8000660:	2d11      	cmp	r5, #17
 8000662:	d1eb      	bne.n	800063c <HAL_ADC_ConfigChannel+0xc8>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000664:	490c      	ldr	r1, [pc, #48]	; (8000698 <HAL_ADC_ConfigChannel+0x124>)
 8000666:	684a      	ldr	r2, [r1, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000668:	429d      	cmp	r5, r3
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800066a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800066e:	604a      	str	r2, [r1, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000670:	d1e4      	bne.n	800063c <HAL_ADC_ConfigChannel+0xc8>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <HAL_ADC_ConfigChannel+0x12c>)
 8000674:	4a0b      	ldr	r2, [pc, #44]	; (80006a4 <HAL_ADC_ConfigChannel+0x130>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	fbb3 f2f2 	udiv	r2, r3, r2
 800067c:	230a      	movs	r3, #10
 800067e:	4353      	muls	r3, r2
      while(counter != 0U)
      {
        counter--;
 8000680:	9301      	str	r3, [sp, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
      while(counter != 0U)
 8000682:	9b01      	ldr	r3, [sp, #4]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0d9      	beq.n	800063c <HAL_ADC_ConfigChannel+0xc8>
      {
        counter--;
 8000688:	9b01      	ldr	r3, [sp, #4]
 800068a:	3b01      	subs	r3, #1
 800068c:	e7f8      	b.n	8000680 <HAL_ADC_ConfigChannel+0x10c>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return HAL_OK;
}
 800068e:	b003      	add	sp, #12
 8000690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000692:	bf00      	nop
 8000694:	40012000 	.word	0x40012000
 8000698:	40012300 	.word	0x40012300
 800069c:	10000012 	.word	0x10000012
 80006a0:	20000000 	.word	0x20000000
 80006a4:	000f4240 	.word	0x000f4240

080006a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a8:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80006aa:	68d3      	ldr	r3, [r2, #12]
 80006ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006b0:	041b      	lsls	r3, r3, #16
 80006b2:	0c1b      	lsrs	r3, r3, #16
 80006b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80006b8:	0200      	lsls	r0, r0, #8
 80006ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006be:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80006c2:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80006c4:	60d3      	str	r3, [r2, #12]
 80006c6:	4770      	bx	lr
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006cc:	4b17      	ldr	r3, [pc, #92]	; (800072c <HAL_NVIC_SetPriority+0x60>)
 80006ce:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006d4:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d6:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006da:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006dc:	2c04      	cmp	r4, #4
 80006de:	bf28      	it	cs
 80006e0:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e2:	2d06      	cmp	r5, #6

  return (
 80006e4:	f04f 0501 	mov.w	r5, #1
 80006e8:	fa05 f404 	lsl.w	r4, r5, r4
 80006ec:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f0:	bf8c      	ite	hi
 80006f2:	3b03      	subhi	r3, #3
 80006f4:	2300      	movls	r3, #0

  return (
 80006f6:	400c      	ands	r4, r1
 80006f8:	409c      	lsls	r4, r3
 80006fa:	fa05 f303 	lsl.w	r3, r5, r3
 80006fe:	3b01      	subs	r3, #1
 8000700:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000702:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000704:	ea42 0204 	orr.w	r2, r2, r4
 8000708:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070c:	bfaf      	iteee	ge
 800070e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	f000 000f 	andlt.w	r0, r0, #15
 8000716:	4b06      	ldrlt	r3, [pc, #24]	; (8000730 <HAL_NVIC_SetPriority+0x64>)
 8000718:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071a:	bfa5      	ittet	ge
 800071c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000720:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000722:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000724:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000728:	bd30      	pop	{r4, r5, pc}
 800072a:	bf00      	nop
 800072c:	e000ed00 	.word	0xe000ed00
 8000730:	e000ed14 	.word	0xe000ed14

08000734 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000734:	0942      	lsrs	r2, r0, #5
 8000736:	2301      	movs	r3, #1
 8000738:	f000 001f 	and.w	r0, r0, #31
 800073c:	fa03 f000 	lsl.w	r0, r3, r0
 8000740:	4b01      	ldr	r3, [pc, #4]	; (8000748 <HAL_NVIC_EnableIRQ+0x14>)
 8000742:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000746:	4770      	bx	lr
 8000748:	e000e100 	.word	0xe000e100

0800074c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800074c:	3801      	subs	r0, #1
 800074e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000752:	d20a      	bcs.n	800076a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000756:	4a07      	ldr	r2, [pc, #28]	; (8000774 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000758:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075a:	21f0      	movs	r1, #240	; 0xf0
 800075c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000760:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000762:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000764:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 800076a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000e010 	.word	0xe000e010
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800077a:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800077c:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800077e:	bf0c      	ite	eq
 8000780:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000784:	f022 0204 	bicne.w	r2, r2, #4
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	4770      	bx	lr
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000790:	4770      	bx	lr

08000792 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000792:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000794:	f7ff fffc 	bl	8000790 <HAL_SYSTICK_Callback>
 8000798:	bd08      	pop	{r3, pc}
	...

0800079c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800079c:	6803      	ldr	r3, [r0, #0]
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80007a4:	f023 0303 	bic.w	r3, r3, #3
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80007a8:	2118      	movs	r1, #24
 80007aa:	3a10      	subs	r2, #16
 80007ac:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80007b0:	4904      	ldr	r1, [pc, #16]	; (80007c4 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80007b2:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80007b4:	bf88      	it	hi
 80007b6:	3304      	addhi	r3, #4
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80007b8:	5c89      	ldrb	r1, [r1, r2]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80007ba:	6583      	str	r3, [r0, #88]	; 0x58
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80007bc:	65c1      	str	r1, [r0, #92]	; 0x5c
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80007be:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	08001d74 	.word	0x08001d74

080007c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80007cc:	f7ff fd50 	bl	8000270 <HAL_GetTick>
 80007d0:	4605      	mov	r5, r0
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80007d2:	2c00      	cmp	r4, #0
 80007d4:	d064      	beq.n	80008a0 <HAL_DMA_Init+0xd8>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80007d6:	2300      	movs	r3, #0
 80007d8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80007dc:	6822      	ldr	r2, [r4, #0]
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80007de:	2302      	movs	r3, #2
 80007e0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80007e4:	6813      	ldr	r3, [r2, #0]
 80007e6:	f023 0301 	bic.w	r3, r3, #1
 80007ea:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80007ec:	6821      	ldr	r1, [r4, #0]
 80007ee:	680b      	ldr	r3, [r1, #0]
 80007f0:	07d8      	lsls	r0, r3, #31
 80007f2:	d508      	bpl.n	8000806 <HAL_DMA_Init+0x3e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80007f4:	f7ff fd3c 	bl	8000270 <HAL_GetTick>
 80007f8:	1b40      	subs	r0, r0, r5
 80007fa:	2805      	cmp	r0, #5
 80007fc:	d9f6      	bls.n	80007ec <HAL_DMA_Init+0x24>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80007fe:	2320      	movs	r3, #32
 8000800:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000802:	2003      	movs	r0, #3
 8000804:	e051      	b.n	80008aa <HAL_DMA_Init+0xe2>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000806:	680b      	ldr	r3, [r1, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000808:	4a29      	ldr	r2, [pc, #164]	; (80008b0 <HAL_DMA_Init+0xe8>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800080a:	6865      	ldr	r5, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800080c:	69a0      	ldr	r0, [r4, #24]
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800080e:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000810:	68a3      	ldr	r3, [r4, #8]
 8000812:	431d      	orrs	r5, r3
 8000814:	68e3      	ldr	r3, [r4, #12]
 8000816:	431d      	orrs	r5, r3
 8000818:	6923      	ldr	r3, [r4, #16]
 800081a:	431d      	orrs	r5, r3
 800081c:	6963      	ldr	r3, [r4, #20]
 800081e:	432b      	orrs	r3, r5
 8000820:	69e5      	ldr	r5, [r4, #28]
 8000822:	4303      	orrs	r3, r0
 8000824:	432b      	orrs	r3, r5
 8000826:	6a25      	ldr	r5, [r4, #32]
 8000828:	432b      	orrs	r3, r5
 800082a:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800082c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800082e:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000830:	bf01      	itttt	eq
 8000832:	6b25      	ldreq	r5, [r4, #48]	; 0x30
 8000834:	6ae6      	ldreq	r6, [r4, #44]	; 0x2c
 8000836:	4335      	orreq	r5, r6
 8000838:	432b      	orreq	r3, r5
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800083a:	600b      	str	r3, [r1, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800083c:	694b      	ldr	r3, [r1, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800083e:	2a04      	cmp	r2, #4

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000840:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000844:	ea43 0302 	orr.w	r3, r3, r2

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000848:	d11c      	bne.n	8000884 <HAL_DMA_Init+0xbc>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800084a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800084c:	4313      	orrs	r3, r2
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800084e:	b920      	cbnz	r0, 800085a <HAL_DMA_Init+0x92>
  {
    switch (tmp)
 8000850:	2a01      	cmp	r2, #1
 8000852:	d00b      	beq.n	800086c <HAL_DMA_Init+0xa4>
 8000854:	d313      	bcc.n	800087e <HAL_DMA_Init+0xb6>
 8000856:	2a02      	cmp	r2, #2
 8000858:	e010      	b.n	800087c <HAL_DMA_Init+0xb4>
        break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800085a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800085e:	d10a      	bne.n	8000876 <HAL_DMA_Init+0xae>
  {
    switch (tmp)
 8000860:	2a03      	cmp	r2, #3
 8000862:	d80f      	bhi.n	8000884 <HAL_DMA_Init+0xbc>
 8000864:	e8df f002 	tbb	[pc, r2]
 8000868:	021e0b1e 	.word	0x021e0b1e
        break;
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800086c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800086e:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 8000872:	d107      	bne.n	8000884 <HAL_DMA_Init+0xbc>
 8000874:	e016      	b.n	80008a4 <HAL_DMA_Init+0xdc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000876:	2a02      	cmp	r2, #2
 8000878:	d914      	bls.n	80008a4 <HAL_DMA_Init+0xdc>
 800087a:	2a03      	cmp	r2, #3
 800087c:	d102      	bne.n	8000884 <HAL_DMA_Init+0xbc>
      case DMA_FIFO_THRESHOLD_HALFFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800087e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000880:	01d2      	lsls	r2, r2, #7
 8000882:	d40f      	bmi.n	80008a4 <HAL_DMA_Init+0xdc>
      return HAL_ERROR; 
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000884:	614b      	str	r3, [r1, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000886:	4620      	mov	r0, r4
 8000888:	f7ff ff88 	bl	800079c <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800088c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800088e:	233f      	movs	r3, #63	; 0x3f
 8000890:	4093      	lsls	r3, r2
 8000892:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000894:	2000      	movs	r0, #0
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000896:	2301      	movs	r3, #1
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000898:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800089a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 800089e:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80008a0:	2001      	movs	r0, #1
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
    tmp |= hdma->Init.FIFOThreshold;
    
    if(DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80008a4:	2340      	movs	r3, #64	; 0x40
 80008a6:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80008a8:	2001      	movs	r0, #1
 80008aa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 80008ae:	bd70      	pop	{r4, r5, r6, pc}
 80008b0:	f010803f 	.word	0xf010803f

080008b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80008b4:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80008b6:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80008ba:	2c01      	cmp	r4, #1
 80008bc:	d038      	beq.n	8000930 <HAL_DMA_Start_IT+0x7c>
 80008be:	2401      	movs	r4, #1
 80008c0:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80008c4:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80008c8:	6d86      	ldr	r6, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80008ca:	2c01      	cmp	r4, #1
 80008cc:	f04f 0500 	mov.w	r5, #0
 80008d0:	f04f 0402 	mov.w	r4, #2
 80008d4:	d128      	bne.n	8000928 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80008d6:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80008da:	6804      	ldr	r4, [r0, #0]
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008dc:	6545      	str	r5, [r0, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80008de:	6825      	ldr	r5, [r4, #0]
 80008e0:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80008e4:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80008e6:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80008e8:	6883      	ldr	r3, [r0, #8]
 80008ea:	2b40      	cmp	r3, #64	; 0x40
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80008ec:	bf0e      	itee	eq
 80008ee:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80008f0:	60a1      	strne	r1, [r4, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80008f2:	60e2      	strne	r2, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80008f4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80008f6:	bf08      	it	eq
 80008f8:	60e1      	streq	r1, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80008fa:	233f      	movs	r3, #63	; 0x3f
 80008fc:	4093      	lsls	r3, r2
 80008fe:	60b3      	str	r3, [r6, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000900:	6823      	ldr	r3, [r4, #0]
 8000902:	f043 0316 	orr.w	r3, r3, #22
 8000906:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000908:	6963      	ldr	r3, [r4, #20]
 800090a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800090e:	6163      	str	r3, [r4, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000910:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000912:	b11b      	cbz	r3, 800091c <HAL_DMA_Start_IT+0x68>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000914:	6823      	ldr	r3, [r4, #0]
 8000916:	f043 0308 	orr.w	r3, r3, #8
 800091a:	6023      	str	r3, [r4, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800091c:	6823      	ldr	r3, [r4, #0]
 800091e:	f043 0301 	orr.w	r3, r3, #1
 8000922:	6023      	str	r3, [r4, #0]
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 8000924:	2000      	movs	r0, #0
 8000926:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000928:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800092c:	4620      	mov	r0, r4
 800092e:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000930:	2002      	movs	r0, #2
    /* Return error status */
    status = HAL_BUSY;
  }
  
  return status;
}
 8000932:	bd70      	pop	{r4, r5, r6, pc}

08000934 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800093a:	6d85      	ldr	r5, [r0, #88]	; 0x58
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 800093c:	4b59      	ldr	r3, [pc, #356]	; (8000aa4 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800093e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8000940:	681f      	ldr	r7, [r3, #0]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;
 8000942:	682e      	ldr	r6, [r5, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000944:	2308      	movs	r3, #8
 8000946:	4093      	lsls	r3, r2
 8000948:	421e      	tst	r6, r3
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800094a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800094c:	d00c      	beq.n	8000968 <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800094e:	6801      	ldr	r1, [r0, #0]
 8000950:	6808      	ldr	r0, [r1, #0]
 8000952:	0740      	lsls	r0, r0, #29
 8000954:	d508      	bpl.n	8000968 <HAL_DMA_IRQHandler+0x34>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000956:	6808      	ldr	r0, [r1, #0]
 8000958:	f020 0004 	bic.w	r0, r0, #4
 800095c:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800095e:	60ab      	str	r3, [r5, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000960:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000968:	4b4f      	ldr	r3, [pc, #316]	; (8000aa8 <HAL_DMA_IRQHandler+0x174>)
 800096a:	4093      	lsls	r3, r2
 800096c:	421e      	tst	r6, r3
 800096e:	d008      	beq.n	8000982 <HAL_DMA_IRQHandler+0x4e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000970:	6821      	ldr	r1, [r4, #0]
 8000972:	6949      	ldr	r1, [r1, #20]
 8000974:	0609      	lsls	r1, r1, #24
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000976:	bf41      	itttt	mi
 8000978:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800097a:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 800097c:	f043 0302 	orrmi.w	r3, r3, #2
 8000980:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000982:	4b4a      	ldr	r3, [pc, #296]	; (8000aac <HAL_DMA_IRQHandler+0x178>)
 8000984:	4093      	lsls	r3, r2
 8000986:	421e      	tst	r6, r3
 8000988:	d008      	beq.n	800099c <HAL_DMA_IRQHandler+0x68>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800098a:	6821      	ldr	r1, [r4, #0]
 800098c:	6809      	ldr	r1, [r1, #0]
 800098e:	0788      	lsls	r0, r1, #30
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000990:	bf41      	itttt	mi
 8000992:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000994:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 8000996:	f043 0304 	orrmi.w	r3, r3, #4
 800099a:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800099c:	2310      	movs	r3, #16
 800099e:	fa03 f202 	lsl.w	r2, r3, r2
 80009a2:	4216      	tst	r6, r2
 80009a4:	d017      	beq.n	80009d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80009a6:	6823      	ldr	r3, [r4, #0]
 80009a8:	6819      	ldr	r1, [r3, #0]
 80009aa:	0709      	lsls	r1, r1, #28
 80009ac:	d513      	bpl.n	80009d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80009ae:	60aa      	str	r2, [r5, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	0350      	lsls	r0, r2, #13
 80009b4:	d504      	bpl.n	80009c0 <HAL_DMA_IRQHandler+0x8c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	0319      	lsls	r1, r3, #12
 80009ba:	d508      	bpl.n	80009ce <HAL_DMA_IRQHandler+0x9a>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80009bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80009be:	e007      	b.n	80009d0 <HAL_DMA_IRQHandler+0x9c>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	05d2      	lsls	r2, r2, #23
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80009c4:	bf5e      	ittt	pl
 80009c6:	681a      	ldrpl	r2, [r3, #0]
 80009c8:	f022 0208 	bicpl.w	r2, r2, #8
 80009cc:	601a      	strpl	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80009ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009d0:	b10b      	cbz	r3, 80009d6 <HAL_DMA_IRQHandler+0xa2>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80009d2:	4620      	mov	r0, r4
 80009d4:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80009d6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80009d8:	2220      	movs	r2, #32
 80009da:	408a      	lsls	r2, r1
 80009dc:	4216      	tst	r6, r2
 80009de:	d03b      	beq.n	8000a58 <HAL_DMA_IRQHandler+0x124>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80009e0:	6823      	ldr	r3, [r4, #0]
 80009e2:	6818      	ldr	r0, [r3, #0]
 80009e4:	06c6      	lsls	r6, r0, #27
 80009e6:	d537      	bpl.n	8000a58 <HAL_DMA_IRQHandler+0x124>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80009e8:	60aa      	str	r2, [r5, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80009ea:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80009ee:	2a05      	cmp	r2, #5
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80009f0:	681a      	ldr	r2, [r3, #0]
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80009f2:	d119      	bne.n	8000a28 <HAL_DMA_IRQHandler+0xf4>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80009f4:	f022 0216 	bic.w	r2, r2, #22
 80009f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80009fa:	695a      	ldr	r2, [r3, #20]
 80009fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000a02:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000a04:	b90a      	cbnz	r2, 8000a0a <HAL_DMA_IRQHandler+0xd6>
 8000a06:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000a08:	b11a      	cbz	r2, 8000a12 <HAL_DMA_IRQHandler+0xde>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	f022 0208 	bic.w	r2, r2, #8
 8000a10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a12:	233f      	movs	r3, #63	; 0x3f
 8000a14:	408b      	lsls	r3, r1
 8000a16:	60ab      	str	r3, [r5, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000a24:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000a26:	e037      	b.n	8000a98 <HAL_DMA_IRQHandler+0x164>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000a28:	0350      	lsls	r0, r2, #13
 8000a2a:	d504      	bpl.n	8000a36 <HAL_DMA_IRQHandler+0x102>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	0319      	lsls	r1, r3, #12
 8000a30:	d40e      	bmi.n	8000a50 <HAL_DMA_IRQHandler+0x11c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000a32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a34:	e00d      	b.n	8000a52 <HAL_DMA_IRQHandler+0x11e>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000a3c:	d108      	bne.n	8000a50 <HAL_DMA_IRQHandler+0x11c>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000a3e:	6819      	ldr	r1, [r3, #0]
 8000a40:	f021 0110 	bic.w	r1, r1, #16
 8000a44:	6019      	str	r1, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000a46:	2301      	movs	r3, #1
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000a48:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000a4c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000a50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000a52:	b10b      	cbz	r3, 8000a58 <HAL_DMA_IRQHandler+0x124>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000a54:	4620      	mov	r0, r4
 8000a56:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000a58:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a5a:	b303      	cbz	r3, 8000a9e <HAL_DMA_IRQHandler+0x16a>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000a5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a5e:	07da      	lsls	r2, r3, #31
 8000a60:	d519      	bpl.n	8000a96 <HAL_DMA_IRQHandler+0x162>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000a62:	2305      	movs	r3, #5

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000a64:	6822      	ldr	r2, [r4, #0]
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000a66:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000a6a:	6813      	ldr	r3, [r2, #0]
 8000a6c:	f023 0301 	bic.w	r3, r3, #1
 8000a70:	6013      	str	r3, [r2, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8000a72:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000a76:	fbb7 f7f3 	udiv	r7, r7, r3
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);

      do
      {
        if (++count > timeout)
 8000a7a:	9b01      	ldr	r3, [sp, #4]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	429f      	cmp	r7, r3
 8000a80:	9301      	str	r3, [sp, #4]
 8000a82:	d302      	bcc.n	8000a8a <HAL_DMA_IRQHandler+0x156>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000a84:	6813      	ldr	r3, [r2, #0]
 8000a86:	07db      	lsls	r3, r3, #31
 8000a88:	d4f7      	bmi.n	8000a7a <HAL_DMA_IRQHandler+0x146>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000a90:	2301      	movs	r3, #1
 8000a92:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000a96:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000a98:	b10b      	cbz	r3, 8000a9e <HAL_DMA_IRQHandler+0x16a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000a9a:	4620      	mov	r0, r4
 8000a9c:	4798      	blx	r3
    }
  }
}
 8000a9e:	b003      	add	sp, #12
 8000aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	00800001 	.word	0x00800001
 8000aac:	00800004 	.word	0x00800004

08000ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ab4:	4f67      	ldr	r7, [pc, #412]	; (8000c54 <HAL_GPIO_Init+0x1a4>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ab6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab8:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8000c5c <HAL_GPIO_Init+0x1ac>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000abc:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000c60 <HAL_GPIO_Init+0x1b0>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac0:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ac2:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8000ac8:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000aca:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8000acc:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000ace:	ea34 0303 	bics.w	r3, r4, r3
 8000ad2:	f040 80b7 	bne.w	8000c44 <HAL_GPIO_Init+0x194>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ad6:	684d      	ldr	r5, [r1, #4]
 8000ad8:	f025 0a10 	bic.w	sl, r5, #16
 8000adc:	f1ba 0f02 	cmp.w	sl, #2
 8000ae0:	d114      	bne.n	8000b0c <HAL_GPIO_Init+0x5c>
 8000ae2:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 8000ae6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000aea:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000aee:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000af2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000af6:	230f      	movs	r3, #15
 8000af8:	fa03 f30b 	lsl.w	r3, r3, fp
 8000afc:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000b00:	690b      	ldr	r3, [r1, #16]
 8000b02:	fa03 f30b 	lsl.w	r3, r3, fp
 8000b06:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000b08:	f8c9 3020 	str.w	r3, [r9, #32]
 8000b0c:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b10:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b14:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b16:	fa09 f90b 	lsl.w	r9, r9, fp
 8000b1a:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b1e:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b22:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b26:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b2a:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b2e:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b30:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8000b34:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b36:	d80f      	bhi.n	8000b58 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b38:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b3a:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b3c:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b40:	fa06 f60b 	lsl.w	r6, r6, fp
 8000b44:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 8000b46:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b48:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b4a:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b4e:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b52:	4096      	lsls	r6, r2
 8000b54:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8000b56:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b58:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b5a:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b5e:	688b      	ldr	r3, [r1, #8]
 8000b60:	fa03 f30b 	lsl.w	r3, r3, fp
 8000b64:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8000b68:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b6a:	00eb      	lsls	r3, r5, #3
 8000b6c:	d56a      	bpl.n	8000c44 <HAL_GPIO_Init+0x194>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	9303      	str	r3, [sp, #12]
 8000b72:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b76:	4b38      	ldr	r3, [pc, #224]	; (8000c58 <HAL_GPIO_Init+0x1a8>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b78:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000b7c:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8000b80:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 8000b84:	f022 0903 	bic.w	r9, r2, #3
 8000b88:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8000b8c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000b90:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 8000b94:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000b96:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b9c:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000ba0:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000ba4:	260f      	movs	r6, #15
 8000ba6:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000baa:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000bac:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bb0:	d018      	beq.n	8000be4 <HAL_GPIO_Init+0x134>
 8000bb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bb6:	4298      	cmp	r0, r3
 8000bb8:	d016      	beq.n	8000be8 <HAL_GPIO_Init+0x138>
 8000bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bbe:	4298      	cmp	r0, r3
 8000bc0:	d014      	beq.n	8000bec <HAL_GPIO_Init+0x13c>
 8000bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bc6:	4298      	cmp	r0, r3
 8000bc8:	d012      	beq.n	8000bf0 <HAL_GPIO_Init+0x140>
 8000bca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bce:	4298      	cmp	r0, r3
 8000bd0:	d010      	beq.n	8000bf4 <HAL_GPIO_Init+0x144>
 8000bd2:	4540      	cmp	r0, r8
 8000bd4:	d010      	beq.n	8000bf8 <HAL_GPIO_Init+0x148>
 8000bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000bda:	4298      	cmp	r0, r3
 8000bdc:	bf14      	ite	ne
 8000bde:	2307      	movne	r3, #7
 8000be0:	2306      	moveq	r3, #6
 8000be2:	e00a      	b.n	8000bfa <HAL_GPIO_Init+0x14a>
 8000be4:	2300      	movs	r3, #0
 8000be6:	e008      	b.n	8000bfa <HAL_GPIO_Init+0x14a>
 8000be8:	2301      	movs	r3, #1
 8000bea:	e006      	b.n	8000bfa <HAL_GPIO_Init+0x14a>
 8000bec:	2302      	movs	r3, #2
 8000bee:	e004      	b.n	8000bfa <HAL_GPIO_Init+0x14a>
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	e002      	b.n	8000bfa <HAL_GPIO_Init+0x14a>
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	e000      	b.n	8000bfa <HAL_GPIO_Init+0x14a>
 8000bf8:	2305      	movs	r3, #5
 8000bfa:	fa03 f30a 	lsl.w	r3, r3, sl
 8000bfe:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c00:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c04:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c06:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c08:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8000c0c:	bf0c      	ite	eq
 8000c0e:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8000c10:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 8000c12:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8000c16:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c1a:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8000c1e:	bf0c      	ite	eq
 8000c20:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8000c22:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 8000c24:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c26:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c28:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8000c2c:	bf0c      	ite	eq
 8000c2e:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8000c30:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 8000c32:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8000c36:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c3a:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8000c3c:	bf54      	ite	pl
 8000c3e:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000c40:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 8000c42:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c44:	3201      	adds	r2, #1
 8000c46:	2a10      	cmp	r2, #16
 8000c48:	f47f af3e 	bne.w	8000ac8 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8000c4c:	b005      	add	sp, #20
 8000c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c52:	bf00      	nop
 8000c54:	40013c00 	.word	0x40013c00
 8000c58:	40020000 	.word	0x40020000
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40021400 	.word	0x40021400

08000c64 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c64:	b902      	cbnz	r2, 8000c68 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c66:	0409      	lsls	r1, r1, #16
 8000c68:	6181      	str	r1, [r0, #24]
 8000c6a:	4770      	bx	lr

08000c6c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000c6c:	6943      	ldr	r3, [r0, #20]
 8000c6e:	4059      	eors	r1, r3
 8000c70:	6141      	str	r1, [r0, #20]
 8000c72:	4770      	bx	lr

08000c74 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c74:	4b55      	ldr	r3, [pc, #340]	; (8000dcc <HAL_RCC_ClockConfig+0x158>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	f002 020f 	and.w	r2, r2, #15
 8000c7c:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c82:	4605      	mov	r5, r0
 8000c84:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c86:	d30a      	bcc.n	8000c9e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c88:	6829      	ldr	r1, [r5, #0]
 8000c8a:	0788      	lsls	r0, r1, #30
 8000c8c:	d511      	bpl.n	8000cb2 <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c8e:	4850      	ldr	r0, [pc, #320]	; (8000dd0 <HAL_RCC_ClockConfig+0x15c>)
 8000c90:	6883      	ldr	r3, [r0, #8]
 8000c92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c96:	68ab      	ldr	r3, [r5, #8]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	6083      	str	r3, [r0, #8]
 8000c9c:	e009      	b.n	8000cb2 <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c9e:	b2ca      	uxtb	r2, r1
 8000ca0:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 030f 	and.w	r3, r3, #15
 8000ca8:	4299      	cmp	r1, r3
 8000caa:	d0ed      	beq.n	8000c88 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000cac:	2001      	movs	r0, #1
 8000cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cb2:	07c9      	lsls	r1, r1, #31
 8000cb4:	d406      	bmi.n	8000cc4 <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cb6:	4b45      	ldr	r3, [pc, #276]	; (8000dcc <HAL_RCC_ClockConfig+0x158>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	f002 020f 	and.w	r2, r2, #15
 8000cbe:	4296      	cmp	r6, r2
 8000cc0:	d351      	bcc.n	8000d66 <HAL_RCC_ClockConfig+0xf2>
 8000cc2:	e057      	b.n	8000d74 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cc4:	686b      	ldr	r3, [r5, #4]
 8000cc6:	4a42      	ldr	r2, [pc, #264]	; (8000dd0 <HAL_RCC_ClockConfig+0x15c>)
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d103      	bne.n	8000cd4 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ccc:	6812      	ldr	r2, [r2, #0]
 8000cce:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000cd2:	e008      	b.n	8000ce6 <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000cd4:	1e99      	subs	r1, r3, #2
 8000cd6:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cd8:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000cda:	d802      	bhi.n	8000ce2 <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cdc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000ce0:	e001      	b.n	8000ce6 <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce2:	f012 0f02 	tst.w	r2, #2
 8000ce6:	d0e1      	beq.n	8000cac <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ce8:	4c39      	ldr	r4, [pc, #228]	; (8000dd0 <HAL_RCC_ClockConfig+0x15c>)
 8000cea:	68a2      	ldr	r2, [r4, #8]
 8000cec:	f022 0203 	bic.w	r2, r2, #3
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000cf4:	f7ff fabc 	bl	8000270 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cf8:	686b      	ldr	r3, [r5, #4]
 8000cfa:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000cfc:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cfe:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d02:	d10c      	bne.n	8000d1e <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d04:	68a3      	ldr	r3, [r4, #8]
 8000d06:	f003 030c 	and.w	r3, r3, #12
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	d0d3      	beq.n	8000cb6 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d0e:	f7ff faaf 	bl	8000270 <HAL_GetTick>
 8000d12:	1bc0      	subs	r0, r0, r7
 8000d14:	4540      	cmp	r0, r8
 8000d16:	d9f5      	bls.n	8000d04 <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 8000d18:	2003      	movs	r0, #3
 8000d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d10a      	bne.n	8000d38 <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d22:	68a3      	ldr	r3, [r4, #8]
 8000d24:	f003 030c 	and.w	r3, r3, #12
 8000d28:	2b08      	cmp	r3, #8
 8000d2a:	d0c4      	beq.n	8000cb6 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d2c:	f7ff faa0 	bl	8000270 <HAL_GetTick>
 8000d30:	1bc0      	subs	r0, r0, r7
 8000d32:	4540      	cmp	r0, r8
 8000d34:	d9f5      	bls.n	8000d22 <HAL_RCC_ClockConfig+0xae>
 8000d36:	e7ef      	b.n	8000d18 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000d38:	2b03      	cmp	r3, #3
 8000d3a:	d10f      	bne.n	8000d5c <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000d3c:	68a3      	ldr	r3, [r4, #8]
 8000d3e:	f003 030c 	and.w	r3, r3, #12
 8000d42:	2b0c      	cmp	r3, #12
 8000d44:	d0b7      	beq.n	8000cb6 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d46:	f7ff fa93 	bl	8000270 <HAL_GetTick>
 8000d4a:	1bc0      	subs	r0, r0, r7
 8000d4c:	4540      	cmp	r0, r8
 8000d4e:	d9f5      	bls.n	8000d3c <HAL_RCC_ClockConfig+0xc8>
 8000d50:	e7e2      	b.n	8000d18 <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d52:	f7ff fa8d 	bl	8000270 <HAL_GetTick>
 8000d56:	1bc0      	subs	r0, r0, r7
 8000d58:	4540      	cmp	r0, r8
 8000d5a:	d8dd      	bhi.n	8000d18 <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d5c:	68a3      	ldr	r3, [r4, #8]
 8000d5e:	f013 0f0c 	tst.w	r3, #12
 8000d62:	d1f6      	bne.n	8000d52 <HAL_RCC_ClockConfig+0xde>
 8000d64:	e7a7      	b.n	8000cb6 <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d66:	b2f2      	uxtb	r2, r6
 8000d68:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f003 030f 	and.w	r3, r3, #15
 8000d70:	429e      	cmp	r6, r3
 8000d72:	d19b      	bne.n	8000cac <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d74:	6829      	ldr	r1, [r5, #0]
 8000d76:	074a      	lsls	r2, r1, #29
 8000d78:	d506      	bpl.n	8000d88 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d7a:	4815      	ldr	r0, [pc, #84]	; (8000dd0 <HAL_RCC_ClockConfig+0x15c>)
 8000d7c:	6883      	ldr	r3, [r0, #8]
 8000d7e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000d82:	68eb      	ldr	r3, [r5, #12]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d88:	070b      	lsls	r3, r1, #28
 8000d8a:	d507      	bpl.n	8000d9c <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d8c:	4a10      	ldr	r2, [pc, #64]	; (8000dd0 <HAL_RCC_ClockConfig+0x15c>)
 8000d8e:	6929      	ldr	r1, [r5, #16]
 8000d90:	6893      	ldr	r3, [r2, #8]
 8000d92:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000d96:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d9a:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000d9c:	f000 fa00 	bl	80011a0 <HAL_RCC_GetSysClockFreq>
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <HAL_RCC_ClockConfig+0x15c>)
 8000da2:	22f0      	movs	r2, #240	; 0xf0
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	fa92 f2a2 	rbit	r2, r2
 8000daa:	fab2 f282 	clz	r2, r2
 8000dae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000db2:	40d3      	lsrs	r3, r2
 8000db4:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <HAL_RCC_ClockConfig+0x160>)
 8000db6:	5cd3      	ldrb	r3, [r2, r3]
 8000db8:	40d8      	lsrs	r0, r3
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <HAL_RCC_ClockConfig+0x164>)
 8000dbc:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff fa20 	bl	8000204 <HAL_InitTick>
  
  return HAL_OK;
 8000dc4:	2000      	movs	r0, #0
}
 8000dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023c00 	.word	0x40023c00
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	08001d7c 	.word	0x08001d7c
 8000dd8:	20000000 	.word	0x20000000

08000ddc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000ddc:	4b01      	ldr	r3, [pc, #4]	; (8000de4 <HAL_RCC_GetHCLKFreq+0x8>)
 8000dde:	6818      	ldr	r0, [r3, #0]
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000000 	.word	0x20000000

08000de8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000dea:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	fa92 f2a2 	rbit	r2, r2
 8000df4:	fab2 f282 	clz	r2, r2
 8000df8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000dfc:	40d3      	lsrs	r3, r2
 8000dfe:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000e00:	5cd3      	ldrb	r3, [r2, r3]
 8000e02:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000e04:	6810      	ldr	r0, [r2, #0]
}
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	08001d7c 	.word	0x08001d7c
 8000e14:	20000000 	.word	0x20000000

08000e18 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e1a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	fa92 f2a2 	rbit	r2, r2
 8000e24:	fab2 f282 	clz	r2, r2
 8000e28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000e2c:	40d3      	lsrs	r3, r2
 8000e2e:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000e30:	5cd3      	ldrb	r3, [r2, r3]
 8000e32:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000e34:	6810      	ldr	r0, [r2, #0]
} 
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	08001d7c 	.word	0x08001d7c
 8000e44:	20000000 	.word	0x20000000

08000e48 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e48:	6803      	ldr	r3, [r0, #0]
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e4a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e4e:	07de      	lsls	r6, r3, #31
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e50:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e52:	d403      	bmi.n	8000e5c <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e54:	6823      	ldr	r3, [r4, #0]
 8000e56:	079d      	lsls	r5, r3, #30
 8000e58:	d458      	bmi.n	8000f0c <HAL_RCC_OscConfig+0xc4>
 8000e5a:	e0b1      	b.n	8000fc0 <HAL_RCC_OscConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000e5c:	4b97      	ldr	r3, [pc, #604]	; (80010bc <HAL_RCC_OscConfig+0x274>)
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	f002 020c 	and.w	r2, r2, #12
 8000e64:	2a04      	cmp	r2, #4
 8000e66:	d010      	beq.n	8000e8a <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000e68:	689a      	ldr	r2, [r3, #8]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000e6a:	f002 020c 	and.w	r2, r2, #12
 8000e6e:	2a08      	cmp	r2, #8
 8000e70:	d102      	bne.n	8000e78 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	0258      	lsls	r0, r3, #9
 8000e76:	d408      	bmi.n	8000e8a <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e78:	4b90      	ldr	r3, [pc, #576]	; (80010bc <HAL_RCC_OscConfig+0x274>)
 8000e7a:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000e7c:	f002 020c 	and.w	r2, r2, #12
 8000e80:	2a0c      	cmp	r2, #12
 8000e82:	d10b      	bne.n	8000e9c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e84:	685a      	ldr	r2, [r3, #4]
 8000e86:	0251      	lsls	r1, r2, #9
 8000e88:	d508      	bpl.n	8000e9c <HAL_RCC_OscConfig+0x54>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e8a:	4b8c      	ldr	r3, [pc, #560]	; (80010bc <HAL_RCC_OscConfig+0x274>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	039a      	lsls	r2, r3, #14
 8000e90:	d5e0      	bpl.n	8000e54 <HAL_RCC_OscConfig+0xc>
 8000e92:	6863      	ldr	r3, [r4, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1dd      	bne.n	8000e54 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8000e98:	2001      	movs	r0, #1
 8000e9a:	e17a      	b.n	8001192 <HAL_RCC_OscConfig+0x34a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e9c:	6862      	ldr	r2, [r4, #4]
 8000e9e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000ea2:	d104      	bne.n	8000eae <HAL_RCC_OscConfig+0x66>
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	e014      	b.n	8000ed8 <HAL_RCC_OscConfig+0x90>
 8000eae:	4d83      	ldr	r5, [pc, #524]	; (80010bc <HAL_RCC_OscConfig+0x274>)
 8000eb0:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000eb4:	682b      	ldr	r3, [r5, #0]
 8000eb6:	d107      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x80>
 8000eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ebc:	602b      	str	r3, [r5, #0]
 8000ebe:	682b      	ldr	r3, [r5, #0]
 8000ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec4:	602b      	str	r3, [r5, #0]
 8000ec6:	e007      	b.n	8000ed8 <HAL_RCC_OscConfig+0x90>
 8000ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ecc:	602b      	str	r3, [r5, #0]
 8000ece:	682b      	ldr	r3, [r5, #0]
 8000ed0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed4:	602b      	str	r3, [r5, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ed6:	b16a      	cbz	r2, 8000ef4 <HAL_RCC_OscConfig+0xac>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ed8:	f7ff f9ca 	bl	8000270 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000edc:	4d77      	ldr	r5, [pc, #476]	; (80010bc <HAL_RCC_OscConfig+0x274>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ede:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ee0:	682b      	ldr	r3, [r5, #0]
 8000ee2:	039b      	lsls	r3, r3, #14
 8000ee4:	d4b6      	bmi.n	8000e54 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ee6:	f7ff f9c3 	bl	8000270 <HAL_GetTick>
 8000eea:	1b80      	subs	r0, r0, r6
 8000eec:	2864      	cmp	r0, #100	; 0x64
 8000eee:	d9f7      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	e14e      	b.n	8001192 <HAL_RCC_OscConfig+0x34a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef4:	f7ff f9bc 	bl	8000270 <HAL_GetTick>
 8000ef8:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000efa:	682b      	ldr	r3, [r5, #0]
 8000efc:	039f      	lsls	r7, r3, #14
 8000efe:	d5a9      	bpl.n	8000e54 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f00:	f7ff f9b6 	bl	8000270 <HAL_GetTick>
 8000f04:	1b80      	subs	r0, r0, r6
 8000f06:	2864      	cmp	r0, #100	; 0x64
 8000f08:	d9f7      	bls.n	8000efa <HAL_RCC_OscConfig+0xb2>
 8000f0a:	e7f1      	b.n	8000ef0 <HAL_RCC_OscConfig+0xa8>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000f0c:	4b6b      	ldr	r3, [pc, #428]	; (80010bc <HAL_RCC_OscConfig+0x274>)
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	f012 0f0c 	tst.w	r2, #12
 8000f14:	d010      	beq.n	8000f38 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000f16:	689a      	ldr	r2, [r3, #8]
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000f18:	f002 020c 	and.w	r2, r2, #12
 8000f1c:	2a08      	cmp	r2, #8
 8000f1e:	d102      	bne.n	8000f26 <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	0258      	lsls	r0, r3, #9
 8000f24:	d508      	bpl.n	8000f38 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f26:	4a65      	ldr	r2, [pc, #404]	; (80010bc <HAL_RCC_OscConfig+0x274>)
 8000f28:	6893      	ldr	r3, [r2, #8]
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000f2a:	f003 030c 	and.w	r3, r3, #12
 8000f2e:	2b0c      	cmp	r3, #12
 8000f30:	d117      	bne.n	8000f62 <HAL_RCC_OscConfig+0x11a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f32:	6853      	ldr	r3, [r2, #4]
 8000f34:	0259      	lsls	r1, r3, #9
 8000f36:	d414      	bmi.n	8000f62 <HAL_RCC_OscConfig+0x11a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f38:	4b60      	ldr	r3, [pc, #384]	; (80010bc <HAL_RCC_OscConfig+0x274>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	0792      	lsls	r2, r2, #30
 8000f3e:	d502      	bpl.n	8000f46 <HAL_RCC_OscConfig+0xfe>
 8000f40:	68e2      	ldr	r2, [r4, #12]
 8000f42:	2a01      	cmp	r2, #1
 8000f44:	d1a8      	bne.n	8000e98 <HAL_RCC_OscConfig+0x50>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	21f8      	movs	r1, #248	; 0xf8
 8000f4a:	fa91 f1a1 	rbit	r1, r1
 8000f4e:	6920      	ldr	r0, [r4, #16]
 8000f50:	fab1 f181 	clz	r1, r1
 8000f54:	fa00 f101 	lsl.w	r1, r0, r1
 8000f58:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	601a      	str	r2, [r3, #0]
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f60:	e02e      	b.n	8000fc0 <HAL_RCC_OscConfig+0x178>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f62:	68e2      	ldr	r2, [r4, #12]
 8000f64:	4b56      	ldr	r3, [pc, #344]	; (80010c0 <HAL_RCC_OscConfig+0x278>)
 8000f66:	b1ea      	cbz	r2, 8000fa4 <HAL_RCC_OscConfig+0x15c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f6c:	f7ff f980 	bl	8000270 <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f70:	4d52      	ldr	r5, [pc, #328]	; (80010bc <HAL_RCC_OscConfig+0x274>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f72:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f74:	682b      	ldr	r3, [r5, #0]
 8000f76:	4851      	ldr	r0, [pc, #324]	; (80010bc <HAL_RCC_OscConfig+0x274>)
 8000f78:	079b      	lsls	r3, r3, #30
 8000f7a:	d405      	bmi.n	8000f88 <HAL_RCC_OscConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f7c:	f7ff f978 	bl	8000270 <HAL_GetTick>
 8000f80:	1b80      	subs	r0, r0, r6
 8000f82:	2802      	cmp	r0, #2
 8000f84:	d9f6      	bls.n	8000f74 <HAL_RCC_OscConfig+0x12c>
 8000f86:	e7b3      	b.n	8000ef0 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f88:	6803      	ldr	r3, [r0, #0]
 8000f8a:	22f8      	movs	r2, #248	; 0xf8
 8000f8c:	fa92 f2a2 	rbit	r2, r2
 8000f90:	6921      	ldr	r1, [r4, #16]
 8000f92:	fab2 f282 	clz	r2, r2
 8000f96:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	6003      	str	r3, [r0, #0]
 8000fa2:	e00d      	b.n	8000fc0 <HAL_RCC_OscConfig+0x178>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa6:	f7ff f963 	bl	8000270 <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000faa:	4d44      	ldr	r5, [pc, #272]	; (80010bc <HAL_RCC_OscConfig+0x274>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fac:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fae:	682b      	ldr	r3, [r5, #0]
 8000fb0:	079f      	lsls	r7, r3, #30
 8000fb2:	d505      	bpl.n	8000fc0 <HAL_RCC_OscConfig+0x178>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fb4:	f7ff f95c 	bl	8000270 <HAL_GetTick>
 8000fb8:	1b80      	subs	r0, r0, r6
 8000fba:	2802      	cmp	r0, #2
 8000fbc:	d9f7      	bls.n	8000fae <HAL_RCC_OscConfig+0x166>
 8000fbe:	e797      	b.n	8000ef0 <HAL_RCC_OscConfig+0xa8>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fc0:	6823      	ldr	r3, [r4, #0]
 8000fc2:	071e      	lsls	r6, r3, #28
 8000fc4:	d403      	bmi.n	8000fce <HAL_RCC_OscConfig+0x186>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fc6:	6823      	ldr	r3, [r4, #0]
 8000fc8:	075d      	lsls	r5, r3, #29
 8000fca:	d548      	bpl.n	800105e <HAL_RCC_OscConfig+0x216>
 8000fcc:	e01f      	b.n	800100e <HAL_RCC_OscConfig+0x1c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000fce:	6962      	ldr	r2, [r4, #20]
 8000fd0:	4b3c      	ldr	r3, [pc, #240]	; (80010c4 <HAL_RCC_OscConfig+0x27c>)
 8000fd2:	b172      	cbz	r2, 8000ff2 <HAL_RCC_OscConfig+0x1aa>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fd8:	f7ff f94a 	bl	8000270 <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fdc:	4d37      	ldr	r5, [pc, #220]	; (80010bc <HAL_RCC_OscConfig+0x274>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fde:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fe0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000fe2:	0798      	lsls	r0, r3, #30
 8000fe4:	d4ef      	bmi.n	8000fc6 <HAL_RCC_OscConfig+0x17e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fe6:	f7ff f943 	bl	8000270 <HAL_GetTick>
 8000fea:	1b80      	subs	r0, r0, r6
 8000fec:	2802      	cmp	r0, #2
 8000fee:	d9f7      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x198>
 8000ff0:	e77e      	b.n	8000ef0 <HAL_RCC_OscConfig+0xa8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ff2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ff4:	f7ff f93c 	bl	8000270 <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ff8:	4d30      	ldr	r5, [pc, #192]	; (80010bc <HAL_RCC_OscConfig+0x274>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ffa:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ffc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ffe:	0799      	lsls	r1, r3, #30
 8001000:	d5e1      	bpl.n	8000fc6 <HAL_RCC_OscConfig+0x17e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001002:	f7ff f935 	bl	8000270 <HAL_GetTick>
 8001006:	1b80      	subs	r0, r0, r6
 8001008:	2802      	cmp	r0, #2
 800100a:	d9f7      	bls.n	8000ffc <HAL_RCC_OscConfig+0x1b4>
 800100c:	e770      	b.n	8000ef0 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	4b2a      	ldr	r3, [pc, #168]	; (80010bc <HAL_RCC_OscConfig+0x274>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001014:	4d2c      	ldr	r5, [pc, #176]	; (80010c8 <HAL_RCC_OscConfig+0x280>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001018:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800101c:	641a      	str	r2, [r3, #64]	; 0x40
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001028:	682b      	ldr	r3, [r5, #0]
 800102a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102e:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001030:	f7ff f91e 	bl	8000270 <HAL_GetTick>
 8001034:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001036:	682b      	ldr	r3, [r5, #0]
 8001038:	05da      	lsls	r2, r3, #23
 800103a:	d513      	bpl.n	8001064 <HAL_RCC_OscConfig+0x21c>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800103c:	68a3      	ldr	r3, [r4, #8]
 800103e:	4d1f      	ldr	r5, [pc, #124]	; (80010bc <HAL_RCC_OscConfig+0x274>)
 8001040:	2b01      	cmp	r3, #1
 8001042:	d115      	bne.n	8001070 <HAL_RCC_OscConfig+0x228>
 8001044:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800104c:	f7ff f910 	bl	8000270 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001050:	4d1a      	ldr	r5, [pc, #104]	; (80010bc <HAL_RCC_OscConfig+0x274>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001052:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001054:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001058:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800105a:	079b      	lsls	r3, r3, #30
 800105c:	d519      	bpl.n	8001092 <HAL_RCC_OscConfig+0x24a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800105e:	69a2      	ldr	r2, [r4, #24]
 8001060:	bba2      	cbnz	r2, 80010cc <HAL_RCC_OscConfig+0x284>
 8001062:	e07b      	b.n	800115c <HAL_RCC_OscConfig+0x314>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001064:	f7ff f904 	bl	8000270 <HAL_GetTick>
 8001068:	1b80      	subs	r0, r0, r6
 800106a:	2802      	cmp	r0, #2
 800106c:	d9e3      	bls.n	8001036 <HAL_RCC_OscConfig+0x1ee>
 800106e:	e73f      	b.n	8000ef0 <HAL_RCC_OscConfig+0xa8>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001070:	2b05      	cmp	r3, #5
 8001072:	d104      	bne.n	800107e <HAL_RCC_OscConfig+0x236>
 8001074:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001076:	f043 0304 	orr.w	r3, r3, #4
 800107a:	672b      	str	r3, [r5, #112]	; 0x70
 800107c:	e7e2      	b.n	8001044 <HAL_RCC_OscConfig+0x1fc>
 800107e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001080:	f022 0201 	bic.w	r2, r2, #1
 8001084:	672a      	str	r2, [r5, #112]	; 0x70
 8001086:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001088:	f022 0204 	bic.w	r2, r2, #4
 800108c:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800108e:	b133      	cbz	r3, 800109e <HAL_RCC_OscConfig+0x256>
 8001090:	e7dc      	b.n	800104c <HAL_RCC_OscConfig+0x204>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001092:	f7ff f8ed 	bl	8000270 <HAL_GetTick>
 8001096:	1b80      	subs	r0, r0, r6
 8001098:	42b8      	cmp	r0, r7
 800109a:	d9dd      	bls.n	8001058 <HAL_RCC_OscConfig+0x210>
 800109c:	e728      	b.n	8000ef0 <HAL_RCC_OscConfig+0xa8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800109e:	f7ff f8e7 	bl	8000270 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010a2:	f241 3788 	movw	r7, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a6:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80010aa:	0798      	lsls	r0, r3, #30
 80010ac:	d5d7      	bpl.n	800105e <HAL_RCC_OscConfig+0x216>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010ae:	f7ff f8df 	bl	8000270 <HAL_GetTick>
 80010b2:	1b80      	subs	r0, r0, r6
 80010b4:	42b8      	cmp	r0, r7
 80010b6:	d9f7      	bls.n	80010a8 <HAL_RCC_OscConfig+0x260>
 80010b8:	e71a      	b.n	8000ef0 <HAL_RCC_OscConfig+0xa8>
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800
 80010c0:	42470000 	.word	0x42470000
 80010c4:	42470e80 	.word	0x42470e80
 80010c8:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80010cc:	4d32      	ldr	r5, [pc, #200]	; (8001198 <HAL_RCC_OscConfig+0x350>)
 80010ce:	68ab      	ldr	r3, [r5, #8]
 80010d0:	f003 030c 	and.w	r3, r3, #12
 80010d4:	2b08      	cmp	r3, #8
 80010d6:	f43f aedf 	beq.w	8000e98 <HAL_RCC_OscConfig+0x50>
 80010da:	4e30      	ldr	r6, [pc, #192]	; (800119c <HAL_RCC_OscConfig+0x354>)
 80010dc:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010de:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010e0:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010e2:	d14a      	bne.n	800117a <HAL_RCC_OscConfig+0x332>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e4:	f7ff f8c4 	bl	8000270 <HAL_GetTick>
 80010e8:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ea:	682b      	ldr	r3, [r5, #0]
 80010ec:	4f2a      	ldr	r7, [pc, #168]	; (8001198 <HAL_RCC_OscConfig+0x350>)
 80010ee:	0199      	lsls	r1, r3, #6
 80010f0:	d436      	bmi.n	8001160 <HAL_RCC_OscConfig+0x318>
 80010f2:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80010f6:	fa92 f2a2 	rbit	r2, r2
 80010fa:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010fe:	fab2 fc82 	clz	ip, r2
 8001102:	fa93 f3a3 	rbit	r3, r3
 8001106:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800110a:	fab3 fe83 	clz	lr, r3
 800110e:	fa91 f1a1 	rbit	r1, r1
 8001112:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001116:	fab1 f581 	clz	r5, r1
 800111a:	fa92 f2a2 	rbit	r2, r2
 800111e:	69e3      	ldr	r3, [r4, #28]
 8001120:	fab2 f082 	clz	r0, r2
 8001124:	6a22      	ldr	r2, [r4, #32]
 8001126:	ea43 0102 	orr.w	r1, r3, r2
 800112a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800112c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800112e:	fa02 f20c 	lsl.w	r2, r2, ip
 8001132:	4311      	orrs	r1, r2
 8001134:	085a      	lsrs	r2, r3, #1
 8001136:	3a01      	subs	r2, #1
 8001138:	fa02 f30e 	lsl.w	r3, r2, lr
 800113c:	430b      	orrs	r3, r1
 800113e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001140:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001142:	40a9      	lsls	r1, r5
 8001144:	430b      	orrs	r3, r1
 8001146:	4082      	lsls	r2, r0
 8001148:	4313      	orrs	r3, r2
 800114a:	607b      	str	r3, [r7, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800114c:	2301      	movs	r3, #1
 800114e:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001150:	f7ff f88e 	bl	8000270 <HAL_GetTick>
 8001154:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	019a      	lsls	r2, r3, #6
 800115a:	d508      	bpl.n	800116e <HAL_RCC_OscConfig+0x326>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800115c:	2000      	movs	r0, #0
 800115e:	e018      	b.n	8001192 <HAL_RCC_OscConfig+0x34a>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001160:	f7ff f886 	bl	8000270 <HAL_GetTick>
 8001164:	ebc8 0000 	rsb	r0, r8, r0
 8001168:	2802      	cmp	r0, #2
 800116a:	d9be      	bls.n	80010ea <HAL_RCC_OscConfig+0x2a2>
 800116c:	e6c0      	b.n	8000ef0 <HAL_RCC_OscConfig+0xa8>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800116e:	f7ff f87f 	bl	8000270 <HAL_GetTick>
 8001172:	1b00      	subs	r0, r0, r4
 8001174:	2802      	cmp	r0, #2
 8001176:	d9ee      	bls.n	8001156 <HAL_RCC_OscConfig+0x30e>
 8001178:	e6ba      	b.n	8000ef0 <HAL_RCC_OscConfig+0xa8>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800117a:	f7ff f879 	bl	8000270 <HAL_GetTick>
 800117e:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001180:	682b      	ldr	r3, [r5, #0]
 8001182:	019b      	lsls	r3, r3, #6
 8001184:	d5ea      	bpl.n	800115c <HAL_RCC_OscConfig+0x314>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001186:	f7ff f873 	bl	8000270 <HAL_GetTick>
 800118a:	1b00      	subs	r0, r0, r4
 800118c:	2802      	cmp	r0, #2
 800118e:	d9f7      	bls.n	8001180 <HAL_RCC_OscConfig+0x338>
 8001190:	e6ae      	b.n	8000ef0 <HAL_RCC_OscConfig+0xa8>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001192:	b002      	add	sp, #8
 8001194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001198:	40023800 	.word	0x40023800
 800119c:	42470060 	.word	0x42470060

080011a0 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011a0:	4930      	ldr	r1, [pc, #192]	; (8001264 <HAL_RCC_GetSysClockFreq+0xc4>)
 80011a2:	6888      	ldr	r0, [r1, #8]
 80011a4:	f000 000c 	and.w	r0, r0, #12
 80011a8:	2808      	cmp	r0, #8
 80011aa:	d008      	beq.n	80011be <HAL_RCC_GetSysClockFreq+0x1e>
 80011ac:	280c      	cmp	r0, #12
 80011ae:	d02f      	beq.n	8001210 <HAL_RCC_GetSysClockFreq+0x70>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011b0:	4a2d      	ldr	r2, [pc, #180]	; (8001268 <HAL_RCC_GetSysClockFreq+0xc8>)
 80011b2:	4b2e      	ldr	r3, [pc, #184]	; (800126c <HAL_RCC_GetSysClockFreq+0xcc>)
 80011b4:	2804      	cmp	r0, #4
 80011b6:	bf0c      	ite	eq
 80011b8:	4618      	moveq	r0, r3
 80011ba:	4610      	movne	r0, r2
 80011bc:	4770      	bx	lr
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011be:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011c0:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011c2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011c6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80011ca:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80011ce:	684b      	ldr	r3, [r1, #4]
 80011d0:	fa92 f2a2 	rbit	r2, r2
 80011d4:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80011d8:	fab2 f282 	clz	r2, r2
 80011dc:	ea01 0103 	and.w	r1, r1, r3
 80011e0:	fa21 f102 	lsr.w	r1, r1, r2
 80011e4:	bf14      	ite	ne
 80011e6:	4a21      	ldrne	r2, [pc, #132]	; (800126c <HAL_RCC_GetSysClockFreq+0xcc>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80011e8:	4a1f      	ldreq	r2, [pc, #124]	; (8001268 <HAL_RCC_GetSysClockFreq+0xc8>)
 80011ea:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80011ee:	4a1d      	ldr	r2, [pc, #116]	; (8001264 <HAL_RCC_GetSysClockFreq+0xc4>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80011f0:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80011f4:	6852      	ldr	r2, [r2, #4]
 80011f6:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80011fa:	fa90 f0a0 	rbit	r0, r0
 80011fe:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8001202:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8001206:	fa22 f000 	lsr.w	r0, r2, r0
 800120a:	3001      	adds	r0, #1
 800120c:	0040      	lsls	r0, r0, #1
 800120e:	e025      	b.n	800125c <HAL_RCC_GetSysClockFreq+0xbc>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001210:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001212:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001214:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001218:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800121c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001220:	684b      	ldr	r3, [r1, #4]
 8001222:	fa92 f2a2 	rbit	r2, r2
 8001226:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800122a:	fab2 f282 	clz	r2, r2
 800122e:	ea01 0103 	and.w	r1, r1, r3
 8001232:	fa21 f102 	lsr.w	r1, r1, r2
 8001236:	bf14      	ite	ne
 8001238:	4a0c      	ldrne	r2, [pc, #48]	; (800126c <HAL_RCC_GetSysClockFreq+0xcc>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800123a:	4a0b      	ldreq	r2, [pc, #44]	; (8001268 <HAL_RCC_GetSysClockFreq+0xc8>)
 800123c:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 8001240:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_RCC_GetSysClockFreq+0xc4>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001242:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 8001246:	6852      	ldr	r2, [r2, #4]
 8001248:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 800124c:	fa90 f0a0 	rbit	r0, r0
 8001250:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllr;
 8001254:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001258:	fa22 f000 	lsr.w	r0, r2, r0
 800125c:	fbb3 f0f0 	udiv	r0, r3, r0
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800
 8001268:	00f42400 	.word	0x00f42400
 800126c:	007a1200 	.word	0x007a1200

08001270 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001274:	9e06      	ldr	r6, [sp, #24]
 8001276:	4604      	mov	r4, r0
 8001278:	4688      	mov	r8, r1
 800127a:	4617      	mov	r7, r2
 800127c:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800127e:	6822      	ldr	r2, [r4, #0]
 8001280:	6893      	ldr	r3, [r2, #8]
 8001282:	ea38 0303 	bics.w	r3, r8, r3
 8001286:	bf0c      	ite	eq
 8001288:	2301      	moveq	r3, #1
 800128a:	2300      	movne	r3, #0
 800128c:	429f      	cmp	r7, r3
 800128e:	d033      	beq.n	80012f8 <SPI_WaitFlagStateUntilTimeout+0x88>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001290:	1c6b      	adds	r3, r5, #1
 8001292:	d0f5      	beq.n	8001280 <SPI_WaitFlagStateUntilTimeout+0x10>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001294:	b94d      	cbnz	r5, 80012aa <SPI_WaitFlagStateUntilTimeout+0x3a>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001296:	6823      	ldr	r3, [r4, #0]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800129e:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80012a0:	6862      	ldr	r2, [r4, #4]
 80012a2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80012a6:	d111      	bne.n	80012cc <SPI_WaitFlagStateUntilTimeout+0x5c>
 80012a8:	e005      	b.n	80012b6 <SPI_WaitFlagStateUntilTimeout+0x46>
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80012aa:	f7fe ffe1 	bl	8000270 <HAL_GetTick>
 80012ae:	1b80      	subs	r0, r0, r6
 80012b0:	4285      	cmp	r5, r0
 80012b2:	d8e4      	bhi.n	800127e <SPI_WaitFlagStateUntilTimeout+0xe>
 80012b4:	e7ef      	b.n	8001296 <SPI_WaitFlagStateUntilTimeout+0x26>
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80012b6:	68a2      	ldr	r2, [r4, #8]
 80012b8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80012bc:	d002      	beq.n	80012c4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80012be:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80012c2:	d103      	bne.n	80012cc <SPI_WaitFlagStateUntilTimeout+0x5c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80012cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80012ce:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80012d2:	d108      	bne.n	80012e6 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
 80012d4:	6819      	ldr	r1, [r3, #0]
 80012d6:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 80012da:	400a      	ands	r2, r1
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 80012e6:	2301      	movs	r3, #1
 80012e8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80012ec:	2300      	movs	r3, #0
 80012ee:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80012f2:	2003      	movs	r0, #3
 80012f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80012f8:	2000      	movs	r0, #0
}
 80012fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080012fe <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80012fe:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001300:	460b      	mov	r3, r1
 8001302:	9200      	str	r2, [sp, #0]
 8001304:	2180      	movs	r1, #128	; 0x80
 8001306:	2200      	movs	r2, #0
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001308:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800130a:	f7ff ffb1 	bl	8001270 <SPI_WaitFlagStateUntilTimeout>
 800130e:	b120      	cbz	r0, 800131a <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001310:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001312:	f043 0320 	orr.w	r3, r3, #32
 8001316:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8001318:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 800131a:	b002      	add	sp, #8
 800131c:	bd10      	pop	{r4, pc}

0800131e <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800131e:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001320:	4604      	mov	r4, r0
 8001322:	2800      	cmp	r0, #0
 8001324:	d036      	beq.n	8001394 <HAL_SPI_Init+0x76>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 800132a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800132e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001332:	b91b      	cbnz	r3, 800133c <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001334:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001338:	f000 fc30 	bl	8001b9c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800133c:	68a1      	ldr	r1, [r4, #8]
 800133e:	6860      	ldr	r0, [r4, #4]
 8001340:	4308      	orrs	r0, r1
 8001342:	68e1      	ldr	r1, [r4, #12]
 8001344:	4308      	orrs	r0, r1
 8001346:	6921      	ldr	r1, [r4, #16]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001348:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800134a:	4308      	orrs	r0, r1
 800134c:	6961      	ldr	r1, [r4, #20]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800134e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001352:	6823      	ldr	r3, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001354:	4308      	orrs	r0, r1
 8001356:	69e1      	ldr	r1, [r4, #28]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001358:	681a      	ldr	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800135a:	4308      	orrs	r0, r1
 800135c:	6a21      	ldr	r1, [r4, #32]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800135e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001362:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001364:	4308      	orrs	r0, r1
 8001366:	69a2      	ldr	r2, [r4, #24]
 8001368:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800136a:	4308      	orrs	r0, r1
 800136c:	f402 7100 	and.w	r1, r2, #512	; 0x200
 8001370:	4301      	orrs	r1, r0
 8001372:	6019      	str	r1, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001374:	0c12      	lsrs	r2, r2, #16
 8001376:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001378:	f002 0204 	and.w	r2, r2, #4
 800137c:	430a      	orrs	r2, r1
 800137e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001380:	69da      	ldr	r2, [r3, #28]
 8001382:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001386:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001388:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800138a:	2301      	movs	r3, #1
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800138c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800138e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8001392:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
    return HAL_ERROR;
 8001394:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
}
 8001396:	bd10      	pop	{r4, pc}

08001398 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001398:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800139c:	461e      	mov	r6, r3

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800139e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80013a2:	2b01      	cmp	r3, #1
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013a4:	4604      	mov	r4, r0
 80013a6:	460d      	mov	r5, r1
 80013a8:	4690      	mov	r8, r2

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80013aa:	f000 809e 	beq.w	80014ea <HAL_SPI_Transmit+0x152>
 80013ae:	2301      	movs	r3, #1
 80013b0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80013b4:	f7fe ff5c 	bl	8000270 <HAL_GetTick>
 80013b8:	4607      	mov	r7, r0

  if(hspi->State != HAL_SPI_STATE_READY)
 80013ba:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80013be:	b2c0      	uxtb	r0, r0
 80013c0:	2801      	cmp	r0, #1
 80013c2:	f040 808a 	bne.w	80014da <HAL_SPI_Transmit+0x142>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if((pData == NULL ) || (Size == 0U))
 80013c6:	2d00      	cmp	r5, #0
 80013c8:	f000 8088 	beq.w	80014dc <HAL_SPI_Transmit+0x144>
 80013cc:	f1b8 0f00 	cmp.w	r8, #0
 80013d0:	f000 8084 	beq.w	80014dc <HAL_SPI_Transmit+0x144>
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80013d4:	2303      	movs	r3, #3
 80013d6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80013da:	2300      	movs	r3, #0
 80013dc:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80013de:	63a3      	str	r3, [r4, #56]	; 0x38
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;
 80013e0:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
  hspi->RxXferSize  = 0U;
 80013e4:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80013e6:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80013e8:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80013ea:	6423      	str	r3, [r4, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80013ec:	68a3      	ldr	r3, [r4, #8]
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80013ee:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->RxXferCount = 0U;
  hspi->TxISR       = NULL;
  hspi->RxISR       = NULL;

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80013f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013f4:	6823      	ldr	r3, [r4, #0]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
 80013f6:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
  {
    SPI_1LINE_TX(hspi);
 80013fa:	bf02      	ittt	eq
 80013fc:	681a      	ldreq	r2, [r3, #0]
 80013fe:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8001402:	601a      	streq	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	0652      	lsls	r2, r2, #25
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001408:	bf5e      	ittt	pl
 800140a:	681a      	ldrpl	r2, [r3, #0]
 800140c:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8001410:	601a      	strpl	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001412:	68e2      	ldr	r2, [r4, #12]
 8001414:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001418:	6862      	ldr	r2, [r4, #4]
 800141a:	d11e      	bne.n	800145a <HAL_SPI_Transmit+0xc2>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 800141c:	b172      	cbz	r2, 800143c <HAL_SPI_Transmit+0xa4>
 800141e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001420:	b292      	uxth	r2, r2
 8001422:	2a01      	cmp	r2, #1
 8001424:	d103      	bne.n	800142e <HAL_SPI_Transmit+0x96>
 8001426:	e009      	b.n	800143c <HAL_SPI_Transmit+0xa4>
          hspi->TxXferCount--;
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001428:	b1ae      	cbz	r6, 8001456 <HAL_SPI_Transmit+0xbe>
 800142a:	1c71      	adds	r1, r6, #1
 800142c:	d10e      	bne.n	800144c <HAL_SPI_Transmit+0xb4>
      hspi->Instance->DR = *((uint16_t *)pData);
      pData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800142e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001430:	b29b      	uxth	r3, r3
 8001432:	b1d3      	cbz	r3, 800146a <HAL_SPI_Transmit+0xd2>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001434:	6823      	ldr	r3, [r4, #0]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	0790      	lsls	r0, r2, #30
 800143a:	d5f5      	bpl.n	8001428 <HAL_SPI_Transmit+0x90>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 800143c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001440:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
          hspi->TxXferCount--;
 8001442:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001444:	3b01      	subs	r3, #1
 8001446:	b29b      	uxth	r3, r3
 8001448:	86e3      	strh	r3, [r4, #54]	; 0x36
 800144a:	e7f0      	b.n	800142e <HAL_SPI_Transmit+0x96>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800144c:	f7fe ff10 	bl	8000270 <HAL_GetTick>
 8001450:	1bc0      	subs	r0, r0, r7
 8001452:	4286      	cmp	r6, r0
 8001454:	d8eb      	bhi.n	800142e <HAL_SPI_Transmit+0x96>
        {
          errorcode = HAL_TIMEOUT;
 8001456:	2003      	movs	r0, #3
 8001458:	e040      	b.n	80014dc <HAL_SPI_Transmit+0x144>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 800145a:	b1a2      	cbz	r2, 8001486 <HAL_SPI_Transmit+0xee>
 800145c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800145e:	b292      	uxth	r2, r2
 8001460:	2a01      	cmp	r2, #1
 8001462:	d010      	beq.n	8001486 <HAL_SPI_Transmit+0xee>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
      pData += sizeof(uint8_t);
      hspi->TxXferCount--;
    }
    while (hspi->TxXferCount > 0U)
 8001464:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001466:	b29b      	uxth	r3, r3
 8001468:	b94b      	cbnz	r3, 800147e <HAL_SPI_Transmit+0xe6>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800146a:	9700      	str	r7, [sp, #0]
 800146c:	4633      	mov	r3, r6
 800146e:	2201      	movs	r2, #1
 8001470:	2102      	movs	r1, #2
 8001472:	4620      	mov	r0, r4
 8001474:	f7ff fefc 	bl	8001270 <SPI_WaitFlagStateUntilTimeout>
 8001478:	2800      	cmp	r0, #0
 800147a:	d1ec      	bne.n	8001456 <HAL_SPI_Transmit+0xbe>
 800147c:	e015      	b.n	80014aa <HAL_SPI_Transmit+0x112>
      hspi->TxXferCount--;
    }
    while (hspi->TxXferCount > 0U)
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800147e:	6823      	ldr	r3, [r4, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	0792      	lsls	r2, r2, #30
 8001484:	d507      	bpl.n	8001496 <HAL_SPI_Transmit+0xfe>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8001486:	f815 2b01 	ldrb.w	r2, [r5], #1
 800148a:	731a      	strb	r2, [r3, #12]
        pData += sizeof(uint8_t);
        hspi->TxXferCount--;
 800148c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800148e:	3b01      	subs	r3, #1
 8001490:	b29b      	uxth	r3, r3
 8001492:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001494:	e7e6      	b.n	8001464 <HAL_SPI_Transmit+0xcc>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001496:	2e00      	cmp	r6, #0
 8001498:	d0dd      	beq.n	8001456 <HAL_SPI_Transmit+0xbe>
 800149a:	1c73      	adds	r3, r6, #1
 800149c:	d0e2      	beq.n	8001464 <HAL_SPI_Transmit+0xcc>
 800149e:	f7fe fee7 	bl	8000270 <HAL_GetTick>
 80014a2:	1bc0      	subs	r0, r0, r7
 80014a4:	4286      	cmp	r6, r0
 80014a6:	d8dd      	bhi.n	8001464 <HAL_SPI_Transmit+0xcc>
 80014a8:	e7d5      	b.n	8001456 <HAL_SPI_Transmit+0xbe>
    errorcode = HAL_TIMEOUT;
    goto error;
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80014aa:	463a      	mov	r2, r7
 80014ac:	4631      	mov	r1, r6
 80014ae:	4620      	mov	r0, r4
 80014b0:	f7ff ff25 	bl	80012fe <SPI_CheckFlag_BSY>
 80014b4:	b118      	cbz	r0, 80014be <HAL_SPI_Transmit+0x126>
  {
    errorcode = HAL_ERROR;
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80014b6:	2320      	movs	r3, #32
 80014b8:	6563      	str	r3, [r4, #84]	; 0x54
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
  {
    errorcode = HAL_ERROR;
 80014ba:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
    goto error;
 80014bc:	e00e      	b.n	80014dc <HAL_SPI_Transmit+0x144>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80014be:	68a3      	ldr	r3, [r4, #8]
 80014c0:	b933      	cbnz	r3, 80014d0 <HAL_SPI_Transmit+0x138>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80014c2:	9303      	str	r3, [sp, #12]
 80014c4:	6823      	ldr	r3, [r4, #0]
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	9203      	str	r2, [sp, #12]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	9303      	str	r3, [sp, #12]
 80014ce:	9b03      	ldr	r3, [sp, #12]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80014d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();

  if(hspi->State != HAL_SPI_STATE_READY)
  {
    errorcode = HAL_BUSY;
 80014d2:	3000      	adds	r0, #0
 80014d4:	bf18      	it	ne
 80014d6:	2001      	movne	r0, #1
 80014d8:	e000      	b.n	80014dc <HAL_SPI_Transmit+0x144>
 80014da:	2002      	movs	r0, #2
  {
    errorcode = HAL_ERROR;
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 80014dc:	2301      	movs	r3, #1
 80014de:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80014e2:	2300      	movs	r3, #0
 80014e4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 80014e8:	e000      	b.n	80014ec <HAL_SPI_Transmit+0x154>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80014ea:	2002      	movs	r0, #2
error:
  hspi->State = HAL_SPI_STATE_READY;
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
  return errorcode;
}
 80014ec:	b004      	add	sp, #16
 80014ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080014f4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80014f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80014f8:	6807      	ldr	r7, [r0, #0]
 80014fa:	693b      	ldr	r3, [r7, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80014fc:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80014fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001502:	68c3      	ldr	r3, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001504:	68a1      	ldr	r1, [r4, #8]
 8001506:	69c0      	ldr	r0, [r0, #28]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001508:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800150a:	6922      	ldr	r2, [r4, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800150c:	613b      	str	r3, [r7, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800150e:	68fb      	ldr	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001510:	4311      	orrs	r1, r2
 8001512:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001514:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001518:	430a      	orrs	r2, r1
 800151a:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800151c:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001520:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001522:	60fb      	str	r3, [r7, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001524:	697b      	ldr	r3, [r7, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001526:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800152a:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800152c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001530:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	4b7c      	ldr	r3, [pc, #496]	; (8001728 <UART_SetConfig+0x234>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001538:	d17c      	bne.n	8001634 <UART_SetConfig+0x140>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800153a:	429f      	cmp	r7, r3
 800153c:	d003      	beq.n	8001546 <UART_SetConfig+0x52>
 800153e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001542:	429f      	cmp	r7, r3
 8001544:	d131      	bne.n	80015aa <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001546:	f7ff fc67 	bl	8000e18 <HAL_RCC_GetPCLK2Freq>
 800154a:	6863      	ldr	r3, [r4, #4]
 800154c:	2519      	movs	r5, #25
 800154e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001552:	4368      	muls	r0, r5
 8001554:	fbb0 f8f8 	udiv	r8, r0, r8
 8001558:	f7ff fc5e 	bl	8000e18 <HAL_RCC_GetPCLK2Freq>
 800155c:	6866      	ldr	r6, [r4, #4]
 800155e:	4368      	muls	r0, r5
 8001560:	0076      	lsls	r6, r6, #1
 8001562:	fbb0 f6f6 	udiv	r6, r0, r6
 8001566:	f7ff fc57 	bl	8000e18 <HAL_RCC_GetPCLK2Freq>
 800156a:	6863      	ldr	r3, [r4, #4]
 800156c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4368      	muls	r0, r5
 8001574:	fbb0 f0f3 	udiv	r0, r0, r3
 8001578:	fbb0 f0f9 	udiv	r0, r0, r9
 800157c:	fb09 6610 	mls	r6, r9, r0, r6
 8001580:	f7ff fc4a 	bl	8000e18 <HAL_RCC_GetPCLK2Freq>
 8001584:	fbb8 f8f9 	udiv	r8, r8, r9
 8001588:	6861      	ldr	r1, [r4, #4]
 800158a:	00f6      	lsls	r6, r6, #3
 800158c:	3632      	adds	r6, #50	; 0x32
 800158e:	fbb6 f6f9 	udiv	r6, r6, r9
 8001592:	0076      	lsls	r6, r6, #1
 8001594:	4368      	muls	r0, r5
 8001596:	0049      	lsls	r1, r1, #1
 8001598:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800159c:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 80015a0:	fbb0 faf1 	udiv	sl, r0, r1
 80015a4:	f7ff fc38 	bl	8000e18 <HAL_RCC_GetPCLK2Freq>
 80015a8:	e030      	b.n	800160c <UART_SetConfig+0x118>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80015aa:	f7ff fc1d 	bl	8000de8 <HAL_RCC_GetPCLK1Freq>
 80015ae:	6863      	ldr	r3, [r4, #4]
 80015b0:	2519      	movs	r5, #25
 80015b2:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80015b6:	4368      	muls	r0, r5
 80015b8:	fbb0 f8f8 	udiv	r8, r0, r8
 80015bc:	f7ff fc14 	bl	8000de8 <HAL_RCC_GetPCLK1Freq>
 80015c0:	6866      	ldr	r6, [r4, #4]
 80015c2:	4368      	muls	r0, r5
 80015c4:	0076      	lsls	r6, r6, #1
 80015c6:	fbb0 f6f6 	udiv	r6, r0, r6
 80015ca:	f7ff fc0d 	bl	8000de8 <HAL_RCC_GetPCLK1Freq>
 80015ce:	6863      	ldr	r3, [r4, #4]
 80015d0:	f04f 0964 	mov.w	r9, #100	; 0x64
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4368      	muls	r0, r5
 80015d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80015dc:	fbb0 f0f9 	udiv	r0, r0, r9
 80015e0:	fb09 6610 	mls	r6, r9, r0, r6
 80015e4:	f7ff fc00 	bl	8000de8 <HAL_RCC_GetPCLK1Freq>
 80015e8:	fbb8 f8f9 	udiv	r8, r8, r9
 80015ec:	00f6      	lsls	r6, r6, #3
 80015ee:	6861      	ldr	r1, [r4, #4]
 80015f0:	3632      	adds	r6, #50	; 0x32
 80015f2:	fbb6 f6f9 	udiv	r6, r6, r9
 80015f6:	0076      	lsls	r6, r6, #1
 80015f8:	4368      	muls	r0, r5
 80015fa:	0049      	lsls	r1, r1, #1
 80015fc:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001600:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8001604:	fbb0 faf1 	udiv	sl, r0, r1
 8001608:	f7ff fbee 	bl	8000de8 <HAL_RCC_GetPCLK1Freq>
 800160c:	4345      	muls	r5, r0
 800160e:	6860      	ldr	r0, [r4, #4]
 8001610:	0040      	lsls	r0, r0, #1
 8001612:	fbb5 f0f0 	udiv	r0, r5, r0
 8001616:	fbb0 f0f9 	udiv	r0, r0, r9
 800161a:	fb09 a210 	mls	r2, r9, r0, sl
 800161e:	00d2      	lsls	r2, r2, #3
 8001620:	3232      	adds	r2, #50	; 0x32
 8001622:	fbb2 f3f9 	udiv	r3, r2, r9
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	4443      	add	r3, r8
 800162c:	441e      	add	r6, r3
 800162e:	60be      	str	r6, [r7, #8]
 8001630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001634:	429f      	cmp	r7, r3
 8001636:	d002      	beq.n	800163e <UART_SetConfig+0x14a>
 8001638:	4b3c      	ldr	r3, [pc, #240]	; (800172c <UART_SetConfig+0x238>)
 800163a:	429f      	cmp	r7, r3
 800163c:	d130      	bne.n	80016a0 <UART_SetConfig+0x1ac>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800163e:	f7ff fbeb 	bl	8000e18 <HAL_RCC_GetPCLK2Freq>
 8001642:	6863      	ldr	r3, [r4, #4]
 8001644:	2519      	movs	r5, #25
 8001646:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800164a:	4368      	muls	r0, r5
 800164c:	fbb0 f8f8 	udiv	r8, r0, r8
 8001650:	f7ff fbe2 	bl	8000e18 <HAL_RCC_GetPCLK2Freq>
 8001654:	6866      	ldr	r6, [r4, #4]
 8001656:	4368      	muls	r0, r5
 8001658:	00b6      	lsls	r6, r6, #2
 800165a:	fbb0 f6f6 	udiv	r6, r0, r6
 800165e:	f7ff fbdb 	bl	8000e18 <HAL_RCC_GetPCLK2Freq>
 8001662:	6863      	ldr	r3, [r4, #4]
 8001664:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4368      	muls	r0, r5
 800166c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001670:	fbb0 f0f9 	udiv	r0, r0, r9
 8001674:	fb09 6610 	mls	r6, r9, r0, r6
 8001678:	f7ff fbce 	bl	8000e18 <HAL_RCC_GetPCLK2Freq>
 800167c:	fbb8 f8f9 	udiv	r8, r8, r9
 8001680:	6861      	ldr	r1, [r4, #4]
 8001682:	0136      	lsls	r6, r6, #4
 8001684:	4368      	muls	r0, r5
 8001686:	0089      	lsls	r1, r1, #2
 8001688:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800168c:	3632      	adds	r6, #50	; 0x32
 800168e:	fbb0 faf1 	udiv	sl, r0, r1
 8001692:	fbb6 f6f9 	udiv	r6, r6, r9
 8001696:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 800169a:	f7ff fbbd 	bl	8000e18 <HAL_RCC_GetPCLK2Freq>
 800169e:	e02f      	b.n	8001700 <UART_SetConfig+0x20c>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80016a0:	f7ff fba2 	bl	8000de8 <HAL_RCC_GetPCLK1Freq>
 80016a4:	6863      	ldr	r3, [r4, #4]
 80016a6:	2519      	movs	r5, #25
 80016a8:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80016ac:	4368      	muls	r0, r5
 80016ae:	fbb0 f8f8 	udiv	r8, r0, r8
 80016b2:	f7ff fb99 	bl	8000de8 <HAL_RCC_GetPCLK1Freq>
 80016b6:	6866      	ldr	r6, [r4, #4]
 80016b8:	4368      	muls	r0, r5
 80016ba:	00b6      	lsls	r6, r6, #2
 80016bc:	fbb0 f6f6 	udiv	r6, r0, r6
 80016c0:	f7ff fb92 	bl	8000de8 <HAL_RCC_GetPCLK1Freq>
 80016c4:	6863      	ldr	r3, [r4, #4]
 80016c6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4368      	muls	r0, r5
 80016ce:	fbb0 f0f3 	udiv	r0, r0, r3
 80016d2:	fbb0 f0f9 	udiv	r0, r0, r9
 80016d6:	fb09 6610 	mls	r6, r9, r0, r6
 80016da:	f7ff fb85 	bl	8000de8 <HAL_RCC_GetPCLK1Freq>
 80016de:	fbb8 f8f9 	udiv	r8, r8, r9
 80016e2:	6861      	ldr	r1, [r4, #4]
 80016e4:	0136      	lsls	r6, r6, #4
 80016e6:	3632      	adds	r6, #50	; 0x32
 80016e8:	4368      	muls	r0, r5
 80016ea:	fbb6 f6f9 	udiv	r6, r6, r9
 80016ee:	0089      	lsls	r1, r1, #2
 80016f0:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80016f4:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 80016f8:	fbb0 faf1 	udiv	sl, r0, r1
 80016fc:	f7ff fb74 	bl	8000de8 <HAL_RCC_GetPCLK1Freq>
 8001700:	4345      	muls	r5, r0
 8001702:	6860      	ldr	r0, [r4, #4]
 8001704:	0080      	lsls	r0, r0, #2
 8001706:	fbb5 f0f0 	udiv	r0, r5, r0
 800170a:	fbb0 f0f9 	udiv	r0, r0, r9
 800170e:	fb09 a210 	mls	r2, r9, r0, sl
 8001712:	0112      	lsls	r2, r2, #4
 8001714:	3232      	adds	r2, #50	; 0x32
 8001716:	fbb2 f3f9 	udiv	r3, r2, r9
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	4433      	add	r3, r6
 8001720:	4443      	add	r3, r8
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001728:	40011000 	.word	0x40011000
 800172c:	40011400 	.word	0x40011400

08001730 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001730:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001732:	4604      	mov	r4, r0
 8001734:	b340      	cbz	r0, 8001788 <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001736:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800173a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800173e:	b91b      	cbnz	r3, 8001748 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001740:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001744:	f000 fa5e 	bl	8001c04 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001748:	6822      	ldr	r2, [r4, #0]
    huart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800174a:	2324      	movs	r3, #36	; 0x24
 800174c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001750:	68d3      	ldr	r3, [r2, #12]
 8001752:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001756:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001758:	4620      	mov	r0, r4
 800175a:	f7ff fecb 	bl	80014f4 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800175e:	6823      	ldr	r3, [r4, #0]
 8001760:	691a      	ldr	r2, [r3, #16]
 8001762:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001766:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001768:	695a      	ldr	r2, [r3, #20]
 800176a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800176e:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001776:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001778:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800177a:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800177c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800177e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001782:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 8001786:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8001788:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 800178a:	bd10      	pop	{r4, pc}

0800178c <writeLed>:
}
*/



void writeLed() {
 800178c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001790:	4818      	ldr	r0, [pc, #96]	; (80017f4 <writeLed+0x68>)
 8001792:	af00      	add	r7, sp, #0
	uint16_t res = 500;

	uint8_t temp[COLOR_COUNT * 8 +res];
 8001794:	f5ad 6d90 	sub.w	sp, sp, #1152	; 0x480
 8001798:	4669      	mov	r1, sp
 800179a:	466a      	mov	r2, sp
 800179c:	ada2      	add	r5, sp, #648	; 0x288
	uint16_t i, j, k ;
	for (i = 0; i < COLOR_COUNT; i++) {

		for (j = 0; j < 8; j++) {
			if ((colors[i] & (128 >> j)) != 0) {
 800179e:	2680      	movs	r6, #128	; 0x80
				temp[i * 8 + j] = 0b11111000;
			} else
				temp[i * 8 + j] = 0b11000000;
 80017a0:	f04f 0ec0 	mov.w	lr, #192	; 0xc0
	uint16_t i, j, k ;
	for (i = 0; i < COLOR_COUNT; i++) {

		for (j = 0; j < 8; j++) {
			if ((colors[i] & (128 >> j)) != 0) {
				temp[i * 8 + j] = 0b11111000;
 80017a4:	f04f 0cf8 	mov.w	ip, #248	; 0xf8
	uint8_t temp[COLOR_COUNT * 8 +res];
	uint16_t i, j, k ;
	for (i = 0; i < COLOR_COUNT; i++) {

		for (j = 0; j < 8; j++) {
			if ((colors[i] & (128 >> j)) != 0) {
 80017a8:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80017ac:	2300      	movs	r3, #0
 80017ae:	fa46 f803 	asr.w	r8, r6, r3
 80017b2:	ea18 0f04 	tst.w	r8, r4
				temp[i * 8 + j] = 0b11111000;
 80017b6:	bf14      	ite	ne
 80017b8:	f802 c003 	strbne.w	ip, [r2, r3]
			} else
				temp[i * 8 + j] = 0b11000000;
 80017bc:	f802 e003 	strbeq.w	lr, [r2, r3]
 80017c0:	3301      	adds	r3, #1

	uint8_t temp[COLOR_COUNT * 8 +res];
	uint16_t i, j, k ;
	for (i = 0; i < COLOR_COUNT; i++) {

		for (j = 0; j < 8; j++) {
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d1f3      	bne.n	80017ae <writeLed+0x22>
 80017c6:	3208      	adds	r2, #8
void writeLed() {
	uint16_t res = 500;

	uint8_t temp[COLOR_COUNT * 8 +res];
	uint16_t i, j, k ;
	for (i = 0; i < COLOR_COUNT; i++) {
 80017c8:	42aa      	cmp	r2, r5
 80017ca:	d1ed      	bne.n	80017a8 <writeLed+0x1c>
 80017cc:	f201 2387 	addw	r3, r1, #647	; 0x287
 80017d0:	f201 427b 	addw	r2, r1, #1147	; 0x47b
				temp[i * 8 + j] = 0b11000000;
		}
	}

for(k=COLOR_COUNT*8 ; k<COLOR_COUNT*8 +res; k++){
	temp[k]=0b00000000;
 80017d4:	2000      	movs	r0, #0
			} else
				temp[i * 8 + j] = 0b11000000;
		}
	}

for(k=COLOR_COUNT*8 ; k<COLOR_COUNT*8 +res; k++){
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d002      	beq.n	80017e0 <writeLed+0x54>
	temp[k]=0b00000000;
 80017da:	f803 0f01 	strb.w	r0, [r3, #1]!
 80017de:	e7fa      	b.n	80017d6 <writeLed+0x4a>
}

	HAL_SPI_Transmit(&hspi2,temp,COLOR_COUNT*8+res,COLOR_COUNT*8*1000000);
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <writeLed+0x6c>)
 80017e2:	4806      	ldr	r0, [pc, #24]	; (80017fc <writeLed+0x70>)
 80017e4:	f240 427c 	movw	r2, #1148	; 0x47c
 80017e8:	f7ff fdd6 	bl	8001398 <HAL_SPI_Transmit>


}
 80017ec:	46bd      	mov	sp, r7
 80017ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017f2:	bf00      	nop
 80017f4:	2000001f 	.word	0x2000001f
 80017f8:	269fb200 	.word	0x269fb200
 80017fc:	200000ac 	.word	0x200000ac

08001800 <setColor>:

}


void setColor(uint8_t g, uint8_t r, uint8_t b)
{
 8001800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001802:	4d0c      	ldr	r5, [pc, #48]	; (8001834 <setColor+0x34>)
 8001804:	2600      	movs	r6, #0
	uint8_t t;
	  for(t = 0; t < COLOR_COUNT; t++)
	  {
		  if(t%3 == 0)
 8001806:	2703      	movs	r7, #3
 8001808:	b2f4      	uxtb	r4, r6
 800180a:	fbb4 f3f7 	udiv	r3, r4, r7
 800180e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001812:	1ae3      	subs	r3, r4, r3
 8001814:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8001818:	d101      	bne.n	800181e <setColor+0x1e>
		  {
			  colors[t] = g;
 800181a:	7028      	strb	r0, [r5, #0]
 800181c:	e003      	b.n	8001826 <setColor+0x26>
		  }
		  if(t%3 == 1)
 800181e:	2b01      	cmp	r3, #1
		  {
			  colors[t] = r;
 8001820:	bf0c      	ite	eq
 8001822:	7029      	strbeq	r1, [r5, #0]
		  }
		  if(t%3 == 2)
		  {
			  colors[t] = b;
 8001824:	702a      	strbne	r2, [r5, #0]
 8001826:	3601      	adds	r6, #1


void setColor(uint8_t g, uint8_t r, uint8_t b)
{
	uint8_t t;
	  for(t = 0; t < COLOR_COUNT; t++)
 8001828:	2e51      	cmp	r6, #81	; 0x51
 800182a:	f105 0501 	add.w	r5, r5, #1
 800182e:	d1eb      	bne.n	8001808 <setColor+0x8>
		  {
			  colors[t] = b;
		  }
	  }

}
 8001830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001832:	bf00      	nop
 8001834:	20000020 	.word	0x20000020

08001838 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001838:	b530      	push	{r4, r5, lr}
 800183a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800183c:	2200      	movs	r2, #0
 800183e:	4b27      	ldr	r3, [pc, #156]	; (80018dc <SystemClock_Config+0xa4>)
 8001840:	9200      	str	r2, [sp, #0]
 8001842:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001844:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001848:	6419      	str	r1, [r3, #64]	; 0x40
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800184c:	4924      	ldr	r1, [pc, #144]	; (80018e0 <SystemClock_Config+0xa8>)
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001856:	9201      	str	r2, [sp, #4]
 8001858:	680b      	ldr	r3, [r1, #0]
 800185a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800185e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001862:	600b      	str	r3, [r1, #0]
 8001864:	680b      	ldr	r3, [r1, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001866:	920e      	str	r2, [sp, #56]	; 0x38

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001868:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800186c:	9301      	str	r3, [sp, #4]
 800186e:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001870:	2310      	movs	r3, #16
 8001872:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001874:	2308      	movs	r3, #8

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001876:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001878:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 800187a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 52;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800187c:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 52;
 800187e:	2334      	movs	r3, #52	; 0x34

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001880:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001882:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001884:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 52;
 8001886:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001888:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800188a:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800188c:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800188e:	f7ff fadb 	bl	8000e48 <HAL_RCC_OscConfig>
 8001892:	b100      	cbz	r0, 8001896 <SystemClock_Config+0x5e>
 8001894:	e7fe      	b.n	8001894 <SystemClock_Config+0x5c>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001896:	230f      	movs	r3, #15
 8001898:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800189a:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800189c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018a0:	9006      	str	r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018a2:	4629      	mov	r1, r5
 80018a4:	a802      	add	r0, sp, #8

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a6:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018a8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018aa:	f7ff f9e3 	bl	8000c74 <HAL_RCC_ClockConfig>
 80018ae:	4604      	mov	r4, r0
 80018b0:	b100      	cbz	r0, 80018b4 <SystemClock_Config+0x7c>
 80018b2:	e7fe      	b.n	80018b2 <SystemClock_Config+0x7a>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80018b4:	f7ff fa92 	bl	8000ddc <HAL_RCC_GetHCLKFreq>
 80018b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80018c0:	f7fe ff44 	bl	800074c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80018c4:	2004      	movs	r0, #4
 80018c6:	f7fe ff57 	bl	8000778 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80018ca:	4622      	mov	r2, r4
 80018cc:	4621      	mov	r1, r4
 80018ce:	f04f 30ff 	mov.w	r0, #4294967295
 80018d2:	f7fe fefb 	bl	80006cc <HAL_NVIC_SetPriority>
}
 80018d6:	b015      	add	sp, #84	; 0x54
 80018d8:	bd30      	pop	{r4, r5, pc}
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40007000 	.word	0x40007000

080018e4 <main>:
}

/* USER CODE END 0 */

int main(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	; 0x28
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e8:	2400      	movs	r4, #0
 80018ea:	4d64      	ldr	r5, [pc, #400]	; (8001a7c <main+0x198>)
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ec:	f7fe fc9e 	bl	800022c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80018f0:	f7ff ffa2 	bl	8001838 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f4:	9401      	str	r4, [sp, #4]
 80018f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018f8:	4861      	ldr	r0, [pc, #388]	; (8001a80 <main+0x19c>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fa:	f043 0304 	orr.w	r3, r3, #4
 80018fe:	632b      	str	r3, [r5, #48]	; 0x30
 8001900:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800190a:	9402      	str	r4, [sp, #8]
 800190c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800190e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001912:	632b      	str	r3, [r5, #48]	; 0x30
 8001914:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191a:	9302      	str	r3, [sp, #8]
 800191c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	9403      	str	r4, [sp, #12]
 8001920:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	632b      	str	r3, [r5, #48]	; 0x30
 8001928:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	9303      	str	r3, [sp, #12]
 8001930:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001932:	9404      	str	r4, [sp, #16]
 8001934:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001936:	f043 0302 	orr.w	r3, r3, #2
 800193a:	632b      	str	r3, [r5, #48]	; 0x30
 800193c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800193e:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001942:	4622      	mov	r2, r4

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001944:	9304      	str	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001946:	2120      	movs	r1, #32

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001948:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800194a:	f7ff f98b 	bl	8000c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800194e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001952:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001954:	a905      	add	r1, sp, #20
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001956:	4b4b      	ldr	r3, [pc, #300]	; (8001a84 <main+0x1a0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001958:	484b      	ldr	r0, [pc, #300]	; (8001a88 <main+0x1a4>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800195a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800195e:	f7ff f8a7 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001968:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	a905      	add	r1, sp, #20
  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800196c:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	4844      	ldr	r0, [pc, #272]	; (8001a80 <main+0x19c>)
  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001970:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001972:	270c      	movs	r7, #12
 8001974:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197c:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197e:	f7ff f897 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001982:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001984:	a905      	add	r1, sp, #20
 8001986:	483e      	ldr	r0, [pc, #248]	; (8001a80 <main+0x19c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001988:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198a:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001990:	f7ff f88e 	bl	8000ab0 <HAL_GPIO_Init>
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001994:	9400      	str	r4, [sp, #0]
 8001996:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001998:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800199c:	632b      	str	r3, [r5, #48]	; 0x30
 800199e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80019a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a4:	9300      	str	r3, [sp, #0]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80019a6:	4622      	mov	r2, r4
 80019a8:	4621      	mov	r1, r4
 80019aa:	2038      	movs	r0, #56	; 0x38
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019ac:	9b00      	ldr	r3, [sp, #0]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80019ae:	f7fe fe8d 	bl	80006cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80019b2:	2038      	movs	r0, #56	; 0x38
 80019b4:	f7fe febe 	bl	8000734 <HAL_NVIC_EnableIRQ>

/* SPI2 init function */
static void MX_SPI2_Init(void)
{

  hspi2.Instance = SPI2;
 80019b8:	4834      	ldr	r0, [pc, #208]	; (8001a8c <main+0x1a8>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019ba:	4b35      	ldr	r3, [pc, #212]	; (8001a90 <main+0x1ac>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019bc:	6084      	str	r4, [r0, #8]
/* SPI2 init function */
static void MX_SPI2_Init(void)
{

  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019be:	f44f 7582 	mov.w	r5, #260	; 0x104
 80019c2:	e880 0028 	stmia.w	r0, {r3, r5}
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ca:	6183      	str	r3, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 10;
 80019cc:	250a      	movs	r5, #10
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80019ce:	2308      	movs	r3, #8
{

  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019d0:	60c4      	str	r4, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80019d2:	f8c0 8010 	str.w	r8, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019d6:	6144      	str	r4, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80019d8:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019da:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019dc:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019de:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80019e0:	62c5      	str	r5, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019e2:	f7ff fc9c 	bl	800131e <HAL_SPI_Init>
 80019e6:	b100      	cbz	r0, 80019ea <main+0x106>
 80019e8:	e7fe      	b.n	80019e8 <main+0x104>

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 80019ea:	4c2a      	ldr	r4, [pc, #168]	; (8001a94 <main+0x1b0>)
 80019ec:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <main+0x1b4>)
 80019ee:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019f0:	6060      	str	r0, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019f2:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019f4:	6220      	str	r0, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019f6:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019f8:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <main+0x1b8>)
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019fa:	60e0      	str	r0, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019fc:	4620      	mov	r0, r4
    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
 80019fe:	6126      	str	r6, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a00:	61a6      	str	r6, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a02:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8001a04:	61e6      	str	r6, [r4, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001a06:	6326      	str	r6, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a08:	6166      	str	r6, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a0a:	f7fe fc45 	bl	8000298 <HAL_ADC_Init>
 8001a0e:	b100      	cbz	r0, 8001a12 <main+0x12e>
 8001a10:	e7fe      	b.n	8001a10 <main+0x12c>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_10;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a12:	9007      	str	r0, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a14:	a905      	add	r1, sp, #20
 8001a16:	4620      	mov	r0, r4
    Error_Handler();
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_10;
 8001a18:	9505      	str	r5, [sp, #20]
  sConfig.Rank = 1;
 8001a1a:	9606      	str	r6, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a1c:	f7fe fdaa 	bl	8000574 <HAL_ADC_ConfigChannel>
 8001a20:	b100      	cbz	r0, 8001a24 <main+0x140>
 8001a22:	e7fe      	b.n	8001a22 <main+0x13e>

/* UART4 init function */
static void MX_UART4_Init(void)
{

  huart4.Instance = UART4;
 8001a24:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <main+0x1bc>)
  huart4.Init.BaudRate = 250000;
 8001a26:	491f      	ldr	r1, [pc, #124]	; (8001aa4 <main+0x1c0>)
 8001a28:	4a1f      	ldr	r2, [pc, #124]	; (8001aa8 <main+0x1c4>)
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2a:	6098      	str	r0, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a2c:	60d8      	str	r0, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a2e:	6118      	str	r0, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a30:	6198      	str	r0, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a32:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a34:	4618      	mov	r0, r3
/* UART4 init function */
static void MX_UART4_Init(void)
{

  huart4.Instance = UART4;
  huart4.Init.BaudRate = 250000;
 8001a36:	e883 0006 	stmia.w	r3, {r1, r2}
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a3a:	615f      	str	r7, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a3c:	f7ff fe78 	bl	8001730 <HAL_UART_Init>
 8001a40:	4605      	mov	r5, r0
 8001a42:	b100      	cbz	r0, 8001a46 <main+0x162>
 8001a44:	e7fe      	b.n	8001a44 <main+0x160>
  MX_ADC1_Init();
  MX_UART4_Init();

  /* USER CODE BEGIN 2 */

  	   HAL_ADC_Start_DMA(&hadc1, adcValue, 1024);
 8001a46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a4a:	4918      	ldr	r1, [pc, #96]	; (8001aac <main+0x1c8>)
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	f7fe fccd 	bl	80003ec <HAL_ADC_Start_DMA>

  	  setColor(0,0,0);
 8001a52:	462a      	mov	r2, r5
 8001a54:	4629      	mov	r1, r5
 8001a56:	4628      	mov	r0, r5
 8001a58:	f7ff fed2 	bl	8001800 <setColor>
	while (1) {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

		HAL_Delay(100);
 8001a5c:	2064      	movs	r0, #100	; 0x64
 8001a5e:	f7fe fc0d 	bl	800027c <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001a62:	2120      	movs	r1, #32
 8001a64:	4806      	ldr	r0, [pc, #24]	; (8001a80 <main+0x19c>)
 8001a66:	f7ff f901 	bl	8000c6c <HAL_GPIO_TogglePin>

		setColor(0,0,2);
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	4608      	mov	r0, r1
 8001a70:	f7ff fec6 	bl	8001800 <setColor>
		writeLed();
 8001a74:	f7ff fe8a 	bl	800178c <writeLed>
 8001a78:	e7f0      	b.n	8001a5c <main+0x178>
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40020000 	.word	0x40020000
 8001a84:	10210000 	.word	0x10210000
 8001a88:	40020800 	.word	0x40020800
 8001a8c:	200000ac 	.word	0x200000ac
 8001a90:	40003800 	.word	0x40003800
 8001a94:	20000104 	.word	0x20000104
 8001a98:	40012000 	.word	0x40012000
 8001a9c:	0f000001 	.word	0x0f000001
 8001aa0:	200001b4 	.word	0x200001b4
 8001aa4:	40004c00 	.word	0x40004c00
 8001aa8:	0003d090 	.word	0x0003d090
 8001aac:	200001f4 	.word	0x200001f4

08001ab0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8001ab0:	e7fe      	b.n	8001ab0 <Error_Handler>

08001ab2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ab4:	2007      	movs	r0, #7
 8001ab6:	f7fe fdf7 	bl	80006a8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	4611      	mov	r1, r2
 8001abe:	f06f 000b 	mvn.w	r0, #11
 8001ac2:	f7fe fe03 	bl	80006cc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	4611      	mov	r1, r2
 8001aca:	f06f 000a 	mvn.w	r0, #10
 8001ace:	f7fe fdfd 	bl	80006cc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	f06f 0009 	mvn.w	r0, #9
 8001ada:	f7fe fdf7 	bl	80006cc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	f06f 0004 	mvn.w	r0, #4
 8001ae6:	f7fe fdf1 	bl	80006cc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	4611      	mov	r1, r2
 8001aee:	f06f 0003 	mvn.w	r0, #3
 8001af2:	f7fe fdeb 	bl	80006cc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	4611      	mov	r1, r2
 8001afa:	f06f 0001 	mvn.w	r0, #1
 8001afe:	f7fe fde5 	bl	80006cc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	4611      	mov	r1, r2
 8001b06:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001b0e:	f7fe bddd 	b.w	80006cc <HAL_NVIC_SetPriority>
	...

08001b14 <HAL_ADC_MspInit>:

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b14:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8001b16:	6802      	ldr	r2, [r0, #0]
 8001b18:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <HAL_ADC_MspInit+0x78>)
 8001b1a:	429a      	cmp	r2, r3

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	4606      	mov	r6, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8001b20:	d131      	bne.n	8001b86 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b22:	2500      	movs	r5, #0
 8001b24:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001b28:	9500      	str	r5, [sp, #0]
 8001b2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PC0     ------> ADC1_IN10 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2c:	4818      	ldr	r0, [pc, #96]	; (8001b90 <HAL_ADC_MspInit+0x7c>)

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA2_Stream0;
 8001b2e:	4c19      	ldr	r4, [pc, #100]	; (8001b94 <HAL_ADC_MspInit+0x80>)
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b34:	645a      	str	r2, [r3, #68]	; 0x44
 8001b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	9503      	str	r5, [sp, #12]
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	9b00      	ldr	r3, [sp, #0]
  
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b42:	2301      	movs	r3, #1
 8001b44:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b46:	a901      	add	r1, sp, #4
  
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4c:	f7fe ffb0 	bl	8000ab0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA2_Stream0;
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <HAL_ADC_MspInit+0x84>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b52:	60a5      	str	r5, [r4, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA2_Stream0;
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001b54:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b5c:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b62:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b68:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b6a:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b6c:	f44f 7380 	mov.w	r3, #256	; 0x100
    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA2_Stream0;
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b70:	60e5      	str	r5, [r4, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b72:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b74:	6225      	str	r5, [r4, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b76:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b78:	f7fe fe26 	bl	80007c8 <HAL_DMA_Init>
 8001b7c:	b108      	cbz	r0, 8001b82 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001b7e:	f7ff ff97 	bl	8001ab0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b82:	63b4      	str	r4, [r6, #56]	; 0x38
 8001b84:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b86:	b006      	add	sp, #24
 8001b88:	bd70      	pop	{r4, r5, r6, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40012000 	.word	0x40012000
 8001b90:	40020800 	.word	0x40020800
 8001b94:	20000150 	.word	0x20000150
 8001b98:	40026410 	.word	0x40026410

08001b9c <HAL_SPI_MspInit>:
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b9c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI2)
 8001b9e:	6802      	ldr	r2, [r0, #0]
 8001ba0:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <HAL_SPI_MspInit+0x5c>)
 8001ba2:	429a      	cmp	r2, r3
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ba4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI2)
 8001ba6:	d124      	bne.n	8001bf2 <HAL_SPI_MspInit+0x56>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ba8:	2400      	movs	r4, #0
 8001baa:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001bae:	9400      	str	r4, [sp, #0]
 8001bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb2:	4812      	ldr	r0, [pc, #72]	; (8001bfc <HAL_SPI_MspInit+0x60>)
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bb8:	641a      	str	r2, [r3, #64]	; 0x40
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	9403      	str	r4, [sp, #12]
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc2:	9300      	str	r3, [sp, #0]
  
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bc4:	2502      	movs	r5, #2
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bc6:	9b00      	ldr	r3, [sp, #0]
  
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bc8:	9501      	str	r5, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001bca:	2307      	movs	r3, #7
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bcc:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bce:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001bd0:	9305      	str	r3, [sp, #20]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd4:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd6:	f7fe ff6b 	bl	8000ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bde:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be0:	a901      	add	r1, sp, #4

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001be2:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be4:	4806      	ldr	r0, [pc, #24]	; (8001c00 <HAL_SPI_MspInit+0x64>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bea:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bec:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bee:	f7fe ff5f 	bl	8000ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001bf2:	b006      	add	sp, #24
 8001bf4:	bd70      	pop	{r4, r5, r6, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40003800 	.word	0x40003800
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	40020400 	.word	0x40020400

08001c04 <HAL_UART_MspInit>:
  /* USER CODE END SPI2_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART4)
 8001c06:	6802      	ldr	r2, [r0, #0]
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <HAL_UART_MspInit+0x44>)
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d118      	bne.n	8001c40 <HAL_UART_MspInit+0x3c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <HAL_UART_MspInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c14:	480e      	ldr	r0, [pc, #56]	; (8001c50 <HAL_UART_MspInit+0x4c>)
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c18:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001c1c:	641a      	str	r2, [r3, #64]	; 0x40
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c24:	9300      	str	r3, [sp, #0]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2202      	movs	r2, #2
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c28:	9b00      	ldr	r3, [sp, #0]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2a:	9202      	str	r2, [sp, #8]
  
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c30:	2201      	movs	r2, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c32:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c34:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c36:	2308      	movs	r3, #8
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c38:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c3a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3c:	f7fe ff38 	bl	8000ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001c40:	b007      	add	sp, #28
 8001c42:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c46:	bf00      	nop
 8001c48:	40004c00 	.word	0x40004c00
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40020000 	.word	0x40020000

08001c54 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001c54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c56:	f7fe fb03 	bl	8000260 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8001c5e:	f7fe bd98 	b.w	8000792 <HAL_SYSTICK_IRQHandler>
	...

08001c64 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c64:	4801      	ldr	r0, [pc, #4]	; (8001c6c <DMA2_Stream0_IRQHandler+0x8>)
 8001c66:	f7fe be65 	b.w	8000934 <HAL_DMA_IRQHandler>
 8001c6a:	bf00      	nop
 8001c6c:	20000150 	.word	0x20000150

08001c70 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c70:	490f      	ldr	r1, [pc, #60]	; (8001cb0 <SystemInit+0x40>)
 8001c72:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001c76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <SystemInit+0x44>)
 8001c80:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c82:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001c84:	f042 0201 	orr.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c8a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001c92:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c96:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001c98:	4a07      	ldr	r2, [pc, #28]	; (8001cb8 <SystemInit+0x48>)
 8001c9a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ca2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001ca4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ca6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001caa:	608b      	str	r3, [r1, #8]
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000ed00 	.word	0xe000ed00
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	24003010 	.word	0x24003010

08001cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cc2:	e003      	b.n	8001ccc <LoopCopyDataInit>

08001cc4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cc6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001cc8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cca:	3104      	adds	r1, #4

08001ccc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ccc:	480b      	ldr	r0, [pc, #44]	; (8001cfc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001cd0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001cd2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cd4:	d3f6      	bcc.n	8001cc4 <CopyDataInit>
  ldr  r2, =_sbss
 8001cd6:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001cd8:	e002      	b.n	8001ce0 <LoopFillZerobss>

08001cda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001cda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001cdc:	f842 3b04 	str.w	r3, [r2], #4

08001ce0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ce2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ce4:	d3f9      	bcc.n	8001cda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ce6:	f7ff ffc3 	bl	8001c70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cea:	f000 f811 	bl	8001d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cee:	f7ff fdf9 	bl	80018e4 <main>
  bx  lr    
 8001cf2:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cf4:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001cf8:	08001d94 	.word	0x08001d94
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001cfc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d00:	20000004 	.word	0x20000004
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8001d04:	20000004 	.word	0x20000004
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d08:	200009f4 	.word	0x200009f4

08001d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d0c:	e7fe      	b.n	8001d0c <ADC_IRQHandler>
	...

08001d10 <__libc_init_array>:
 8001d10:	b570      	push	{r4, r5, r6, lr}
 8001d12:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <__libc_init_array+0x3c>)
 8001d14:	4c0e      	ldr	r4, [pc, #56]	; (8001d50 <__libc_init_array+0x40>)
 8001d16:	1ae4      	subs	r4, r4, r3
 8001d18:	10a4      	asrs	r4, r4, #2
 8001d1a:	2500      	movs	r5, #0
 8001d1c:	461e      	mov	r6, r3
 8001d1e:	42a5      	cmp	r5, r4
 8001d20:	d004      	beq.n	8001d2c <__libc_init_array+0x1c>
 8001d22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d26:	4798      	blx	r3
 8001d28:	3501      	adds	r5, #1
 8001d2a:	e7f8      	b.n	8001d1e <__libc_init_array+0xe>
 8001d2c:	f000 f816 	bl	8001d5c <_init>
 8001d30:	4c08      	ldr	r4, [pc, #32]	; (8001d54 <__libc_init_array+0x44>)
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <__libc_init_array+0x48>)
 8001d34:	1ae4      	subs	r4, r4, r3
 8001d36:	10a4      	asrs	r4, r4, #2
 8001d38:	2500      	movs	r5, #0
 8001d3a:	461e      	mov	r6, r3
 8001d3c:	42a5      	cmp	r5, r4
 8001d3e:	d004      	beq.n	8001d4a <__libc_init_array+0x3a>
 8001d40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d44:	4798      	blx	r3
 8001d46:	3501      	adds	r5, #1
 8001d48:	e7f8      	b.n	8001d3c <__libc_init_array+0x2c>
 8001d4a:	bd70      	pop	{r4, r5, r6, pc}
 8001d4c:	08001d8c 	.word	0x08001d8c
 8001d50:	08001d8c 	.word	0x08001d8c
 8001d54:	08001d90 	.word	0x08001d90
 8001d58:	08001d8c 	.word	0x08001d8c

08001d5c <_init>:
 8001d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d5e:	bf00      	nop
 8001d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d62:	bc08      	pop	{r3}
 8001d64:	469e      	mov	lr, r3
 8001d66:	4770      	bx	lr

08001d68 <_fini>:
 8001d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d6a:	bf00      	nop
 8001d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d6e:	bc08      	pop	{r3}
 8001d70:	469e      	mov	lr, r3
 8001d72:	4770      	bx	lr
