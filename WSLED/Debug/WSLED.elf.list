
WSLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000558c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08005760  08005760  00015760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080058e4  080058e4  000158e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080058ec  080058ec  000158ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080058f0  080058f0  000158f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000540  20000000  080058f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000218  20000540  08005e34  00020540  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000758  08005e34  00020758  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020540  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000bb30  00000000  00000000  00020570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001f7a  00000000  00000000  0002c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000056de  00000000  00000000  0002e01a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000007b0  00000000  00000000  000336f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c98  00000000  00000000  00033ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000046ee  00000000  00000000  00034b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002bda  00000000  00000000  0003922e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  0003be08  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001c1c  00000000  00000000  0003be88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000540 	.word	0x20000540
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005744 	.word	0x08005744

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000544 	.word	0x20000544
 800020c:	08005744 	.word	0x08005744

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f092 0f00 	teq	r2, #0
 80005aa:	bf14      	ite	ne
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e720      	b.n	8000404 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aedc 	beq.w	80003b2 <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6c1      	b.n	80003b2 <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2iz>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d215      	bcs.n	8000bc6 <__aeabi_d2iz+0x36>
 8000b9a:	d511      	bpl.n	8000bc0 <__aeabi_d2iz+0x30>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d912      	bls.n	8000bcc <__aeabi_d2iz+0x3c>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	bf18      	it	ne
 8000bbc:	4240      	negne	r0, r0
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d105      	bne.n	8000bd8 <__aeabi_d2iz+0x48>
 8000bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b97e 	b.w	8000ef4 <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	468c      	mov	ip, r1
 8000c16:	460e      	mov	r6, r1
 8000c18:	4604      	mov	r4, r0
 8000c1a:	9d08      	ldr	r5, [sp, #32]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d150      	bne.n	8000cc2 <__udivmoddi4+0xb2>
 8000c20:	428a      	cmp	r2, r1
 8000c22:	4617      	mov	r7, r2
 8000c24:	d96c      	bls.n	8000d00 <__udivmoddi4+0xf0>
 8000c26:	fab2 fe82 	clz	lr, r2
 8000c2a:	f1be 0f00 	cmp.w	lr, #0
 8000c2e:	d00b      	beq.n	8000c48 <__udivmoddi4+0x38>
 8000c30:	f1ce 0420 	rsb	r4, lr, #32
 8000c34:	fa20 f404 	lsr.w	r4, r0, r4
 8000c38:	fa01 f60e 	lsl.w	r6, r1, lr
 8000c3c:	ea44 0c06 	orr.w	ip, r4, r6
 8000c40:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c44:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c4c:	0c22      	lsrs	r2, r4, #16
 8000c4e:	fbbc f0f9 	udiv	r0, ip, r9
 8000c52:	fa1f f887 	uxth.w	r8, r7
 8000c56:	fb09 c610 	mls	r6, r9, r0, ip
 8000c5a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000c5e:	fb00 f308 	mul.w	r3, r0, r8
 8000c62:	42b3      	cmp	r3, r6
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x6a>
 8000c66:	19f6      	adds	r6, r6, r7
 8000c68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6c:	f080 8122 	bcs.w	8000eb4 <__udivmoddi4+0x2a4>
 8000c70:	42b3      	cmp	r3, r6
 8000c72:	f240 811f 	bls.w	8000eb4 <__udivmoddi4+0x2a4>
 8000c76:	3802      	subs	r0, #2
 8000c78:	443e      	add	r6, r7
 8000c7a:	1af6      	subs	r6, r6, r3
 8000c7c:	b2a2      	uxth	r2, r4
 8000c7e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000c82:	fb09 6613 	mls	r6, r9, r3, r6
 8000c86:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000c8a:	fb03 f808 	mul.w	r8, r3, r8
 8000c8e:	45a0      	cmp	r8, r4
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x96>
 8000c92:	19e4      	adds	r4, r4, r7
 8000c94:	f103 32ff 	add.w	r2, r3, #4294967295
 8000c98:	f080 810a 	bcs.w	8000eb0 <__udivmoddi4+0x2a0>
 8000c9c:	45a0      	cmp	r8, r4
 8000c9e:	f240 8107 	bls.w	8000eb0 <__udivmoddi4+0x2a0>
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	443c      	add	r4, r7
 8000ca6:	ebc8 0404 	rsb	r4, r8, r4
 8000caa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2d00      	cmp	r5, #0
 8000cb2:	d062      	beq.n	8000d7a <__udivmoddi4+0x16a>
 8000cb4:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cb8:	2300      	movs	r3, #0
 8000cba:	602c      	str	r4, [r5, #0]
 8000cbc:	606b      	str	r3, [r5, #4]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0xc6>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d055      	beq.n	8000d76 <__udivmoddi4+0x166>
 8000cca:	2100      	movs	r1, #0
 8000ccc:	e885 0041 	stmia.w	r5, {r0, r6}
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f183 	clz	r1, r3
 8000cda:	2900      	cmp	r1, #0
 8000cdc:	f040 8090 	bne.w	8000e00 <__udivmoddi4+0x1f0>
 8000ce0:	42b3      	cmp	r3, r6
 8000ce2:	d302      	bcc.n	8000cea <__udivmoddi4+0xda>
 8000ce4:	4282      	cmp	r2, r0
 8000ce6:	f200 80f8 	bhi.w	8000eda <__udivmoddi4+0x2ca>
 8000cea:	1a84      	subs	r4, r0, r2
 8000cec:	eb66 0603 	sbc.w	r6, r6, r3
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	46b4      	mov	ip, r6
 8000cf4:	2d00      	cmp	r5, #0
 8000cf6:	d040      	beq.n	8000d7a <__udivmoddi4+0x16a>
 8000cf8:	e885 1010 	stmia.w	r5, {r4, ip}
 8000cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d00:	b912      	cbnz	r2, 8000d08 <__udivmoddi4+0xf8>
 8000d02:	2701      	movs	r7, #1
 8000d04:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d08:	fab7 fe87 	clz	lr, r7
 8000d0c:	f1be 0f00 	cmp.w	lr, #0
 8000d10:	d135      	bne.n	8000d7e <__udivmoddi4+0x16e>
 8000d12:	1bf3      	subs	r3, r6, r7
 8000d14:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d18:	fa1f fc87 	uxth.w	ip, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d22:	0c22      	lsrs	r2, r4, #16
 8000d24:	fb08 3610 	mls	r6, r8, r0, r3
 8000d28:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000d2c:	fb0c f300 	mul.w	r3, ip, r0
 8000d30:	42b3      	cmp	r3, r6
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x134>
 8000d34:	19f6      	adds	r6, r6, r7
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x132>
 8000d3c:	42b3      	cmp	r3, r6
 8000d3e:	f200 80ce 	bhi.w	8000ede <__udivmoddi4+0x2ce>
 8000d42:	4610      	mov	r0, r2
 8000d44:	1af6      	subs	r6, r6, r3
 8000d46:	b2a2      	uxth	r2, r4
 8000d48:	fbb6 f3f8 	udiv	r3, r6, r8
 8000d4c:	fb08 6613 	mls	r6, r8, r3, r6
 8000d50:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000d54:	fb0c fc03 	mul.w	ip, ip, r3
 8000d58:	45a4      	cmp	ip, r4
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x15c>
 8000d5c:	19e4      	adds	r4, r4, r7
 8000d5e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x15a>
 8000d64:	45a4      	cmp	ip, r4
 8000d66:	f200 80b5 	bhi.w	8000ed4 <__udivmoddi4+0x2c4>
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	ebcc 0404 	rsb	r4, ip, r4
 8000d70:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d74:	e79c      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000d76:	4629      	mov	r1, r5
 8000d78:	4628      	mov	r0, r5
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	f1ce 0120 	rsb	r1, lr, #32
 8000d82:	fa06 f30e 	lsl.w	r3, r6, lr
 8000d86:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d8a:	fa20 f901 	lsr.w	r9, r0, r1
 8000d8e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d92:	40ce      	lsrs	r6, r1
 8000d94:	ea49 0903 	orr.w	r9, r9, r3
 8000d98:	fbb6 faf8 	udiv	sl, r6, r8
 8000d9c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000da0:	fb08 661a 	mls	r6, r8, sl, r6
 8000da4:	fa1f fc87 	uxth.w	ip, r7
 8000da8:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000dac:	fb0a f20c 	mul.w	r2, sl, ip
 8000db0:	429a      	cmp	r2, r3
 8000db2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1be>
 8000db8:	19db      	adds	r3, r3, r7
 8000dba:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000dbe:	f080 8087 	bcs.w	8000ed0 <__udivmoddi4+0x2c0>
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	f240 8084 	bls.w	8000ed0 <__udivmoddi4+0x2c0>
 8000dc8:	f1aa 0a02 	sub.w	sl, sl, #2
 8000dcc:	443b      	add	r3, r7
 8000dce:	1a9b      	subs	r3, r3, r2
 8000dd0:	fa1f f989 	uxth.w	r9, r9
 8000dd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000ddc:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000de0:	fb01 f60c 	mul.w	r6, r1, ip
 8000de4:	429e      	cmp	r6, r3
 8000de6:	d907      	bls.n	8000df8 <__udivmoddi4+0x1e8>
 8000de8:	19db      	adds	r3, r3, r7
 8000dea:	f101 32ff 	add.w	r2, r1, #4294967295
 8000dee:	d26b      	bcs.n	8000ec8 <__udivmoddi4+0x2b8>
 8000df0:	429e      	cmp	r6, r3
 8000df2:	d969      	bls.n	8000ec8 <__udivmoddi4+0x2b8>
 8000df4:	3902      	subs	r1, #2
 8000df6:	443b      	add	r3, r7
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000dfe:	e78e      	b.n	8000d1e <__udivmoddi4+0x10e>
 8000e00:	f1c1 0e20 	rsb	lr, r1, #32
 8000e04:	fa22 f40e 	lsr.w	r4, r2, lr
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	4323      	orrs	r3, r4
 8000e0c:	fa20 f70e 	lsr.w	r7, r0, lr
 8000e10:	fa06 f401 	lsl.w	r4, r6, r1
 8000e14:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e18:	fa26 f60e 	lsr.w	r6, r6, lr
 8000e1c:	433c      	orrs	r4, r7
 8000e1e:	fbb6 f9fc 	udiv	r9, r6, ip
 8000e22:	0c27      	lsrs	r7, r4, #16
 8000e24:	fb0c 6619 	mls	r6, ip, r9, r6
 8000e28:	fa1f f883 	uxth.w	r8, r3
 8000e2c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000e30:	fb09 f708 	mul.w	r7, r9, r8
 8000e34:	42b7      	cmp	r7, r6
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x242>
 8000e40:	18f6      	adds	r6, r6, r3
 8000e42:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e46:	d241      	bcs.n	8000ecc <__udivmoddi4+0x2bc>
 8000e48:	42b7      	cmp	r7, r6
 8000e4a:	d93f      	bls.n	8000ecc <__udivmoddi4+0x2bc>
 8000e4c:	f1a9 0902 	sub.w	r9, r9, #2
 8000e50:	441e      	add	r6, r3
 8000e52:	1bf6      	subs	r6, r6, r7
 8000e54:	b2a0      	uxth	r0, r4
 8000e56:	fbb6 f4fc 	udiv	r4, r6, ip
 8000e5a:	fb0c 6614 	mls	r6, ip, r4, r6
 8000e5e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000e62:	fb04 f808 	mul.w	r8, r4, r8
 8000e66:	45b8      	cmp	r8, r7
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x26a>
 8000e6a:	18ff      	adds	r7, r7, r3
 8000e6c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e70:	d228      	bcs.n	8000ec4 <__udivmoddi4+0x2b4>
 8000e72:	45b8      	cmp	r8, r7
 8000e74:	d926      	bls.n	8000ec4 <__udivmoddi4+0x2b4>
 8000e76:	3c02      	subs	r4, #2
 8000e78:	441f      	add	r7, r3
 8000e7a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000e7e:	ebc8 0707 	rsb	r7, r8, r7
 8000e82:	fba0 8902 	umull	r8, r9, r0, r2
 8000e86:	454f      	cmp	r7, r9
 8000e88:	4644      	mov	r4, r8
 8000e8a:	464e      	mov	r6, r9
 8000e8c:	d314      	bcc.n	8000eb8 <__udivmoddi4+0x2a8>
 8000e8e:	d029      	beq.n	8000ee4 <__udivmoddi4+0x2d4>
 8000e90:	b365      	cbz	r5, 8000eec <__udivmoddi4+0x2dc>
 8000e92:	ebba 0304 	subs.w	r3, sl, r4
 8000e96:	eb67 0706 	sbc.w	r7, r7, r6
 8000e9a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	40cf      	lsrs	r7, r1
 8000ea2:	ea4e 0303 	orr.w	r3, lr, r3
 8000ea6:	e885 0088 	stmia.w	r5, {r3, r7}
 8000eaa:	2100      	movs	r1, #0
 8000eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	e6f8      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	e6e0      	b.n	8000c7a <__udivmoddi4+0x6a>
 8000eb8:	ebb8 0402 	subs.w	r4, r8, r2
 8000ebc:	eb69 0603 	sbc.w	r6, r9, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e5      	b.n	8000e90 <__udivmoddi4+0x280>
 8000ec4:	4604      	mov	r4, r0
 8000ec6:	e7d8      	b.n	8000e7a <__udivmoddi4+0x26a>
 8000ec8:	4611      	mov	r1, r2
 8000eca:	e795      	b.n	8000df8 <__udivmoddi4+0x1e8>
 8000ecc:	4681      	mov	r9, r0
 8000ece:	e7c0      	b.n	8000e52 <__udivmoddi4+0x242>
 8000ed0:	468a      	mov	sl, r1
 8000ed2:	e77c      	b.n	8000dce <__udivmoddi4+0x1be>
 8000ed4:	3b02      	subs	r3, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e748      	b.n	8000d6c <__udivmoddi4+0x15c>
 8000eda:	4608      	mov	r0, r1
 8000edc:	e70a      	b.n	8000cf4 <__udivmoddi4+0xe4>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	443e      	add	r6, r7
 8000ee2:	e72f      	b.n	8000d44 <__udivmoddi4+0x134>
 8000ee4:	45c2      	cmp	sl, r8
 8000ee6:	d3e7      	bcc.n	8000eb8 <__udivmoddi4+0x2a8>
 8000ee8:	463e      	mov	r6, r7
 8000eea:	e7d1      	b.n	8000e90 <__udivmoddi4+0x280>
 8000eec:	4629      	mov	r1, r5
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f04:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f08:	f000 fad8 	bl	80014bc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	4621      	mov	r1, r4
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295
 8000f14:	f000 fa92 	bl	800143c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000f18:	2000      	movs	r0, #0
 8000f1a:	bd10      	pop	{r4, pc}
 8000f1c:	20000000 	.word	0x20000000

08000f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f20:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <HAL_Init+0x30>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f2a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f32:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f3a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f000 fa6b 	bl	8001418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f42:	2000      	movs	r0, #0
 8000f44:	f7ff ffd8 	bl	8000ef8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000f48:	f001 fbee 	bl	8002728 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	bd08      	pop	{r3, pc}
 8000f50:	40023c00 	.word	0x40023c00

08000f54 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f54:	4a02      	ldr	r2, [pc, #8]	; (8000f60 <HAL_IncTick+0xc>)
 8000f56:	6813      	ldr	r3, [r2, #0]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000638 	.word	0x20000638

08000f64 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f64:	4b01      	ldr	r3, [pc, #4]	; (8000f6c <HAL_GetTick+0x8>)
 8000f66:	6818      	ldr	r0, [r3, #0]
}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000638 	.word	0x20000638

08000f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000f70:	b513      	push	{r0, r1, r4, lr}
 8000f72:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 8000f74:	f7ff fff6 	bl	8000f64 <HAL_GetTick>
 8000f78:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000f7a:	f7ff fff3 	bl	8000f64 <HAL_GetTick>
 8000f7e:	9b01      	ldr	r3, [sp, #4]
 8000f80:	1b00      	subs	r0, r0, r4
 8000f82:	4298      	cmp	r0, r3
 8000f84:	d3f9      	bcc.n	8000f7a <HAL_Delay+0xa>
  {
  }
}
 8000f86:	b002      	add	sp, #8
 8000f88:	bd10      	pop	{r4, pc}
	...

08000f8c <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f8c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f8e:	4604      	mov	r4, r0
 8000f90:	2800      	cmp	r0, #0
 8000f92:	f000 809e 	beq.w	80010d2 <HAL_ADC_Init+0x146>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f96:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000f98:	b923      	cbnz	r3, 8000fa4 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f9a:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f9c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fa0:	f001 fbf2 	bl	8002788 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fa4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fa6:	06db      	lsls	r3, r3, #27
 8000fa8:	f100 808e 	bmi.w	80010c8 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fb2:	f023 0302 	bic.w	r3, r3, #2
 8000fb6:	f043 0302 	orr.w	r3, r3, #2
 8000fba:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000fbc:	4b46      	ldr	r3, [pc, #280]	; (80010d8 <HAL_ADC_Init+0x14c>)
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000fc4:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000fc6:	6859      	ldr	r1, [r3, #4]
 8000fc8:	6862      	ldr	r2, [r4, #4]
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000fce:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000fd0:	6921      	ldr	r1, [r4, #16]
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000fd2:	685a      	ldr	r2, [r3, #4]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fd4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000fd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fda:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000fe2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000fea:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000fec:	6859      	ldr	r1, [r3, #4]
 8000fee:	68a2      	ldr	r2, [r4, #8]
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ffa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000ffc:	6899      	ldr	r1, [r3, #8]
 8000ffe:	68e2      	ldr	r2, [r4, #12]
 8001000:	430a      	orrs	r2, r1
 8001002:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001004:	4a35      	ldr	r2, [pc, #212]	; (80010dc <HAL_ADC_Init+0x150>)
 8001006:	4290      	cmp	r0, r2
 8001008:	d00e      	beq.n	8001028 <HAL_ADC_Init+0x9c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800100a:	6899      	ldr	r1, [r3, #8]
 800100c:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001010:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	4302      	orrs	r2, r0
 8001016:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001018:	689a      	ldr	r2, [r3, #8]
 800101a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800101e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001020:	6899      	ldr	r1, [r3, #8]
 8001022:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001024:	430a      	orrs	r2, r1
 8001026:	e006      	b.n	8001036 <HAL_ADC_Init+0xaa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800102e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001036:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001038:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800103a:	69a1      	ldr	r1, [r4, #24]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800103c:	f022 0202 	bic.w	r2, r2, #2
 8001040:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001048:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800104a:	6a22      	ldr	r2, [r4, #32]
 800104c:	b19a      	cbz	r2, 8001076 <HAL_ADC_Init+0xea>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001054:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800105c:	605a      	str	r2, [r3, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800105e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001062:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001066:	fab2 f182 	clz	r1, r2
 800106a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800106c:	6858      	ldr	r0, [r3, #4]
 800106e:	3a01      	subs	r2, #1
 8001070:	408a      	lsls	r2, r1
 8001072:	4302      	orrs	r2, r0
 8001074:	e002      	b.n	800107c <HAL_ADC_Init+0xf0>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800107c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800107e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001080:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001084:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001086:	69e2      	ldr	r2, [r4, #28]
 8001088:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800108a:	3a01      	subs	r2, #1
 800108c:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 8001090:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001092:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001094:	6b21      	ldr	r1, [r4, #48]	; 0x30
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001096:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800109a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80010a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010a4:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010a6:	6961      	ldr	r1, [r4, #20]
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010ae:	689a      	ldr	r2, [r3, #8]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b0:	2000      	movs	r0, #0
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010b2:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80010b6:	609a      	str	r2, [r3, #8]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b8:	6460      	str	r0, [r4, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010bc:	f023 0303 	bic.w	r3, r3, #3
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6423      	str	r3, [r4, #64]	; 0x40
 80010c6:	e000      	b.n	80010ca <HAL_ADC_Init+0x13e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010c8:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010ca:	2300      	movs	r3, #0
 80010cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010d0:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80010d2:	2001      	movs	r0, #1
  /* Release Lock */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80010d4:	bd10      	pop	{r4, pc}
 80010d6:	bf00      	nop
 80010d8:	40012300 	.word	0x40012300
 80010dc:	0f000001 	.word	0x0f000001

080010e0 <HAL_ADC_Start_IT>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80010e0:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010e6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d053      	beq.n	8001196 <HAL_ADC_Start_IT+0xb6>
 80010ee:	2301      	movs	r3, #1
 80010f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010f4:	6803      	ldr	r3, [r0, #0]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	07d1      	lsls	r1, r2, #31
 80010fa:	d503      	bpl.n	8001104 <HAL_ADC_Start_IT+0x24>
      counter--;
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	07d2      	lsls	r2, r2, #31
 8001100:	d412      	bmi.n	8001128 <HAL_ADC_Start_IT+0x48>
 8001102:	e03d      	b.n	8001180 <HAL_ADC_Start_IT+0xa0>
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001104:	689a      	ldr	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001106:	4925      	ldr	r1, [pc, #148]	; (800119c <HAL_ADC_Start_IT+0xbc>)
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001108:	f042 0201 	orr.w	r2, r2, #1
 800110c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800110e:	4a24      	ldr	r2, [pc, #144]	; (80011a0 <HAL_ADC_Start_IT+0xc0>)
 8001110:	6812      	ldr	r2, [r2, #0]
 8001112:	fbb2 f2f1 	udiv	r2, r2, r1
 8001116:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    while(counter != 0U)
    {
      counter--;
 800111a:	9201      	str	r2, [sp, #4]
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
    while(counter != 0U)
 800111c:	9a01      	ldr	r2, [sp, #4]
 800111e:	2a00      	cmp	r2, #0
 8001120:	d0ec      	beq.n	80010fc <HAL_ADC_Start_IT+0x1c>
    {
      counter--;
 8001122:	9a01      	ldr	r2, [sp, #4]
 8001124:	3a01      	subs	r2, #1
 8001126:	e7f8      	b.n	800111a <HAL_ADC_Start_IT+0x3a>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001128:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800112a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800112e:	f022 0201 	bic.w	r2, r2, #1
 8001132:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001136:	6402      	str	r2, [r0, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	0551      	lsls	r1, r2, #21
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800113c:	bf41      	itttt	mi
 800113e:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8001140:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8001144:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8001148:	6402      	strmi	r2, [r0, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800114a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800114c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001150:	bf1c      	itt	ne
 8001152:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8001154:	f022 0206 	bicne.w	r2, r2, #6
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001158:	6442      	str	r2, [r0, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800115a:	2200      	movs	r2, #0
 800115c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001160:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001164:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800116c:	f042 0220 	orr.w	r2, r2, #32
 8001170:	605a      	str	r2, [r3, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001172:	4a0c      	ldr	r2, [pc, #48]	; (80011a4 <HAL_ADC_Start_IT+0xc4>)
 8001174:	6852      	ldr	r2, [r2, #4]
 8001176:	06d2      	lsls	r2, r2, #27
 8001178:	d004      	beq.n	8001184 <HAL_ADC_Start_IT+0xa4>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800117a:	4a0b      	ldr	r2, [pc, #44]	; (80011a8 <HAL_ADC_Start_IT+0xc8>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d001      	beq.n	8001184 <HAL_ADC_Start_IT+0xa4>
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001180:	2000      	movs	r0, #0
 8001182:	e009      	b.n	8001198 <HAL_ADC_Start_IT+0xb8>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001184:	6898      	ldr	r0, [r3, #8]
 8001186:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800118a:	d1f9      	bne.n	8001180 <HAL_ADC_Start_IT+0xa0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	e000      	b.n	8001198 <HAL_ADC_Start_IT+0xb8>
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001196:	2002      	movs	r0, #2
    }
  }
  
  /* Return function status */
  return HAL_OK;
}
 8001198:	b002      	add	sp, #8
 800119a:	4770      	bx	lr
 800119c:	000f4240 	.word	0x000f4240
 80011a0:	20000000 	.word	0x20000000
 80011a4:	40012300 	.word	0x40012300
 80011a8:	40012000 	.word	0x40012000

080011ac <HAL_ADC_GetValue>:
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80011ac:	6803      	ldr	r3, [r0, #0]
 80011ae:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80011b0:	4770      	bx	lr

080011b2 <HAL_ADC_LevelOutOfWindowCallback>:
 80011b2:	4770      	bx	lr

080011b4 <HAL_ADC_ErrorCallback>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011b4:	4770      	bx	lr

080011b6 <HAL_ADC_IRQHandler>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80011b6:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80011b8:	6803      	ldr	r3, [r0, #0]
 80011ba:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80011bc:	685a      	ldr	r2, [r3, #4]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80011be:	078d      	lsls	r5, r1, #30
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80011c0:	4604      	mov	r4, r0
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80011c2:	d52b      	bpl.n	800121c <HAL_ADC_IRQHandler+0x66>
 80011c4:	0690      	lsls	r0, r2, #26
 80011c6:	d529      	bpl.n	800121c <HAL_ADC_IRQHandler+0x66>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80011ca:	06d1      	lsls	r1, r2, #27
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80011cc:	bf5e      	ittt	pl
 80011ce:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 80011d0:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 80011d4:	6422      	strpl	r2, [r4, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80011dc:	d117      	bne.n	800120e <HAL_ADC_IRQHandler+0x58>
 80011de:	69a2      	ldr	r2, [r4, #24]
 80011e0:	b9aa      	cbnz	r2, 800120e <HAL_ADC_IRQHandler+0x58>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80011e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011e4:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80011e8:	d002      	beq.n	80011f0 <HAL_ADC_IRQHandler+0x3a>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011ea:	689a      	ldr	r2, [r3, #8]
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80011ec:	0552      	lsls	r2, r2, #21
 80011ee:	d40e      	bmi.n	800120e <HAL_ADC_IRQHandler+0x58>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	f022 0220 	bic.w	r2, r2, #32
 80011f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011fe:	6423      	str	r3, [r4, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001200:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001202:	04db      	lsls	r3, r3, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001204:	bf5e      	ittt	pl
 8001206:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8001208:	f043 0301 	orrpl.w	r3, r3, #1
 800120c:	6423      	strpl	r3, [r4, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */ 
    HAL_ADC_ConvCpltCallback(hadc);
 800120e:	4620      	mov	r0, r4
 8001210:	f001 f870 	bl	80022f4 <HAL_ADC_ConvCpltCallback>
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001214:	6823      	ldr	r3, [r4, #0]
 8001216:	f06f 0212 	mvn.w	r2, #18
 800121a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800121c:	6823      	ldr	r3, [r4, #0]
 800121e:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001220:	685a      	ldr	r2, [r3, #4]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001222:	074d      	lsls	r5, r1, #29
 8001224:	d532      	bpl.n	800128c <HAL_ADC_IRQHandler+0xd6>
 8001226:	0610      	lsls	r0, r2, #24
 8001228:	d530      	bpl.n	800128c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800122a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800122c:	06d1      	lsls	r1, r2, #27
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800122e:	bf5e      	ittt	pl
 8001230:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8001232:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8001236:	6422      	strpl	r2, [r4, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800123e:	d11e      	bne.n	800127e <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001240:	6b9a      	ldr	r2, [r3, #56]	; 0x38

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001242:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001246:	d002      	beq.n	800124e <HAL_ADC_IRQHandler+0x98>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001248:	689a      	ldr	r2, [r3, #8]
    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800124a:	0552      	lsls	r2, r2, #21
 800124c:	d417      	bmi.n	800127e <HAL_ADC_IRQHandler+0xc8>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800124e:	685a      	ldr	r2, [r3, #4]
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001250:	0555      	lsls	r5, r2, #21
 8001252:	d414      	bmi.n	800127e <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001254:	689a      	ldr	r2, [r3, #8]
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001256:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800125a:	d110      	bne.n	800127e <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800125c:	69a2      	ldr	r2, [r4, #24]
 800125e:	b972      	cbnz	r2, 800127e <HAL_ADC_IRQHandler+0xc8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001266:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001268:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800126a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800126e:	6423      	str	r3, [r4, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001270:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001272:	05d8      	lsls	r0, r3, #23
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001274:	bf5e      	ittt	pl
 8001276:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8001278:	f043 0301 	orrpl.w	r3, r3, #1
 800127c:	6423      	strpl	r3, [r4, #64]	; 0x40
      }
    }

    /* Conversion complete callback */ 
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800127e:	4620      	mov	r0, r4
 8001280:	f000 f8c8 	bl	8001414 <HAL_ADCEx_InjectedConvCpltCallback>
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001284:	6823      	ldr	r3, [r4, #0]
 8001286:	f06f 020c 	mvn.w	r2, #12
 800128a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800128c:	6823      	ldr	r3, [r4, #0]
 800128e:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001290:	685a      	ldr	r2, [r3, #4]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001292:	07c9      	lsls	r1, r1, #31
 8001294:	d50f      	bpl.n	80012b6 <HAL_ADC_IRQHandler+0x100>
 8001296:	0655      	lsls	r5, r2, #25
 8001298:	d50d      	bpl.n	80012b6 <HAL_ADC_IRQHandler+0x100>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	07d8      	lsls	r0, r3, #31
 800129e:	d50a      	bpl.n	80012b6 <HAL_ADC_IRQHandler+0x100>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a6:	6423      	str	r3, [r4, #64]	; 0x40
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012a8:	4620      	mov	r0, r4
 80012aa:	f7ff ff82 	bl	80011b2 <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80012ae:	6823      	ldr	r3, [r4, #0]
 80012b0:	f06f 0201 	mvn.w	r2, #1
 80012b4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80012b6:	6823      	ldr	r3, [r4, #0]
 80012b8:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80012ba:	685a      	ldr	r2, [r3, #4]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80012bc:	0689      	lsls	r1, r1, #26
 80012be:	d50d      	bpl.n	80012dc <HAL_ADC_IRQHandler+0x126>
 80012c0:	0152      	lsls	r2, r2, #5
 80012c2:	d50b      	bpl.n	80012dc <HAL_ADC_IRQHandler+0x126>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80012c4:	6c62      	ldr	r2, [r4, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80012c6:	f06f 0520 	mvn.w	r5, #32
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80012ca:	f042 0202 	orr.w	r2, r2, #2
 80012ce:	6462      	str	r2, [r4, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
    
    /* Error callback */ 
    HAL_ADC_ErrorCallback(hadc);
 80012d0:	4620      	mov	r0, r4
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80012d2:	601d      	str	r5, [r3, #0]
    
    /* Error callback */ 
    HAL_ADC_ErrorCallback(hadc);
 80012d4:	f7ff ff6e 	bl	80011b4 <HAL_ADC_ErrorCallback>
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80012d8:	6823      	ldr	r3, [r4, #0]
 80012da:	601d      	str	r5, [r3, #0]
 80012dc:	bd38      	pop	{r3, r4, r5, pc}
	...

080012e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012e6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d069      	beq.n	80013c2 <HAL_ADC_ConfigChannel+0xe2>
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012ee:	680d      	ldr	r5, [r1, #0]
 80012f0:	6804      	ldr	r4, [r0, #0]
 80012f2:	688f      	ldr	r7, [r1, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012f4:	2301      	movs	r3, #1
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012f6:	2d09      	cmp	r5, #9
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80012fc:	b2ae      	uxth	r6, r5
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012fe:	d910      	bls.n	8001322 <HAL_ADC_ConfigChannel+0x42>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001300:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8001304:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8001308:	f1a2 031e 	sub.w	r3, r2, #30
 800130c:	2207      	movs	r2, #7
 800130e:	409a      	lsls	r2, r3
 8001310:	ea2e 0202 	bic.w	r2, lr, r2
 8001314:	60e2      	str	r2, [r4, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001316:	68e2      	ldr	r2, [r4, #12]
 8001318:	fa07 f303 	lsl.w	r3, r7, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	60e3      	str	r3, [r4, #12]
 8001320:	e00e      	b.n	8001340 <HAL_ADC_ConfigChannel+0x60>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001322:	6922      	ldr	r2, [r4, #16]
 8001324:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001328:	f04f 0e07 	mov.w	lr, #7
 800132c:	fa0e fe03 	lsl.w	lr, lr, r3
 8001330:	ea22 020e 	bic.w	r2, r2, lr
 8001334:	6122      	str	r2, [r4, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001336:	6922      	ldr	r2, [r4, #16]
 8001338:	fa07 f303 	lsl.w	r3, r7, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	6123      	str	r3, [r4, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001340:	684b      	ldr	r3, [r1, #4]
 8001342:	2b06      	cmp	r3, #6
 8001344:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001348:	d80d      	bhi.n	8001366 <HAL_ADC_ConfigChannel+0x86>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800134a:	4413      	add	r3, r2
 800134c:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800134e:	1f59      	subs	r1, r3, #5
 8001350:	231f      	movs	r3, #31
 8001352:	408b      	lsls	r3, r1
 8001354:	ea27 0303 	bic.w	r3, r7, r3
 8001358:	6363      	str	r3, [r4, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800135a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800135c:	fa06 f101 	lsl.w	r1, r6, r1
 8001360:	4311      	orrs	r1, r2
 8001362:	6361      	str	r1, [r4, #52]	; 0x34
 8001364:	e01d      	b.n	80013a2 <HAL_ADC_ConfigChannel+0xc2>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001366:	2b0c      	cmp	r3, #12
 8001368:	d80e      	bhi.n	8001388 <HAL_ADC_ConfigChannel+0xa8>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800136a:	4413      	add	r3, r2
 800136c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800136e:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8001372:	231f      	movs	r3, #31
 8001374:	4093      	lsls	r3, r2
 8001376:	ea21 0303 	bic.w	r3, r1, r3
 800137a:	6323      	str	r3, [r4, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800137c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800137e:	fa06 f202 	lsl.w	r2, r6, r2
 8001382:	431a      	orrs	r2, r3
 8001384:	6322      	str	r2, [r4, #48]	; 0x30
 8001386:	e00c      	b.n	80013a2 <HAL_ADC_ConfigChannel+0xc2>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001388:	4413      	add	r3, r2
 800138a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800138c:	3b41      	subs	r3, #65	; 0x41
 800138e:	221f      	movs	r2, #31
 8001390:	409a      	lsls	r2, r3
 8001392:	ea27 0202 	bic.w	r2, r7, r2
 8001396:	62e2      	str	r2, [r4, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001398:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800139a:	fa06 f203 	lsl.w	r2, r6, r3
 800139e:	430a      	orrs	r2, r1
 80013a0:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013a2:	4b17      	ldr	r3, [pc, #92]	; (8001400 <HAL_ADC_ConfigChannel+0x120>)
 80013a4:	429c      	cmp	r4, r3
 80013a6:	d004      	beq.n	80013b2 <HAL_ADC_ConfigChannel+0xd2>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013a8:	2300      	movs	r3, #0
 80013aa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80013ae:	4618      	mov	r0, r3
 80013b0:	e023      	b.n	80013fa <HAL_ADC_ConfigChannel+0x11a>
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013b2:	2d12      	cmp	r5, #18
 80013b4:	d107      	bne.n	80013c6 <HAL_ADC_ConfigChannel+0xe6>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80013b6:	4a13      	ldr	r2, [pc, #76]	; (8001404 <HAL_ADC_ConfigChannel+0x124>)
 80013b8:	6853      	ldr	r3, [r2, #4]
 80013ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013be:	6053      	str	r3, [r2, #4]
 80013c0:	e7f2      	b.n	80013a8 <HAL_ADC_ConfigChannel+0xc8>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013c2:	2002      	movs	r0, #2
 80013c4:	e019      	b.n	80013fa <HAL_ADC_ConfigChannel+0x11a>
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_ADC_ConfigChannel+0x128>)
 80013c8:	429d      	cmp	r5, r3
 80013ca:	d001      	beq.n	80013d0 <HAL_ADC_ConfigChannel+0xf0>
 80013cc:	2d11      	cmp	r5, #17
 80013ce:	d1eb      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0xc8>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80013d0:	490c      	ldr	r1, [pc, #48]	; (8001404 <HAL_ADC_ConfigChannel+0x124>)
 80013d2:	684a      	ldr	r2, [r1, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80013d4:	429d      	cmp	r5, r3
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80013d6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013da:	604a      	str	r2, [r1, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80013dc:	d1e4      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0xc8>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <HAL_ADC_ConfigChannel+0x12c>)
 80013e0:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <HAL_ADC_ConfigChannel+0x130>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80013e8:	230a      	movs	r3, #10
 80013ea:	4353      	muls	r3, r2
      while(counter != 0U)
      {
        counter--;
 80013ec:	9301      	str	r3, [sp, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
      while(counter != 0U)
 80013ee:	9b01      	ldr	r3, [sp, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0d9      	beq.n	80013a8 <HAL_ADC_ConfigChannel+0xc8>
      {
        counter--;
 80013f4:	9b01      	ldr	r3, [sp, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	e7f8      	b.n	80013ec <HAL_ADC_ConfigChannel+0x10c>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return HAL_OK;
}
 80013fa:	b003      	add	sp, #12
 80013fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013fe:	bf00      	nop
 8001400:	40012000 	.word	0x40012000
 8001404:	40012300 	.word	0x40012300
 8001408:	10000012 	.word	0x10000012
 800140c:	20000000 	.word	0x20000000
 8001410:	000f4240 	.word	0x000f4240

08001414 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001414:	4770      	bx	lr
	...

08001418 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001418:	4a07      	ldr	r2, [pc, #28]	; (8001438 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800141a:	68d3      	ldr	r3, [r2, #12]
 800141c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001420:	041b      	lsls	r3, r3, #16
 8001422:	0c1b      	lsrs	r3, r3, #16
 8001424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001428:	0200      	lsls	r0, r0, #8
 800142a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001432:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001434:	60d3      	str	r3, [r2, #12]
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800143c:	4b17      	ldr	r3, [pc, #92]	; (800149c <HAL_NVIC_SetPriority+0x60>)
 800143e:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001440:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001444:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001446:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144a:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800144c:	2c04      	cmp	r4, #4
 800144e:	bf28      	it	cs
 8001450:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001452:	2d06      	cmp	r5, #6

  return (
 8001454:	f04f 0501 	mov.w	r5, #1
 8001458:	fa05 f404 	lsl.w	r4, r5, r4
 800145c:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001460:	bf8c      	ite	hi
 8001462:	3b03      	subhi	r3, #3
 8001464:	2300      	movls	r3, #0

  return (
 8001466:	400c      	ands	r4, r1
 8001468:	409c      	lsls	r4, r3
 800146a:	fa05 f303 	lsl.w	r3, r5, r3
 800146e:	3b01      	subs	r3, #1
 8001470:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001472:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001474:	ea42 0204 	orr.w	r2, r2, r4
 8001478:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147c:	bfaf      	iteee	ge
 800147e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001482:	f000 000f 	andlt.w	r0, r0, #15
 8001486:	4b06      	ldrlt	r3, [pc, #24]	; (80014a0 <HAL_NVIC_SetPriority+0x64>)
 8001488:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148a:	bfa5      	ittet	ge
 800148c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001490:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001492:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001494:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001498:	bd30      	pop	{r4, r5, pc}
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00
 80014a0:	e000ed14 	.word	0xe000ed14

080014a4 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80014a4:	0942      	lsrs	r2, r0, #5
 80014a6:	2301      	movs	r3, #1
 80014a8:	f000 001f 	and.w	r0, r0, #31
 80014ac:	fa03 f000 	lsl.w	r0, r3, r0
 80014b0:	4b01      	ldr	r3, [pc, #4]	; (80014b8 <HAL_NVIC_EnableIRQ+0x14>)
 80014b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80014b6:	4770      	bx	lr
 80014b8:	e000e100 	.word	0xe000e100

080014bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014bc:	3801      	subs	r0, #1
 80014be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80014c2:	d20a      	bcs.n	80014da <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c6:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c8:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ca:	21f0      	movs	r1, #240	; 0xf0
 80014cc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d2:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80014da:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000e010 	.word	0xe000e010
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80014ea:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80014ec:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80014ee:	bf0c      	ite	eq
 80014f0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80014f4:	f022 0204 	bicne.w	r2, r2, #4
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	4770      	bx	lr
 80014fc:	e000e010 	.word	0xe000e010

08001500 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001500:	4770      	bx	lr

08001502 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001502:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001504:	f7ff fffc 	bl	8001500 <HAL_SYSTICK_Callback>
 8001508:	bd08      	pop	{r3, pc}
	...

0800150c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800150c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001510:	4f67      	ldr	r7, [pc, #412]	; (80016b0 <HAL_GPIO_Init+0x1a4>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001512:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001514:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 80016b8 <HAL_GPIO_Init+0x1ac>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001518:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80016bc <HAL_GPIO_Init+0x1b0>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800151c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800151e:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001520:	9301      	str	r3, [sp, #4]
 8001522:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8001524:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8001526:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8001528:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 800152a:	ea34 0303 	bics.w	r3, r4, r3
 800152e:	f040 80b7 	bne.w	80016a0 <HAL_GPIO_Init+0x194>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001532:	684d      	ldr	r5, [r1, #4]
 8001534:	f025 0a10 	bic.w	sl, r5, #16
 8001538:	f1ba 0f02 	cmp.w	sl, #2
 800153c:	d114      	bne.n	8001568 <HAL_GPIO_Init+0x5c>
 800153e:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 8001542:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001546:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800154a:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800154e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001552:	230f      	movs	r3, #15
 8001554:	fa03 f30b 	lsl.w	r3, r3, fp
 8001558:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800155c:	690b      	ldr	r3, [r1, #16]
 800155e:	fa03 f30b 	lsl.w	r3, r3, fp
 8001562:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 8001564:	f8c9 3020 	str.w	r3, [r9, #32]
 8001568:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800156c:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001570:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001572:	fa09 f90b 	lsl.w	r9, r9, fp
 8001576:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157a:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800157e:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001582:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001586:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800158a:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800158c:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8001590:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001592:	d80f      	bhi.n	80015b4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001594:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001596:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001598:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 800159c:	fa06 f60b 	lsl.w	r6, r6, fp
 80015a0:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 80015a2:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a4:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015a6:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015aa:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015ae:	4096      	lsls	r6, r2
 80015b0:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 80015b2:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015b4:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015b6:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ba:	688b      	ldr	r3, [r1, #8]
 80015bc:	fa03 f30b 	lsl.w	r3, r3, fp
 80015c0:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 80015c4:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015c6:	00eb      	lsls	r3, r5, #3
 80015c8:	d56a      	bpl.n	80016a0 <HAL_GPIO_Init+0x194>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	9303      	str	r3, [sp, #12]
 80015ce:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015d2:	4b38      	ldr	r3, [pc, #224]	; (80016b4 <HAL_GPIO_Init+0x1a8>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d4:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80015d8:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 80015dc:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 80015e0:	f022 0903 	bic.w	r9, r2, #3
 80015e4:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 80015e8:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80015ec:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 80015f0:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80015f2:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f6:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015f8:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80015fc:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001600:	260f      	movs	r6, #15
 8001602:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001606:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001608:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800160c:	d018      	beq.n	8001640 <HAL_GPIO_Init+0x134>
 800160e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001612:	4298      	cmp	r0, r3
 8001614:	d016      	beq.n	8001644 <HAL_GPIO_Init+0x138>
 8001616:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800161a:	4298      	cmp	r0, r3
 800161c:	d014      	beq.n	8001648 <HAL_GPIO_Init+0x13c>
 800161e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001622:	4298      	cmp	r0, r3
 8001624:	d012      	beq.n	800164c <HAL_GPIO_Init+0x140>
 8001626:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800162a:	4298      	cmp	r0, r3
 800162c:	d010      	beq.n	8001650 <HAL_GPIO_Init+0x144>
 800162e:	4540      	cmp	r0, r8
 8001630:	d010      	beq.n	8001654 <HAL_GPIO_Init+0x148>
 8001632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001636:	4298      	cmp	r0, r3
 8001638:	bf14      	ite	ne
 800163a:	2307      	movne	r3, #7
 800163c:	2306      	moveq	r3, #6
 800163e:	e00a      	b.n	8001656 <HAL_GPIO_Init+0x14a>
 8001640:	2300      	movs	r3, #0
 8001642:	e008      	b.n	8001656 <HAL_GPIO_Init+0x14a>
 8001644:	2301      	movs	r3, #1
 8001646:	e006      	b.n	8001656 <HAL_GPIO_Init+0x14a>
 8001648:	2302      	movs	r3, #2
 800164a:	e004      	b.n	8001656 <HAL_GPIO_Init+0x14a>
 800164c:	2303      	movs	r3, #3
 800164e:	e002      	b.n	8001656 <HAL_GPIO_Init+0x14a>
 8001650:	2304      	movs	r3, #4
 8001652:	e000      	b.n	8001656 <HAL_GPIO_Init+0x14a>
 8001654:	2305      	movs	r3, #5
 8001656:	fa03 f30a 	lsl.w	r3, r3, sl
 800165a:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 800165c:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001660:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 8001662:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001664:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8001668:	bf0c      	ite	eq
 800166a:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 800166c:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 800166e:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8001672:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001676:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 800167a:	bf0c      	ite	eq
 800167c:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 800167e:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 8001680:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001682:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001684:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8001688:	bf0c      	ite	eq
 800168a:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 800168c:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 800168e:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8001692:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001696:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8001698:	bf54      	ite	pl
 800169a:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 800169c:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 800169e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016a0:	3201      	adds	r2, #1
 80016a2:	2a10      	cmp	r2, #16
 80016a4:	f47f af3e 	bne.w	8001524 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 80016a8:	b005      	add	sp, #20
 80016aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016ae:	bf00      	nop
 80016b0:	40013c00 	.word	0x40013c00
 80016b4:	40020000 	.word	0x40020000
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40021400 	.word	0x40021400

080016c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c0:	b902      	cbnz	r2, 80016c4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016c2:	0409      	lsls	r1, r1, #16
 80016c4:	6181      	str	r1, [r0, #24]
 80016c6:	4770      	bx	lr

080016c8 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80016c8:	6943      	ldr	r3, [r0, #20]
 80016ca:	4059      	eors	r1, r3
 80016cc:	6141      	str	r1, [r0, #20]
 80016ce:	4770      	bx	lr

080016d0 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80016d0:	4b55      	ldr	r3, [pc, #340]	; (8001828 <HAL_RCC_ClockConfig+0x158>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	f002 020f 	and.w	r2, r2, #15
 80016d8:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016de:	4605      	mov	r5, r0
 80016e0:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80016e2:	d30a      	bcc.n	80016fa <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e4:	6829      	ldr	r1, [r5, #0]
 80016e6:	0788      	lsls	r0, r1, #30
 80016e8:	d511      	bpl.n	800170e <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ea:	4850      	ldr	r0, [pc, #320]	; (800182c <HAL_RCC_ClockConfig+0x15c>)
 80016ec:	6883      	ldr	r3, [r0, #8]
 80016ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f2:	68ab      	ldr	r3, [r5, #8]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	6083      	str	r3, [r0, #8]
 80016f8:	e009      	b.n	800170e <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fa:	b2ca      	uxtb	r2, r1
 80016fc:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 030f 	and.w	r3, r3, #15
 8001704:	4299      	cmp	r1, r3
 8001706:	d0ed      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8001708:	2001      	movs	r0, #1
 800170a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800170e:	07c9      	lsls	r1, r1, #31
 8001710:	d406      	bmi.n	8001720 <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001712:	4b45      	ldr	r3, [pc, #276]	; (8001828 <HAL_RCC_ClockConfig+0x158>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	f002 020f 	and.w	r2, r2, #15
 800171a:	4296      	cmp	r6, r2
 800171c:	d351      	bcc.n	80017c2 <HAL_RCC_ClockConfig+0xf2>
 800171e:	e057      	b.n	80017d0 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001720:	686b      	ldr	r3, [r5, #4]
 8001722:	4a42      	ldr	r2, [pc, #264]	; (800182c <HAL_RCC_ClockConfig+0x15c>)
 8001724:	2b01      	cmp	r3, #1
 8001726:	d103      	bne.n	8001730 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001728:	6812      	ldr	r2, [r2, #0]
 800172a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800172e:	e008      	b.n	8001742 <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001730:	1e99      	subs	r1, r3, #2
 8001732:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001734:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001736:	d802      	bhi.n	800173e <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001738:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800173c:	e001      	b.n	8001742 <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173e:	f012 0f02 	tst.w	r2, #2
 8001742:	d0e1      	beq.n	8001708 <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001744:	4c39      	ldr	r4, [pc, #228]	; (800182c <HAL_RCC_ClockConfig+0x15c>)
 8001746:	68a2      	ldr	r2, [r4, #8]
 8001748:	f022 0203 	bic.w	r2, r2, #3
 800174c:	4313      	orrs	r3, r2
 800174e:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001750:	f7ff fc08 	bl	8000f64 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001754:	686b      	ldr	r3, [r5, #4]
 8001756:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001758:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175a:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175e:	d10c      	bne.n	800177a <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001760:	68a3      	ldr	r3, [r4, #8]
 8001762:	f003 030c 	and.w	r3, r3, #12
 8001766:	2b04      	cmp	r3, #4
 8001768:	d0d3      	beq.n	8001712 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800176a:	f7ff fbfb 	bl	8000f64 <HAL_GetTick>
 800176e:	1bc0      	subs	r0, r0, r7
 8001770:	4540      	cmp	r0, r8
 8001772:	d9f5      	bls.n	8001760 <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 8001774:	2003      	movs	r0, #3
 8001776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800177a:	2b02      	cmp	r3, #2
 800177c:	d10a      	bne.n	8001794 <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800177e:	68a3      	ldr	r3, [r4, #8]
 8001780:	f003 030c 	and.w	r3, r3, #12
 8001784:	2b08      	cmp	r3, #8
 8001786:	d0c4      	beq.n	8001712 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001788:	f7ff fbec 	bl	8000f64 <HAL_GetTick>
 800178c:	1bc0      	subs	r0, r0, r7
 800178e:	4540      	cmp	r0, r8
 8001790:	d9f5      	bls.n	800177e <HAL_RCC_ClockConfig+0xae>
 8001792:	e7ef      	b.n	8001774 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8001794:	2b03      	cmp	r3, #3
 8001796:	d10f      	bne.n	80017b8 <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001798:	68a3      	ldr	r3, [r4, #8]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	2b0c      	cmp	r3, #12
 80017a0:	d0b7      	beq.n	8001712 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a2:	f7ff fbdf 	bl	8000f64 <HAL_GetTick>
 80017a6:	1bc0      	subs	r0, r0, r7
 80017a8:	4540      	cmp	r0, r8
 80017aa:	d9f5      	bls.n	8001798 <HAL_RCC_ClockConfig+0xc8>
 80017ac:	e7e2      	b.n	8001774 <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ae:	f7ff fbd9 	bl	8000f64 <HAL_GetTick>
 80017b2:	1bc0      	subs	r0, r0, r7
 80017b4:	4540      	cmp	r0, r8
 80017b6:	d8dd      	bhi.n	8001774 <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017b8:	68a3      	ldr	r3, [r4, #8]
 80017ba:	f013 0f0c 	tst.w	r3, #12
 80017be:	d1f6      	bne.n	80017ae <HAL_RCC_ClockConfig+0xde>
 80017c0:	e7a7      	b.n	8001712 <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c2:	b2f2      	uxtb	r2, r6
 80017c4:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 030f 	and.w	r3, r3, #15
 80017cc:	429e      	cmp	r6, r3
 80017ce:	d19b      	bne.n	8001708 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d0:	6829      	ldr	r1, [r5, #0]
 80017d2:	074a      	lsls	r2, r1, #29
 80017d4:	d506      	bpl.n	80017e4 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d6:	4815      	ldr	r0, [pc, #84]	; (800182c <HAL_RCC_ClockConfig+0x15c>)
 80017d8:	6883      	ldr	r3, [r0, #8]
 80017da:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017de:	68eb      	ldr	r3, [r5, #12]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e4:	070b      	lsls	r3, r1, #28
 80017e6:	d507      	bpl.n	80017f8 <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017e8:	4a10      	ldr	r2, [pc, #64]	; (800182c <HAL_RCC_ClockConfig+0x15c>)
 80017ea:	6929      	ldr	r1, [r5, #16]
 80017ec:	6893      	ldr	r3, [r2, #8]
 80017ee:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80017f2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80017f6:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80017f8:	f000 fa00 	bl	8001bfc <HAL_RCC_GetSysClockFreq>
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_RCC_ClockConfig+0x15c>)
 80017fe:	22f0      	movs	r2, #240	; 0xf0
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	fa92 f2a2 	rbit	r2, r2
 8001806:	fab2 f282 	clz	r2, r2
 800180a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800180e:	40d3      	lsrs	r3, r2
 8001810:	4a07      	ldr	r2, [pc, #28]	; (8001830 <HAL_RCC_ClockConfig+0x160>)
 8001812:	5cd3      	ldrb	r3, [r2, r3]
 8001814:	40d8      	lsrs	r0, r3
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <HAL_RCC_ClockConfig+0x164>)
 8001818:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800181a:	2000      	movs	r0, #0
 800181c:	f7ff fb6c 	bl	8000ef8 <HAL_InitTick>
  
  return HAL_OK;
 8001820:	2000      	movs	r0, #0
}
 8001822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001826:	bf00      	nop
 8001828:	40023c00 	.word	0x40023c00
 800182c:	40023800 	.word	0x40023800
 8001830:	08005760 	.word	0x08005760
 8001834:	20000000 	.word	0x20000000

08001838 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001838:	4b01      	ldr	r3, [pc, #4]	; (8001840 <HAL_RCC_GetHCLKFreq+0x8>)
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000000 	.word	0x20000000

08001844 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001846:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	fa92 f2a2 	rbit	r2, r2
 8001850:	fab2 f282 	clz	r2, r2
 8001854:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001858:	40d3      	lsrs	r3, r2
 800185a:	4a04      	ldr	r2, [pc, #16]	; (800186c <HAL_RCC_GetPCLK1Freq+0x28>)
 800185c:	5cd3      	ldrb	r3, [r2, r3]
 800185e:	4a04      	ldr	r2, [pc, #16]	; (8001870 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001860:	6810      	ldr	r0, [r2, #0]
}
 8001862:	40d8      	lsrs	r0, r3
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800
 800186c:	08005760 	.word	0x08005760
 8001870:	20000000 	.word	0x20000000

08001874 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001876:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	fa92 f2a2 	rbit	r2, r2
 8001880:	fab2 f282 	clz	r2, r2
 8001884:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001888:	40d3      	lsrs	r3, r2
 800188a:	4a04      	ldr	r2, [pc, #16]	; (800189c <HAL_RCC_GetPCLK2Freq+0x28>)
 800188c:	5cd3      	ldrb	r3, [r2, r3]
 800188e:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001890:	6810      	ldr	r0, [r2, #0]
} 
 8001892:	40d8      	lsrs	r0, r3
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800
 800189c:	08005760 	.word	0x08005760
 80018a0:	20000000 	.word	0x20000000

080018a4 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a4:	6803      	ldr	r3, [r0, #0]
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018aa:	07de      	lsls	r6, r3, #31
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ac:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ae:	d403      	bmi.n	80018b8 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b0:	6823      	ldr	r3, [r4, #0]
 80018b2:	079d      	lsls	r5, r3, #30
 80018b4:	d458      	bmi.n	8001968 <HAL_RCC_OscConfig+0xc4>
 80018b6:	e0b1      	b.n	8001a1c <HAL_RCC_OscConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018b8:	4b97      	ldr	r3, [pc, #604]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	f002 020c 	and.w	r2, r2, #12
 80018c0:	2a04      	cmp	r2, #4
 80018c2:	d010      	beq.n	80018e6 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018c4:	689a      	ldr	r2, [r3, #8]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018c6:	f002 020c 	and.w	r2, r2, #12
 80018ca:	2a08      	cmp	r2, #8
 80018cc:	d102      	bne.n	80018d4 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	0258      	lsls	r0, r3, #9
 80018d2:	d408      	bmi.n	80018e6 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018d4:	4b90      	ldr	r3, [pc, #576]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 80018d6:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018d8:	f002 020c 	and.w	r2, r2, #12
 80018dc:	2a0c      	cmp	r2, #12
 80018de:	d10b      	bne.n	80018f8 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	0251      	lsls	r1, r2, #9
 80018e4:	d508      	bpl.n	80018f8 <HAL_RCC_OscConfig+0x54>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e6:	4b8c      	ldr	r3, [pc, #560]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	039a      	lsls	r2, r3, #14
 80018ec:	d5e0      	bpl.n	80018b0 <HAL_RCC_OscConfig+0xc>
 80018ee:	6863      	ldr	r3, [r4, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1dd      	bne.n	80018b0 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 80018f4:	2001      	movs	r0, #1
 80018f6:	e17a      	b.n	8001bee <HAL_RCC_OscConfig+0x34a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f8:	6862      	ldr	r2, [r4, #4]
 80018fa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80018fe:	d104      	bne.n	800190a <HAL_RCC_OscConfig+0x66>
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	e014      	b.n	8001934 <HAL_RCC_OscConfig+0x90>
 800190a:	4d83      	ldr	r5, [pc, #524]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 800190c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001910:	682b      	ldr	r3, [r5, #0]
 8001912:	d107      	bne.n	8001924 <HAL_RCC_OscConfig+0x80>
 8001914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001918:	602b      	str	r3, [r5, #0]
 800191a:	682b      	ldr	r3, [r5, #0]
 800191c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001920:	602b      	str	r3, [r5, #0]
 8001922:	e007      	b.n	8001934 <HAL_RCC_OscConfig+0x90>
 8001924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001928:	602b      	str	r3, [r5, #0]
 800192a:	682b      	ldr	r3, [r5, #0]
 800192c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001930:	602b      	str	r3, [r5, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001932:	b16a      	cbz	r2, 8001950 <HAL_RCC_OscConfig+0xac>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001934:	f7ff fb16 	bl	8000f64 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001938:	4d77      	ldr	r5, [pc, #476]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193a:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193c:	682b      	ldr	r3, [r5, #0]
 800193e:	039b      	lsls	r3, r3, #14
 8001940:	d4b6      	bmi.n	80018b0 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001942:	f7ff fb0f 	bl	8000f64 <HAL_GetTick>
 8001946:	1b80      	subs	r0, r0, r6
 8001948:	2864      	cmp	r0, #100	; 0x64
 800194a:	d9f7      	bls.n	800193c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800194c:	2003      	movs	r0, #3
 800194e:	e14e      	b.n	8001bee <HAL_RCC_OscConfig+0x34a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff fb08 	bl	8000f64 <HAL_GetTick>
 8001954:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001956:	682b      	ldr	r3, [r5, #0]
 8001958:	039f      	lsls	r7, r3, #14
 800195a:	d5a9      	bpl.n	80018b0 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800195c:	f7ff fb02 	bl	8000f64 <HAL_GetTick>
 8001960:	1b80      	subs	r0, r0, r6
 8001962:	2864      	cmp	r0, #100	; 0x64
 8001964:	d9f7      	bls.n	8001956 <HAL_RCC_OscConfig+0xb2>
 8001966:	e7f1      	b.n	800194c <HAL_RCC_OscConfig+0xa8>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001968:	4b6b      	ldr	r3, [pc, #428]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	f012 0f0c 	tst.w	r2, #12
 8001970:	d010      	beq.n	8001994 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001972:	689a      	ldr	r2, [r3, #8]
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001974:	f002 020c 	and.w	r2, r2, #12
 8001978:	2a08      	cmp	r2, #8
 800197a:	d102      	bne.n	8001982 <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	0258      	lsls	r0, r3, #9
 8001980:	d508      	bpl.n	8001994 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001982:	4a65      	ldr	r2, [pc, #404]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001984:	6893      	ldr	r3, [r2, #8]
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	2b0c      	cmp	r3, #12
 800198c:	d117      	bne.n	80019be <HAL_RCC_OscConfig+0x11a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800198e:	6853      	ldr	r3, [r2, #4]
 8001990:	0259      	lsls	r1, r3, #9
 8001992:	d414      	bmi.n	80019be <HAL_RCC_OscConfig+0x11a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001994:	4b60      	ldr	r3, [pc, #384]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	0792      	lsls	r2, r2, #30
 800199a:	d502      	bpl.n	80019a2 <HAL_RCC_OscConfig+0xfe>
 800199c:	68e2      	ldr	r2, [r4, #12]
 800199e:	2a01      	cmp	r2, #1
 80019a0:	d1a8      	bne.n	80018f4 <HAL_RCC_OscConfig+0x50>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	21f8      	movs	r1, #248	; 0xf8
 80019a6:	fa91 f1a1 	rbit	r1, r1
 80019aa:	6920      	ldr	r0, [r4, #16]
 80019ac:	fab1 f181 	clz	r1, r1
 80019b0:	fa00 f101 	lsl.w	r1, r0, r1
 80019b4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80019b8:	430a      	orrs	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019bc:	e02e      	b.n	8001a1c <HAL_RCC_OscConfig+0x178>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019be:	68e2      	ldr	r2, [r4, #12]
 80019c0:	4b56      	ldr	r3, [pc, #344]	; (8001b1c <HAL_RCC_OscConfig+0x278>)
 80019c2:	b1ea      	cbz	r2, 8001a00 <HAL_RCC_OscConfig+0x15c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c4:	2201      	movs	r2, #1
 80019c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7ff facc 	bl	8000f64 <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019cc:	4d52      	ldr	r5, [pc, #328]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ce:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d0:	682b      	ldr	r3, [r5, #0]
 80019d2:	4851      	ldr	r0, [pc, #324]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 80019d4:	079b      	lsls	r3, r3, #30
 80019d6:	d405      	bmi.n	80019e4 <HAL_RCC_OscConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d8:	f7ff fac4 	bl	8000f64 <HAL_GetTick>
 80019dc:	1b80      	subs	r0, r0, r6
 80019de:	2802      	cmp	r0, #2
 80019e0:	d9f6      	bls.n	80019d0 <HAL_RCC_OscConfig+0x12c>
 80019e2:	e7b3      	b.n	800194c <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e4:	6803      	ldr	r3, [r0, #0]
 80019e6:	22f8      	movs	r2, #248	; 0xf8
 80019e8:	fa92 f2a2 	rbit	r2, r2
 80019ec:	6921      	ldr	r1, [r4, #16]
 80019ee:	fab2 f282 	clz	r2, r2
 80019f2:	fa01 f202 	lsl.w	r2, r1, r2
 80019f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80019fa:	4313      	orrs	r3, r2
 80019fc:	6003      	str	r3, [r0, #0]
 80019fe:	e00d      	b.n	8001a1c <HAL_RCC_OscConfig+0x178>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a02:	f7ff faaf 	bl	8000f64 <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a06:	4d44      	ldr	r5, [pc, #272]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a08:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0a:	682b      	ldr	r3, [r5, #0]
 8001a0c:	079f      	lsls	r7, r3, #30
 8001a0e:	d505      	bpl.n	8001a1c <HAL_RCC_OscConfig+0x178>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a10:	f7ff faa8 	bl	8000f64 <HAL_GetTick>
 8001a14:	1b80      	subs	r0, r0, r6
 8001a16:	2802      	cmp	r0, #2
 8001a18:	d9f7      	bls.n	8001a0a <HAL_RCC_OscConfig+0x166>
 8001a1a:	e797      	b.n	800194c <HAL_RCC_OscConfig+0xa8>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	071e      	lsls	r6, r3, #28
 8001a20:	d403      	bmi.n	8001a2a <HAL_RCC_OscConfig+0x186>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a22:	6823      	ldr	r3, [r4, #0]
 8001a24:	075d      	lsls	r5, r3, #29
 8001a26:	d548      	bpl.n	8001aba <HAL_RCC_OscConfig+0x216>
 8001a28:	e01f      	b.n	8001a6a <HAL_RCC_OscConfig+0x1c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a2a:	6962      	ldr	r2, [r4, #20]
 8001a2c:	4b3c      	ldr	r3, [pc, #240]	; (8001b20 <HAL_RCC_OscConfig+0x27c>)
 8001a2e:	b172      	cbz	r2, 8001a4e <HAL_RCC_OscConfig+0x1aa>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a30:	2201      	movs	r2, #1
 8001a32:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a34:	f7ff fa96 	bl	8000f64 <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a38:	4d37      	ldr	r5, [pc, #220]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3a:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001a3e:	0798      	lsls	r0, r3, #30
 8001a40:	d4ef      	bmi.n	8001a22 <HAL_RCC_OscConfig+0x17e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a42:	f7ff fa8f 	bl	8000f64 <HAL_GetTick>
 8001a46:	1b80      	subs	r0, r0, r6
 8001a48:	2802      	cmp	r0, #2
 8001a4a:	d9f7      	bls.n	8001a3c <HAL_RCC_OscConfig+0x198>
 8001a4c:	e77e      	b.n	800194c <HAL_RCC_OscConfig+0xa8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a50:	f7ff fa88 	bl	8000f64 <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a54:	4d30      	ldr	r5, [pc, #192]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a56:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a58:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001a5a:	0799      	lsls	r1, r3, #30
 8001a5c:	d5e1      	bpl.n	8001a22 <HAL_RCC_OscConfig+0x17e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a5e:	f7ff fa81 	bl	8000f64 <HAL_GetTick>
 8001a62:	1b80      	subs	r0, r0, r6
 8001a64:	2802      	cmp	r0, #2
 8001a66:	d9f7      	bls.n	8001a58 <HAL_RCC_OscConfig+0x1b4>
 8001a68:	e770      	b.n	800194c <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	9301      	str	r3, [sp, #4]
 8001a6e:	4b2a      	ldr	r3, [pc, #168]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001a70:	4d2c      	ldr	r5, [pc, #176]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a74:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a78:	641a      	str	r2, [r3, #64]	; 0x40
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001a84:	682b      	ldr	r3, [r5, #0]
 8001a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8a:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a8c:	f7ff fa6a 	bl	8000f64 <HAL_GetTick>
 8001a90:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001a92:	682b      	ldr	r3, [r5, #0]
 8001a94:	05da      	lsls	r2, r3, #23
 8001a96:	d513      	bpl.n	8001ac0 <HAL_RCC_OscConfig+0x21c>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a98:	68a3      	ldr	r3, [r4, #8]
 8001a9a:	4d1f      	ldr	r5, [pc, #124]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d115      	bne.n	8001acc <HAL_RCC_OscConfig+0x228>
 8001aa0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa8:	f7ff fa5c 	bl	8000f64 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aac:	4d1a      	ldr	r5, [pc, #104]	; (8001b18 <HAL_RCC_OscConfig+0x274>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aae:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ab0:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001ab6:	079b      	lsls	r3, r3, #30
 8001ab8:	d519      	bpl.n	8001aee <HAL_RCC_OscConfig+0x24a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aba:	69a2      	ldr	r2, [r4, #24]
 8001abc:	bba2      	cbnz	r2, 8001b28 <HAL_RCC_OscConfig+0x284>
 8001abe:	e07b      	b.n	8001bb8 <HAL_RCC_OscConfig+0x314>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ac0:	f7ff fa50 	bl	8000f64 <HAL_GetTick>
 8001ac4:	1b80      	subs	r0, r0, r6
 8001ac6:	2802      	cmp	r0, #2
 8001ac8:	d9e3      	bls.n	8001a92 <HAL_RCC_OscConfig+0x1ee>
 8001aca:	e73f      	b.n	800194c <HAL_RCC_OscConfig+0xa8>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001acc:	2b05      	cmp	r3, #5
 8001ace:	d104      	bne.n	8001ada <HAL_RCC_OscConfig+0x236>
 8001ad0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001ad2:	f043 0304 	orr.w	r3, r3, #4
 8001ad6:	672b      	str	r3, [r5, #112]	; 0x70
 8001ad8:	e7e2      	b.n	8001aa0 <HAL_RCC_OscConfig+0x1fc>
 8001ada:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001adc:	f022 0201 	bic.w	r2, r2, #1
 8001ae0:	672a      	str	r2, [r5, #112]	; 0x70
 8001ae2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001ae4:	f022 0204 	bic.w	r2, r2, #4
 8001ae8:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001aea:	b133      	cbz	r3, 8001afa <HAL_RCC_OscConfig+0x256>
 8001aec:	e7dc      	b.n	8001aa8 <HAL_RCC_OscConfig+0x204>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aee:	f7ff fa39 	bl	8000f64 <HAL_GetTick>
 8001af2:	1b80      	subs	r0, r0, r6
 8001af4:	42b8      	cmp	r0, r7
 8001af6:	d9dd      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x210>
 8001af8:	e728      	b.n	800194c <HAL_RCC_OscConfig+0xa8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afa:	f7ff fa33 	bl	8000f64 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001afe:	f241 3788 	movw	r7, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b02:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b04:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b06:	0798      	lsls	r0, r3, #30
 8001b08:	d5d7      	bpl.n	8001aba <HAL_RCC_OscConfig+0x216>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b0a:	f7ff fa2b 	bl	8000f64 <HAL_GetTick>
 8001b0e:	1b80      	subs	r0, r0, r6
 8001b10:	42b8      	cmp	r0, r7
 8001b12:	d9f7      	bls.n	8001b04 <HAL_RCC_OscConfig+0x260>
 8001b14:	e71a      	b.n	800194c <HAL_RCC_OscConfig+0xa8>
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	42470000 	.word	0x42470000
 8001b20:	42470e80 	.word	0x42470e80
 8001b24:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b28:	4d32      	ldr	r5, [pc, #200]	; (8001bf4 <HAL_RCC_OscConfig+0x350>)
 8001b2a:	68ab      	ldr	r3, [r5, #8]
 8001b2c:	f003 030c 	and.w	r3, r3, #12
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	f43f aedf 	beq.w	80018f4 <HAL_RCC_OscConfig+0x50>
 8001b36:	4e30      	ldr	r6, [pc, #192]	; (8001bf8 <HAL_RCC_OscConfig+0x354>)
 8001b38:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b3a:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3c:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b3e:	d14a      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x332>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7ff fa10 	bl	8000f64 <HAL_GetTick>
 8001b44:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b46:	682b      	ldr	r3, [r5, #0]
 8001b48:	4f2a      	ldr	r7, [pc, #168]	; (8001bf4 <HAL_RCC_OscConfig+0x350>)
 8001b4a:	0199      	lsls	r1, r3, #6
 8001b4c:	d436      	bmi.n	8001bbc <HAL_RCC_OscConfig+0x318>
 8001b4e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001b52:	fa92 f2a2 	rbit	r2, r2
 8001b56:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b5a:	fab2 fc82 	clz	ip, r2
 8001b5e:	fa93 f3a3 	rbit	r3, r3
 8001b62:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8001b66:	fab3 fe83 	clz	lr, r3
 8001b6a:	fa91 f1a1 	rbit	r1, r1
 8001b6e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001b72:	fab1 f581 	clz	r5, r1
 8001b76:	fa92 f2a2 	rbit	r2, r2
 8001b7a:	69e3      	ldr	r3, [r4, #28]
 8001b7c:	fab2 f082 	clz	r0, r2
 8001b80:	6a22      	ldr	r2, [r4, #32]
 8001b82:	ea43 0102 	orr.w	r1, r3, r2
 8001b86:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b8a:	fa02 f20c 	lsl.w	r2, r2, ip
 8001b8e:	4311      	orrs	r1, r2
 8001b90:	085a      	lsrs	r2, r3, #1
 8001b92:	3a01      	subs	r2, #1
 8001b94:	fa02 f30e 	lsl.w	r3, r2, lr
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001b9c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001b9e:	40a9      	lsls	r1, r5
 8001ba0:	430b      	orrs	r3, r1
 8001ba2:	4082      	lsls	r2, r0
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	607b      	str	r3, [r7, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba8:	2301      	movs	r3, #1
 8001baa:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bac:	f7ff f9da 	bl	8000f64 <HAL_GetTick>
 8001bb0:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	019a      	lsls	r2, r3, #6
 8001bb6:	d508      	bpl.n	8001bca <HAL_RCC_OscConfig+0x326>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001bb8:	2000      	movs	r0, #0
 8001bba:	e018      	b.n	8001bee <HAL_RCC_OscConfig+0x34a>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bbc:	f7ff f9d2 	bl	8000f64 <HAL_GetTick>
 8001bc0:	ebc8 0000 	rsb	r0, r8, r0
 8001bc4:	2802      	cmp	r0, #2
 8001bc6:	d9be      	bls.n	8001b46 <HAL_RCC_OscConfig+0x2a2>
 8001bc8:	e6c0      	b.n	800194c <HAL_RCC_OscConfig+0xa8>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bca:	f7ff f9cb 	bl	8000f64 <HAL_GetTick>
 8001bce:	1b00      	subs	r0, r0, r4
 8001bd0:	2802      	cmp	r0, #2
 8001bd2:	d9ee      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x30e>
 8001bd4:	e6ba      	b.n	800194c <HAL_RCC_OscConfig+0xa8>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd6:	f7ff f9c5 	bl	8000f64 <HAL_GetTick>
 8001bda:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bdc:	682b      	ldr	r3, [r5, #0]
 8001bde:	019b      	lsls	r3, r3, #6
 8001be0:	d5ea      	bpl.n	8001bb8 <HAL_RCC_OscConfig+0x314>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be2:	f7ff f9bf 	bl	8000f64 <HAL_GetTick>
 8001be6:	1b00      	subs	r0, r0, r4
 8001be8:	2802      	cmp	r0, #2
 8001bea:	d9f7      	bls.n	8001bdc <HAL_RCC_OscConfig+0x338>
 8001bec:	e6ae      	b.n	800194c <HAL_RCC_OscConfig+0xa8>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001bee:	b002      	add	sp, #8
 8001bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	42470060 	.word	0x42470060

08001bfc <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bfc:	4930      	ldr	r1, [pc, #192]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001bfe:	6888      	ldr	r0, [r1, #8]
 8001c00:	f000 000c 	and.w	r0, r0, #12
 8001c04:	2808      	cmp	r0, #8
 8001c06:	d008      	beq.n	8001c1a <HAL_RCC_GetSysClockFreq+0x1e>
 8001c08:	280c      	cmp	r0, #12
 8001c0a:	d02f      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0x70>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c0c:	4a2d      	ldr	r2, [pc, #180]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c0e:	4b2e      	ldr	r3, [pc, #184]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001c10:	2804      	cmp	r0, #4
 8001c12:	bf0c      	ite	eq
 8001c14:	4618      	moveq	r0, r3
 8001c16:	4610      	movne	r0, r2
 8001c18:	4770      	bx	lr
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c1a:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c1c:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c1e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c22:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001c26:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001c2a:	684b      	ldr	r3, [r1, #4]
 8001c2c:	fa92 f2a2 	rbit	r2, r2
 8001c30:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001c34:	fab2 f282 	clz	r2, r2
 8001c38:	ea01 0103 	and.w	r1, r1, r3
 8001c3c:	fa21 f102 	lsr.w	r1, r1, r2
 8001c40:	bf14      	ite	ne
 8001c42:	4a21      	ldrne	r2, [pc, #132]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xcc>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001c44:	4a1f      	ldreq	r2, [pc, #124]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c46:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001c4a:	4a1d      	ldr	r2, [pc, #116]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xc4>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001c4c:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001c50:	6852      	ldr	r2, [r2, #4]
 8001c52:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001c56:	fa90 f0a0 	rbit	r0, r0
 8001c5a:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8001c5e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8001c62:	fa22 f000 	lsr.w	r0, r2, r0
 8001c66:	3001      	adds	r0, #1
 8001c68:	0040      	lsls	r0, r0, #1
 8001c6a:	e025      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xbc>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c6c:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c6e:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c70:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c74:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001c78:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001c7c:	684b      	ldr	r3, [r1, #4]
 8001c7e:	fa92 f2a2 	rbit	r2, r2
 8001c82:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001c86:	fab2 f282 	clz	r2, r2
 8001c8a:	ea01 0103 	and.w	r1, r1, r3
 8001c8e:	fa21 f102 	lsr.w	r1, r1, r2
 8001c92:	bf14      	ite	ne
 8001c94:	4a0c      	ldrne	r2, [pc, #48]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xcc>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001c96:	4a0b      	ldreq	r2, [pc, #44]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c98:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 8001c9c:	4a08      	ldr	r2, [pc, #32]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xc4>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001c9e:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 8001ca2:	6852      	ldr	r2, [r2, #4]
 8001ca4:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 8001ca8:	fa90 f0a0 	rbit	r0, r0
 8001cac:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllr;
 8001cb0:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001cb4:	fa22 f000 	lsr.w	r0, r2, r0
 8001cb8:	fbb3 f0f0 	udiv	r0, r3, r0
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	00f42400 	.word	0x00f42400
 8001cc8:	007a1200 	.word	0x007a1200

08001ccc <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cd0:	9e06      	ldr	r6, [sp, #24]
 8001cd2:	4604      	mov	r4, r0
 8001cd4:	4688      	mov	r8, r1
 8001cd6:	4617      	mov	r7, r2
 8001cd8:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001cda:	6822      	ldr	r2, [r4, #0]
 8001cdc:	6893      	ldr	r3, [r2, #8]
 8001cde:	ea38 0303 	bics.w	r3, r8, r3
 8001ce2:	bf0c      	ite	eq
 8001ce4:	2301      	moveq	r3, #1
 8001ce6:	2300      	movne	r3, #0
 8001ce8:	429f      	cmp	r7, r3
 8001cea:	d033      	beq.n	8001d54 <SPI_WaitFlagStateUntilTimeout+0x88>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001cec:	1c6b      	adds	r3, r5, #1
 8001cee:	d0f5      	beq.n	8001cdc <SPI_WaitFlagStateUntilTimeout+0x10>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001cf0:	b94d      	cbnz	r5, 8001d06 <SPI_WaitFlagStateUntilTimeout+0x3a>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001cf2:	6823      	ldr	r3, [r4, #0]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001cfa:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001cfc:	6862      	ldr	r2, [r4, #4]
 8001cfe:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001d02:	d111      	bne.n	8001d28 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8001d04:	e005      	b.n	8001d12 <SPI_WaitFlagStateUntilTimeout+0x46>
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001d06:	f7ff f92d 	bl	8000f64 <HAL_GetTick>
 8001d0a:	1b80      	subs	r0, r0, r6
 8001d0c:	4285      	cmp	r5, r0
 8001d0e:	d8e4      	bhi.n	8001cda <SPI_WaitFlagStateUntilTimeout+0xe>
 8001d10:	e7ef      	b.n	8001cf2 <SPI_WaitFlagStateUntilTimeout+0x26>
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d12:	68a2      	ldr	r2, [r4, #8]
 8001d14:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001d18:	d002      	beq.n	8001d20 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001d1a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001d1e:	d103      	bne.n	8001d28 <SPI_WaitFlagStateUntilTimeout+0x5c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d28:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001d2a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001d2e:	d108      	bne.n	8001d42 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
 8001d30:	6819      	ldr	r1, [r3, #0]
 8001d32:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 8001d36:	400a      	ands	r2, r1
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d40:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8001d42:	2301      	movs	r3, #1
 8001d44:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001d4e:	2003      	movs	r0, #3
 8001d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001d54:	2000      	movs	r0, #0
}
 8001d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001d5a <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001d5a:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	9200      	str	r2, [sp, #0]
 8001d60:	2180      	movs	r1, #128	; 0x80
 8001d62:	2200      	movs	r2, #0
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001d64:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d66:	f7ff ffb1 	bl	8001ccc <SPI_WaitFlagStateUntilTimeout>
 8001d6a:	b120      	cbz	r0, 8001d76 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d6c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d6e:	f043 0320 	orr.w	r3, r3, #32
 8001d72:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8001d74:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8001d76:	b002      	add	sp, #8
 8001d78:	bd10      	pop	{r4, pc}

08001d7a <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d7a:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001d7c:	4604      	mov	r4, r0
 8001d7e:	2800      	cmp	r0, #0
 8001d80:	d036      	beq.n	8001df0 <HAL_SPI_Init+0x76>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001d86:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001d8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d8e:	b91b      	cbnz	r3, 8001d98 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d90:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d94:	f000 fd22 	bl	80027dc <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d98:	68a1      	ldr	r1, [r4, #8]
 8001d9a:	6860      	ldr	r0, [r4, #4]
 8001d9c:	4308      	orrs	r0, r1
 8001d9e:	68e1      	ldr	r1, [r4, #12]
 8001da0:	4308      	orrs	r0, r1
 8001da2:	6921      	ldr	r1, [r4, #16]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001da4:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001da6:	4308      	orrs	r0, r1
 8001da8:	6961      	ldr	r1, [r4, #20]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001daa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001dae:	6823      	ldr	r3, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001db0:	4308      	orrs	r0, r1
 8001db2:	69e1      	ldr	r1, [r4, #28]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001db4:	681a      	ldr	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001db6:	4308      	orrs	r0, r1
 8001db8:	6a21      	ldr	r1, [r4, #32]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001dc0:	4308      	orrs	r0, r1
 8001dc2:	69a2      	ldr	r2, [r4, #24]
 8001dc4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001dc6:	4308      	orrs	r0, r1
 8001dc8:	f402 7100 	and.w	r1, r2, #512	; 0x200
 8001dcc:	4301      	orrs	r1, r0
 8001dce:	6019      	str	r1, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001dd0:	0c12      	lsrs	r2, r2, #16
 8001dd2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001dd4:	f002 0204 	and.w	r2, r2, #4
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ddc:	69da      	ldr	r2, [r3, #28]
 8001dde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001de2:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001de4:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001de6:	2301      	movs	r3, #1
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001de8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001dea:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8001dee:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
    return HAL_ERROR;
 8001df0:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
}
 8001df2:	bd10      	pop	{r4, pc}

08001df4 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001df4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001df8:	461e      	mov	r6, r3

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001dfa:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001dfe:	2b01      	cmp	r3, #1
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e00:	4604      	mov	r4, r0
 8001e02:	460d      	mov	r5, r1
 8001e04:	4690      	mov	r8, r2

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e06:	f000 809e 	beq.w	8001f46 <HAL_SPI_Transmit+0x152>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e10:	f7ff f8a8 	bl	8000f64 <HAL_GetTick>
 8001e14:	4607      	mov	r7, r0

  if(hspi->State != HAL_SPI_STATE_READY)
 8001e16:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001e1a:	b2c0      	uxtb	r0, r0
 8001e1c:	2801      	cmp	r0, #1
 8001e1e:	f040 808a 	bne.w	8001f36 <HAL_SPI_Transmit+0x142>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if((pData == NULL ) || (Size == 0U))
 8001e22:	2d00      	cmp	r5, #0
 8001e24:	f000 8088 	beq.w	8001f38 <HAL_SPI_Transmit+0x144>
 8001e28:	f1b8 0f00 	cmp.w	r8, #0
 8001e2c:	f000 8084 	beq.w	8001f38 <HAL_SPI_Transmit+0x144>
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e30:	2303      	movs	r3, #3
 8001e32:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e3a:	63a3      	str	r3, [r4, #56]	; 0x38
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;
 8001e3c:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
  hspi->RxXferSize  = 0U;
 8001e40:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001e42:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001e44:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001e46:	6423      	str	r3, [r4, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e48:	68a3      	ldr	r3, [r4, #8]
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e4a:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->RxXferCount = 0U;
  hspi->TxISR       = NULL;
  hspi->RxISR       = NULL;

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e50:	6823      	ldr	r3, [r4, #0]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pData;
  hspi->TxXferSize  = Size;
 8001e52:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
  {
    SPI_1LINE_TX(hspi);
 8001e56:	bf02      	ittt	eq
 8001e58:	681a      	ldreq	r2, [r3, #0]
 8001e5a:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8001e5e:	601a      	streq	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	0652      	lsls	r2, r2, #25
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e64:	bf5e      	ittt	pl
 8001e66:	681a      	ldrpl	r2, [r3, #0]
 8001e68:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8001e6c:	601a      	strpl	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e6e:	68e2      	ldr	r2, [r4, #12]
 8001e70:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001e74:	6862      	ldr	r2, [r4, #4]
 8001e76:	d11e      	bne.n	8001eb6 <HAL_SPI_Transmit+0xc2>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8001e78:	b172      	cbz	r2, 8001e98 <HAL_SPI_Transmit+0xa4>
 8001e7a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001e7c:	b292      	uxth	r2, r2
 8001e7e:	2a01      	cmp	r2, #1
 8001e80:	d103      	bne.n	8001e8a <HAL_SPI_Transmit+0x96>
 8001e82:	e009      	b.n	8001e98 <HAL_SPI_Transmit+0xa4>
          hspi->TxXferCount--;
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001e84:	b1ae      	cbz	r6, 8001eb2 <HAL_SPI_Transmit+0xbe>
 8001e86:	1c71      	adds	r1, r6, #1
 8001e88:	d10e      	bne.n	8001ea8 <HAL_SPI_Transmit+0xb4>
      hspi->Instance->DR = *((uint16_t *)pData);
      pData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e8a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	b1d3      	cbz	r3, 8001ec6 <HAL_SPI_Transmit+0xd2>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	0790      	lsls	r0, r2, #30
 8001e96:	d5f5      	bpl.n	8001e84 <HAL_SPI_Transmit+0x90>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8001e98:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001e9c:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
          hspi->TxXferCount--;
 8001e9e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001ea6:	e7f0      	b.n	8001e8a <HAL_SPI_Transmit+0x96>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001ea8:	f7ff f85c 	bl	8000f64 <HAL_GetTick>
 8001eac:	1bc0      	subs	r0, r0, r7
 8001eae:	4286      	cmp	r6, r0
 8001eb0:	d8eb      	bhi.n	8001e8a <HAL_SPI_Transmit+0x96>
        {
          errorcode = HAL_TIMEOUT;
 8001eb2:	2003      	movs	r0, #3
 8001eb4:	e040      	b.n	8001f38 <HAL_SPI_Transmit+0x144>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8001eb6:	b1a2      	cbz	r2, 8001ee2 <HAL_SPI_Transmit+0xee>
 8001eb8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001eba:	b292      	uxth	r2, r2
 8001ebc:	2a01      	cmp	r2, #1
 8001ebe:	d010      	beq.n	8001ee2 <HAL_SPI_Transmit+0xee>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
      pData += sizeof(uint8_t);
      hspi->TxXferCount--;
    }
    while (hspi->TxXferCount > 0U)
 8001ec0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	b94b      	cbnz	r3, 8001eda <HAL_SPI_Transmit+0xe6>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001ec6:	9700      	str	r7, [sp, #0]
 8001ec8:	4633      	mov	r3, r6
 8001eca:	2201      	movs	r2, #1
 8001ecc:	2102      	movs	r1, #2
 8001ece:	4620      	mov	r0, r4
 8001ed0:	f7ff fefc 	bl	8001ccc <SPI_WaitFlagStateUntilTimeout>
 8001ed4:	2800      	cmp	r0, #0
 8001ed6:	d1ec      	bne.n	8001eb2 <HAL_SPI_Transmit+0xbe>
 8001ed8:	e015      	b.n	8001f06 <HAL_SPI_Transmit+0x112>
      hspi->TxXferCount--;
    }
    while (hspi->TxXferCount > 0U)
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001eda:	6823      	ldr	r3, [r4, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	0792      	lsls	r2, r2, #30
 8001ee0:	d507      	bpl.n	8001ef2 <HAL_SPI_Transmit+0xfe>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8001ee2:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001ee6:	731a      	strb	r2, [r3, #12]
        pData += sizeof(uint8_t);
        hspi->TxXferCount--;
 8001ee8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001eea:	3b01      	subs	r3, #1
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001ef0:	e7e6      	b.n	8001ec0 <HAL_SPI_Transmit+0xcc>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001ef2:	2e00      	cmp	r6, #0
 8001ef4:	d0dd      	beq.n	8001eb2 <HAL_SPI_Transmit+0xbe>
 8001ef6:	1c73      	adds	r3, r6, #1
 8001ef8:	d0e2      	beq.n	8001ec0 <HAL_SPI_Transmit+0xcc>
 8001efa:	f7ff f833 	bl	8000f64 <HAL_GetTick>
 8001efe:	1bc0      	subs	r0, r0, r7
 8001f00:	4286      	cmp	r6, r0
 8001f02:	d8dd      	bhi.n	8001ec0 <HAL_SPI_Transmit+0xcc>
 8001f04:	e7d5      	b.n	8001eb2 <HAL_SPI_Transmit+0xbe>
    errorcode = HAL_TIMEOUT;
    goto error;
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001f06:	463a      	mov	r2, r7
 8001f08:	4631      	mov	r1, r6
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	f7ff ff25 	bl	8001d5a <SPI_CheckFlag_BSY>
 8001f10:	b118      	cbz	r0, 8001f1a <HAL_SPI_Transmit+0x126>
  {
    errorcode = HAL_ERROR;
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f12:	2320      	movs	r3, #32
 8001f14:	6563      	str	r3, [r4, #84]	; 0x54
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
  {
    errorcode = HAL_ERROR;
 8001f16:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
    goto error;
 8001f18:	e00e      	b.n	8001f38 <HAL_SPI_Transmit+0x144>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f1a:	68a3      	ldr	r3, [r4, #8]
 8001f1c:	b933      	cbnz	r3, 8001f2c <HAL_SPI_Transmit+0x138>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f1e:	9303      	str	r3, [sp, #12]
 8001f20:	6823      	ldr	r3, [r4, #0]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	9203      	str	r2, [sp, #12]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	9303      	str	r3, [sp, #12]
 8001f2a:	9b03      	ldr	r3, [sp, #12]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();

  if(hspi->State != HAL_SPI_STATE_READY)
  {
    errorcode = HAL_BUSY;
 8001f2e:	3000      	adds	r0, #0
 8001f30:	bf18      	it	ne
 8001f32:	2001      	movne	r0, #1
 8001f34:	e000      	b.n	8001f38 <HAL_SPI_Transmit+0x144>
 8001f36:	2002      	movs	r0, #2
  {
    errorcode = HAL_ERROR;
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8001f44:	e000      	b.n	8001f48 <HAL_SPI_Transmit+0x154>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f46:	2002      	movs	r0, #2
error:
  hspi->State = HAL_SPI_STATE_READY;
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
  return errorcode;
}
 8001f48:	b004      	add	sp, #16
 8001f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001f50 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001f54:	6807      	ldr	r7, [r0, #0]
 8001f56:	693b      	ldr	r3, [r7, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f58:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001f5a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001f5e:	68c3      	ldr	r3, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f60:	68a1      	ldr	r1, [r4, #8]
 8001f62:	69c0      	ldr	r0, [r0, #28]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001f64:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f66:	6922      	ldr	r2, [r4, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001f68:	613b      	str	r3, [r7, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f6c:	4311      	orrs	r1, r2
 8001f6e:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001f70:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f74:	430a      	orrs	r2, r1
 8001f76:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001f78:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f7c:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001f7e:	60fb      	str	r3, [r7, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001f80:	697b      	ldr	r3, [r7, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001f82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001f86:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f88:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001f8c:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	4b7c      	ldr	r3, [pc, #496]	; (8002184 <UART_SetConfig+0x234>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f94:	d17c      	bne.n	8002090 <UART_SetConfig+0x140>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f96:	429f      	cmp	r7, r3
 8001f98:	d003      	beq.n	8001fa2 <UART_SetConfig+0x52>
 8001f9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f9e:	429f      	cmp	r7, r3
 8001fa0:	d131      	bne.n	8002006 <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001fa2:	f7ff fc67 	bl	8001874 <HAL_RCC_GetPCLK2Freq>
 8001fa6:	6863      	ldr	r3, [r4, #4]
 8001fa8:	2519      	movs	r5, #25
 8001faa:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001fae:	4368      	muls	r0, r5
 8001fb0:	fbb0 f8f8 	udiv	r8, r0, r8
 8001fb4:	f7ff fc5e 	bl	8001874 <HAL_RCC_GetPCLK2Freq>
 8001fb8:	6866      	ldr	r6, [r4, #4]
 8001fba:	4368      	muls	r0, r5
 8001fbc:	0076      	lsls	r6, r6, #1
 8001fbe:	fbb0 f6f6 	udiv	r6, r0, r6
 8001fc2:	f7ff fc57 	bl	8001874 <HAL_RCC_GetPCLK2Freq>
 8001fc6:	6863      	ldr	r3, [r4, #4]
 8001fc8:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4368      	muls	r0, r5
 8001fd0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001fd4:	fbb0 f0f9 	udiv	r0, r0, r9
 8001fd8:	fb09 6610 	mls	r6, r9, r0, r6
 8001fdc:	f7ff fc4a 	bl	8001874 <HAL_RCC_GetPCLK2Freq>
 8001fe0:	fbb8 f8f9 	udiv	r8, r8, r9
 8001fe4:	6861      	ldr	r1, [r4, #4]
 8001fe6:	00f6      	lsls	r6, r6, #3
 8001fe8:	3632      	adds	r6, #50	; 0x32
 8001fea:	fbb6 f6f9 	udiv	r6, r6, r9
 8001fee:	0076      	lsls	r6, r6, #1
 8001ff0:	4368      	muls	r0, r5
 8001ff2:	0049      	lsls	r1, r1, #1
 8001ff4:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001ff8:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8001ffc:	fbb0 faf1 	udiv	sl, r0, r1
 8002000:	f7ff fc38 	bl	8001874 <HAL_RCC_GetPCLK2Freq>
 8002004:	e030      	b.n	8002068 <UART_SetConfig+0x118>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002006:	f7ff fc1d 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 800200a:	6863      	ldr	r3, [r4, #4]
 800200c:	2519      	movs	r5, #25
 800200e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8002012:	4368      	muls	r0, r5
 8002014:	fbb0 f8f8 	udiv	r8, r0, r8
 8002018:	f7ff fc14 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 800201c:	6866      	ldr	r6, [r4, #4]
 800201e:	4368      	muls	r0, r5
 8002020:	0076      	lsls	r6, r6, #1
 8002022:	fbb0 f6f6 	udiv	r6, r0, r6
 8002026:	f7ff fc0d 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 800202a:	6863      	ldr	r3, [r4, #4]
 800202c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4368      	muls	r0, r5
 8002034:	fbb0 f0f3 	udiv	r0, r0, r3
 8002038:	fbb0 f0f9 	udiv	r0, r0, r9
 800203c:	fb09 6610 	mls	r6, r9, r0, r6
 8002040:	f7ff fc00 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 8002044:	fbb8 f8f9 	udiv	r8, r8, r9
 8002048:	00f6      	lsls	r6, r6, #3
 800204a:	6861      	ldr	r1, [r4, #4]
 800204c:	3632      	adds	r6, #50	; 0x32
 800204e:	fbb6 f6f9 	udiv	r6, r6, r9
 8002052:	0076      	lsls	r6, r6, #1
 8002054:	4368      	muls	r0, r5
 8002056:	0049      	lsls	r1, r1, #1
 8002058:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800205c:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8002060:	fbb0 faf1 	udiv	sl, r0, r1
 8002064:	f7ff fbee 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 8002068:	4345      	muls	r5, r0
 800206a:	6860      	ldr	r0, [r4, #4]
 800206c:	0040      	lsls	r0, r0, #1
 800206e:	fbb5 f0f0 	udiv	r0, r5, r0
 8002072:	fbb0 f0f9 	udiv	r0, r0, r9
 8002076:	fb09 a210 	mls	r2, r9, r0, sl
 800207a:	00d2      	lsls	r2, r2, #3
 800207c:	3232      	adds	r2, #50	; 0x32
 800207e:	fbb2 f3f9 	udiv	r3, r2, r9
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	4443      	add	r3, r8
 8002088:	441e      	add	r6, r3
 800208a:	60be      	str	r6, [r7, #8]
 800208c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002090:	429f      	cmp	r7, r3
 8002092:	d002      	beq.n	800209a <UART_SetConfig+0x14a>
 8002094:	4b3c      	ldr	r3, [pc, #240]	; (8002188 <UART_SetConfig+0x238>)
 8002096:	429f      	cmp	r7, r3
 8002098:	d130      	bne.n	80020fc <UART_SetConfig+0x1ac>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800209a:	f7ff fbeb 	bl	8001874 <HAL_RCC_GetPCLK2Freq>
 800209e:	6863      	ldr	r3, [r4, #4]
 80020a0:	2519      	movs	r5, #25
 80020a2:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80020a6:	4368      	muls	r0, r5
 80020a8:	fbb0 f8f8 	udiv	r8, r0, r8
 80020ac:	f7ff fbe2 	bl	8001874 <HAL_RCC_GetPCLK2Freq>
 80020b0:	6866      	ldr	r6, [r4, #4]
 80020b2:	4368      	muls	r0, r5
 80020b4:	00b6      	lsls	r6, r6, #2
 80020b6:	fbb0 f6f6 	udiv	r6, r0, r6
 80020ba:	f7ff fbdb 	bl	8001874 <HAL_RCC_GetPCLK2Freq>
 80020be:	6863      	ldr	r3, [r4, #4]
 80020c0:	f04f 0964 	mov.w	r9, #100	; 0x64
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4368      	muls	r0, r5
 80020c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80020cc:	fbb0 f0f9 	udiv	r0, r0, r9
 80020d0:	fb09 6610 	mls	r6, r9, r0, r6
 80020d4:	f7ff fbce 	bl	8001874 <HAL_RCC_GetPCLK2Freq>
 80020d8:	fbb8 f8f9 	udiv	r8, r8, r9
 80020dc:	6861      	ldr	r1, [r4, #4]
 80020de:	0136      	lsls	r6, r6, #4
 80020e0:	4368      	muls	r0, r5
 80020e2:	0089      	lsls	r1, r1, #2
 80020e4:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80020e8:	3632      	adds	r6, #50	; 0x32
 80020ea:	fbb0 faf1 	udiv	sl, r0, r1
 80020ee:	fbb6 f6f9 	udiv	r6, r6, r9
 80020f2:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 80020f6:	f7ff fbbd 	bl	8001874 <HAL_RCC_GetPCLK2Freq>
 80020fa:	e02f      	b.n	800215c <UART_SetConfig+0x20c>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80020fc:	f7ff fba2 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 8002100:	6863      	ldr	r3, [r4, #4]
 8002102:	2519      	movs	r5, #25
 8002104:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8002108:	4368      	muls	r0, r5
 800210a:	fbb0 f8f8 	udiv	r8, r0, r8
 800210e:	f7ff fb99 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 8002112:	6866      	ldr	r6, [r4, #4]
 8002114:	4368      	muls	r0, r5
 8002116:	00b6      	lsls	r6, r6, #2
 8002118:	fbb0 f6f6 	udiv	r6, r0, r6
 800211c:	f7ff fb92 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 8002120:	6863      	ldr	r3, [r4, #4]
 8002122:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4368      	muls	r0, r5
 800212a:	fbb0 f0f3 	udiv	r0, r0, r3
 800212e:	fbb0 f0f9 	udiv	r0, r0, r9
 8002132:	fb09 6610 	mls	r6, r9, r0, r6
 8002136:	f7ff fb85 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 800213a:	fbb8 f8f9 	udiv	r8, r8, r9
 800213e:	6861      	ldr	r1, [r4, #4]
 8002140:	0136      	lsls	r6, r6, #4
 8002142:	3632      	adds	r6, #50	; 0x32
 8002144:	4368      	muls	r0, r5
 8002146:	fbb6 f6f9 	udiv	r6, r6, r9
 800214a:	0089      	lsls	r1, r1, #2
 800214c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8002150:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8002154:	fbb0 faf1 	udiv	sl, r0, r1
 8002158:	f7ff fb74 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 800215c:	4345      	muls	r5, r0
 800215e:	6860      	ldr	r0, [r4, #4]
 8002160:	0080      	lsls	r0, r0, #2
 8002162:	fbb5 f0f0 	udiv	r0, r5, r0
 8002166:	fbb0 f0f9 	udiv	r0, r0, r9
 800216a:	fb09 a210 	mls	r2, r9, r0, sl
 800216e:	0112      	lsls	r2, r2, #4
 8002170:	3232      	adds	r2, #50	; 0x32
 8002172:	fbb2 f3f9 	udiv	r3, r2, r9
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	4433      	add	r3, r6
 800217c:	4443      	add	r3, r8
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002184:	40011000 	.word	0x40011000
 8002188:	40011400 	.word	0x40011400

0800218c <UART_WaitOnFlagUntilTimeout.constprop.3>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800218c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800218e:	4604      	mov	r4, r0
 8002190:	460e      	mov	r6, r1
 8002192:	4617      	mov	r7, r2
 8002194:	461d      	mov	r5, r3
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002196:	6821      	ldr	r1, [r4, #0]
 8002198:	680b      	ldr	r3, [r1, #0]
 800219a:	ea36 0303 	bics.w	r3, r6, r3
 800219e:	d01b      	beq.n	80021d8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x4c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80021a0:	1c6b      	adds	r3, r5, #1
 80021a2:	d0f9      	beq.n	8002198 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80021a4:	b995      	cbnz	r5, 80021cc <UART_WaitOnFlagUntilTimeout.constprop.3+0x40>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021a6:	6823      	ldr	r3, [r4, #0]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80021ae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021b0:	695a      	ldr	r2, [r3, #20]
 80021b2:	f022 0201 	bic.w	r2, r2, #1
 80021b6:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 80021b8:	2320      	movs	r3, #32
 80021ba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80021be:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021c2:	2300      	movs	r3, #0
 80021c4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80021c8:	2003      	movs	r0, #3
 80021ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80021cc:	f7fe feca 	bl	8000f64 <HAL_GetTick>
 80021d0:	1bc0      	subs	r0, r0, r7
 80021d2:	4285      	cmp	r5, r0
 80021d4:	d2df      	bcs.n	8002196 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80021d6:	e7e6      	b.n	80021a6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1a>
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;
 80021d8:	2000      	movs	r0, #0
}
 80021da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080021dc <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021dc:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 80021de:	4604      	mov	r4, r0
 80021e0:	b340      	cbz	r0, 8002234 <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80021e2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80021e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021ea:	b91b      	cbnz	r3, 80021f4 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021ec:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80021f0:	f000 fb28 	bl	8002844 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021f4:	6822      	ldr	r2, [r4, #0]
    huart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021f6:	2324      	movs	r3, #36	; 0x24
 80021f8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021fc:	68d3      	ldr	r3, [r2, #12]
 80021fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002202:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002204:	4620      	mov	r0, r4
 8002206:	f7ff fea3 	bl	8001f50 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800220a:	6823      	ldr	r3, [r4, #0]
 800220c:	691a      	ldr	r2, [r3, #16]
 800220e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002212:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002214:	695a      	ldr	r2, [r3, #20]
 8002216:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800221a:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002222:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002224:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002226:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002228:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800222a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800222e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 8002232:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8002234:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8002236:	bd10      	pop	{r4, pc}

08002238 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800223c:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 800223e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002242:	2b20      	cmp	r3, #32
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002244:	4604      	mov	r4, r0
 8002246:	460d      	mov	r5, r1
 8002248:	4690      	mov	r8, r2
  uint16_t* tmp;
  uint32_t tickstart = 0U;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 800224a:	d150      	bne.n	80022ee <HAL_UART_Transmit+0xb6>
  {
    if((pData == NULL ) || (Size == 0U)) 
 800224c:	2900      	cmp	r1, #0
 800224e:	d04b      	beq.n	80022e8 <HAL_UART_Transmit+0xb0>
 8002250:	2a00      	cmp	r2, #0
 8002252:	d049      	beq.n	80022e8 <HAL_UART_Transmit+0xb0>
    {
      return  HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8002254:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002258:	2b01      	cmp	r3, #1
 800225a:	d048      	beq.n	80022ee <HAL_UART_Transmit+0xb6>
 800225c:	2301      	movs	r3, #1
 800225e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002262:	2300      	movs	r3, #0
 8002264:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002266:	2321      	movs	r3, #33	; 0x21
 8002268:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800226c:	f7fe fe7a 	bl	8000f64 <HAL_GetTick>

    huart->TxXferSize = Size;
 8002270:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002274:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 8002276:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800227a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800227c:	b29b      	uxth	r3, r3
 800227e:	b323      	cbz	r3, 80022ca <HAL_UART_Transmit+0x92>
    {
      huart->TxXferCount--;
 8002280:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002282:	3b01      	subs	r3, #1
 8002284:	b29b      	uxth	r3, r3
 8002286:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002288:	68a3      	ldr	r3, [r4, #8]
 800228a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800228e:	4632      	mov	r2, r6
 8002290:	463b      	mov	r3, r7
 8002292:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002296:	4620      	mov	r0, r4
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002298:	d10e      	bne.n	80022b8 <HAL_UART_Transmit+0x80>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800229a:	f7ff ff77 	bl	800218c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800229e:	b110      	cbz	r0, 80022a6 <HAL_UART_Transmit+0x6e>
        { 
          return HAL_TIMEOUT;
 80022a0:	2003      	movs	r0, #3
 80022a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
        tmp = (uint16_t*) pData;
        huart->Instance->DR = (*tmp & (uint16_t)0x01FFU);
 80022a6:	882b      	ldrh	r3, [r5, #0]
 80022a8:	6822      	ldr	r2, [r4, #0]
 80022aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ae:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80022b0:	6923      	ldr	r3, [r4, #16]
 80022b2:	b943      	cbnz	r3, 80022c6 <HAL_UART_Transmit+0x8e>
        {
          pData +=2U;
 80022b4:	3502      	adds	r5, #2
 80022b6:	e7e0      	b.n	800227a <HAL_UART_Transmit+0x42>
          pData +=1U;
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022b8:	f7ff ff68 	bl	800218c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80022bc:	2800      	cmp	r0, #0
 80022be:	d1ef      	bne.n	80022a0 <HAL_UART_Transmit+0x68>
        {
          return HAL_TIMEOUT;
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFFU);
 80022c0:	6823      	ldr	r3, [r4, #0]
 80022c2:	782a      	ldrb	r2, [r5, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	3501      	adds	r5, #1
 80022c8:	e7d7      	b.n	800227a <HAL_UART_Transmit+0x42>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022ca:	463b      	mov	r3, r7
 80022cc:	4632      	mov	r2, r6
 80022ce:	2140      	movs	r1, #64	; 0x40
 80022d0:	4620      	mov	r0, r4
 80022d2:	f7ff ff5b 	bl	800218c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80022d6:	2800      	cmp	r0, #0
 80022d8:	d1e2      	bne.n	80022a0 <HAL_UART_Transmit+0x68>
    { 
      return HAL_TIMEOUT;
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80022da:	2320      	movs	r3, #32
 80022dc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022e0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    
    return HAL_OK;
 80022e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
  {
    if((pData == NULL ) || (Size == 0U)) 
    {
      return  HAL_ERROR;
 80022e8:	2001      	movs	r0, #1
 80022ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80022ee:	2002      	movs	r0, #2
  }
}
 80022f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080022f4 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80022f4:	b508      	push	{r3, lr}
	if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)) {
 80022f6:	6803      	ldr	r3, [r0, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	079b      	lsls	r3, r3, #30
 80022fc:	d50e      	bpl.n	800231c <HAL_ADC_ConvCpltCallback+0x28>

		ADC_raw = HAL_ADC_GetValue(hadc);
 80022fe:	f7fe ff55 	bl	80011ac <HAL_ADC_GetValue>
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <HAL_ADC_ConvCpltCallback+0x2c>)
 8002304:	8018      	strh	r0, [r3, #0]
		erosites = (ADC_raw - 1700) * 6 ;
 8002306:	b280      	uxth	r0, r0
 8002308:	f2a0 60a4 	subw	r0, r0, #1700	; 0x6a4
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <HAL_ADC_ConvCpltCallback+0x30>)
 800230e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002312:	0040      	lsls	r0, r0, #1
 8002314:	8018      	strh	r0, [r3, #0]
		adc_flag = 1;
 8002316:	4b04      	ldr	r3, [pc, #16]	; (8002328 <HAL_ADC_ConvCpltCallback+0x34>)
 8002318:	2201      	movs	r2, #1
 800231a:	701a      	strb	r2, [r3, #0]
 800231c:	bd08      	pop	{r3, pc}
 800231e:	bf00      	nop
 8002320:	20000710 	.word	0x20000710
 8002324:	20000712 	.word	0x20000712
 8002328:	2000055c 	.word	0x2000055c

0800232c <writeLed>:
}




void writeLed() {
 800232c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002330:	4818      	ldr	r0, [pc, #96]	; (8002394 <writeLed+0x68>)
 8002332:	af00      	add	r7, sp, #0
	uint16_t res = 500;

	uint8_t temp[COLOR_COUNT * 8 +res];
 8002334:	f5ad 6de1 	sub.w	sp, sp, #1800	; 0x708
 8002338:	4669      	mov	r1, sp
 800233a:	466a      	mov	r2, sp
 800233c:	f50d 65a2 	add.w	r5, sp, #1296	; 0x510
	uint16_t i, j, k ;
	for (i = 0; i < COLOR_COUNT; i++) {

		for (j = 0; j < 8; j++) {
			if ((colors[i] & (128 >> j)) != 0) {
 8002340:	2680      	movs	r6, #128	; 0x80
				temp[i * 8 + j] = 0b11111000;
			} else
				temp[i * 8 + j] = 0b11000000;
 8002342:	f04f 0ec0 	mov.w	lr, #192	; 0xc0
	uint16_t i, j, k ;
	for (i = 0; i < COLOR_COUNT; i++) {

		for (j = 0; j < 8; j++) {
			if ((colors[i] & (128 >> j)) != 0) {
				temp[i * 8 + j] = 0b11111000;
 8002346:	f04f 0cf8 	mov.w	ip, #248	; 0xf8
	uint8_t temp[COLOR_COUNT * 8 +res];
	uint16_t i, j, k ;
	for (i = 0; i < COLOR_COUNT; i++) {

		for (j = 0; j < 8; j++) {
			if ((colors[i] & (128 >> j)) != 0) {
 800234a:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800234e:	2300      	movs	r3, #0
 8002350:	fa46 f803 	asr.w	r8, r6, r3
 8002354:	ea18 0f04 	tst.w	r8, r4
				temp[i * 8 + j] = 0b11111000;
 8002358:	bf14      	ite	ne
 800235a:	f802 c003 	strbne.w	ip, [r2, r3]
			} else
				temp[i * 8 + j] = 0b11000000;
 800235e:	f802 e003 	strbeq.w	lr, [r2, r3]
 8002362:	3301      	adds	r3, #1

	uint8_t temp[COLOR_COUNT * 8 +res];
	uint16_t i, j, k ;
	for (i = 0; i < COLOR_COUNT; i++) {

		for (j = 0; j < 8; j++) {
 8002364:	2b08      	cmp	r3, #8
 8002366:	d1f3      	bne.n	8002350 <writeLed+0x24>
 8002368:	3208      	adds	r2, #8
void writeLed() {
	uint16_t res = 500;

	uint8_t temp[COLOR_COUNT * 8 +res];
	uint16_t i, j, k ;
	for (i = 0; i < COLOR_COUNT; i++) {
 800236a:	42aa      	cmp	r2, r5
 800236c:	d1ed      	bne.n	800234a <writeLed+0x1e>
 800236e:	f201 530f 	addw	r3, r1, #1295	; 0x50f
 8002372:	f201 7203 	addw	r2, r1, #1795	; 0x703
				temp[i * 8 + j] = 0b11000000;
		}
	}

for(k=COLOR_COUNT*8 ; k<COLOR_COUNT*8 +res; k++){
	temp[k]=0b00000000;
 8002376:	2000      	movs	r0, #0
			} else
				temp[i * 8 + j] = 0b11000000;
		}
	}

for(k=COLOR_COUNT*8 ; k<COLOR_COUNT*8 +res; k++){
 8002378:	4293      	cmp	r3, r2
 800237a:	d002      	beq.n	8002382 <writeLed+0x56>
	temp[k]=0b00000000;
 800237c:	f803 0f01 	strb.w	r0, [r3, #1]!
 8002380:	e7fa      	b.n	8002378 <writeLed+0x4c>
}

	HAL_SPI_Transmit(&hspi2,temp,COLOR_COUNT*8+res,COLOR_COUNT*8*1000000);
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <writeLed+0x6c>)
 8002384:	4805      	ldr	r0, [pc, #20]	; (800239c <writeLed+0x70>)
 8002386:	f240 7204 	movw	r2, #1796	; 0x704
 800238a:	f7ff fd33 	bl	8001df4 <HAL_SPI_Transmit>


}
 800238e:	46bd      	mov	sp, r7
 8002390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002394:	2000055c 	.word	0x2000055c
 8002398:	4d3f6400 	.word	0x4d3f6400
 800239c:	20000670 	.word	0x20000670

080023a0 <setColor>:

}


void setColor(uint8_t g, uint8_t r, uint8_t b)
{
 80023a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023a2:	4d0c      	ldr	r5, [pc, #48]	; (80023d4 <setColor+0x34>)
 80023a4:	2600      	movs	r6, #0
	uint8_t t;
	  for(t = 0; t < COLOR_COUNT; t++)
	  {
		  if(t%3 == 0)
 80023a6:	2703      	movs	r7, #3
 80023a8:	b2f4      	uxtb	r4, r6
 80023aa:	fbb4 f3f7 	udiv	r3, r4, r7
 80023ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80023b2:	1ae3      	subs	r3, r4, r3
 80023b4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80023b8:	d101      	bne.n	80023be <setColor+0x1e>
		  {
			  colors[t] = g;
 80023ba:	7028      	strb	r0, [r5, #0]
 80023bc:	e003      	b.n	80023c6 <setColor+0x26>
		  }
		  if(t%3 == 1)
 80023be:	2b01      	cmp	r3, #1
		  {
			  colors[t] = r;
 80023c0:	bf0c      	ite	eq
 80023c2:	7029      	strbeq	r1, [r5, #0]
		  }
		  if(t%3 == 2)
		  {
			  colors[t] = b;
 80023c4:	702a      	strbne	r2, [r5, #0]
 80023c6:	3601      	adds	r6, #1


void setColor(uint8_t g, uint8_t r, uint8_t b)
{
	uint8_t t;
	  for(t = 0; t < COLOR_COUNT; t++)
 80023c8:	2ea2      	cmp	r6, #162	; 0xa2
 80023ca:	f105 0501 	add.w	r5, r5, #1
 80023ce:	d1eb      	bne.n	80023a8 <setColor+0x8>
		  {
			  colors[t] = b;
		  }
	  }

}
 80023d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d2:	bf00      	nop
 80023d4:	2000055d 	.word	0x2000055d

080023d8 <setColumColor>:

	  colors[(index*3)+2] = b;
}

void setColumColor(int index,int full,uint8_t g, uint8_t r, uint8_t b)
{
 80023d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	int act = 0;
	for(act = 0; act < full ; act++)
	{
		  colors[(index*27 + act*3)] = g;
 80023da:	241b      	movs	r4, #27
 80023dc:	4344      	muls	r4, r0
 80023de:	4811      	ldr	r0, [pc, #68]	; (8002424 <setColumColor+0x4c>)

	  colors[(index*3)+2] = b;
}

void setColumColor(int index,int full,uint8_t g, uint8_t r, uint8_t b)
{
 80023e0:	f89d 7014 	ldrb.w	r7, [sp, #20]
 80023e4:	1905      	adds	r5, r0, r4
	int act = 0;
	for(act = 0; act < full ; act++)
 80023e6:	2600      	movs	r6, #0
 80023e8:	428e      	cmp	r6, r1
 80023ea:	f105 0503 	add.w	r5, r5, #3
 80023ee:	da07      	bge.n	8002400 <setColumColor+0x28>
	{
		  colors[(index*27 + act*3)] = g;
 80023f0:	f805 2c03 	strb.w	r2, [r5, #-3]

		  colors[(index*27 + act*3)+1] = r;
 80023f4:	f805 3c02 	strb.w	r3, [r5, #-2]

		  colors[(index*27 + act*3)+2] = b;
 80023f8:	f805 7c01 	strb.w	r7, [r5, #-1]
}

void setColumColor(int index,int full,uint8_t g, uint8_t r, uint8_t b)
{
	int act = 0;
	for(act = 0; act < full ; act++)
 80023fc:	3601      	adds	r6, #1
 80023fe:	e7f3      	b.n	80023e8 <setColumColor+0x10>
 8002400:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8002404:	441c      	add	r4, r3
 8002406:	4420      	add	r0, r4

	}

	for(act = full; act < 9 ; act++)
	{
		  colors[(index*27 + act*3)] = 0;
 8002408:	2300      	movs	r3, #0

		  colors[(index*27 + act*3)+2] = b;

	}

	for(act = full; act < 9 ; act++)
 800240a:	2908      	cmp	r1, #8
 800240c:	f100 0003 	add.w	r0, r0, #3
 8002410:	dc07      	bgt.n	8002422 <setColumColor+0x4a>
	{
		  colors[(index*27 + act*3)] = 0;
 8002412:	f800 3c03 	strb.w	r3, [r0, #-3]

		  colors[(index*27 + act*3)+1] = 0;
 8002416:	f800 3c02 	strb.w	r3, [r0, #-2]

		  colors[(index*27 + act*3)+2] = 0;
 800241a:	f800 3c01 	strb.w	r3, [r0, #-1]

		  colors[(index*27 + act*3)+2] = b;

	}

	for(act = full; act < 9 ; act++)
 800241e:	3101      	adds	r1, #1
 8002420:	e7f3      	b.n	800240a <setColumColor+0x32>

		  colors[(index*27 + act*3)+2] = 0;

	}

}
 8002422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002424:	2000055d 	.word	0x2000055d

08002428 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002428:	b510      	push	{r4, lr}
 800242a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800242c:	2200      	movs	r2, #0
 800242e:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <SystemClock_Config+0xa8>)
 8002430:	9200      	str	r2, [sp, #0]
 8002432:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002434:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002438:	6419      	str	r1, [r3, #64]	; 0x40
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800243c:	4925      	ldr	r1, [pc, #148]	; (80024d4 <SystemClock_Config+0xac>)
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800243e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002446:	9201      	str	r2, [sp, #4]
 8002448:	680b      	ldr	r3, [r1, #0]
 800244a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800244e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002452:	600b      	str	r3, [r1, #0]
 8002454:	680b      	ldr	r3, [r1, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002456:	920e      	str	r2, [sp, #56]	; 0x38

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002458:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800245c:	9301      	str	r3, [sp, #4]
 800245e:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002460:	2301      	movs	r3, #1
 8002462:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002464:	2310      	movs	r3, #16
 8002466:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002468:	2308      	movs	r3, #8

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800246a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 800246c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800246e:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 90;
 8002470:	235a      	movs	r3, #90	; 0x5a

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002472:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002474:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 90;
 8002476:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002478:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800247a:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800247c:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800247e:	f7ff fa11 	bl	80018a4 <HAL_RCC_OscConfig>
 8002482:	b100      	cbz	r0, 8002486 <SystemClock_Config+0x5e>
 8002484:	e7fe      	b.n	8002484 <SystemClock_Config+0x5c>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002486:	230f      	movs	r3, #15
 8002488:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800248a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800248e:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002490:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002492:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002494:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002498:	a802      	add	r0, sp, #8

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800249a:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800249c:	9306      	str	r3, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800249e:	f7ff f917 	bl	80016d0 <HAL_RCC_ClockConfig>
 80024a2:	4604      	mov	r4, r0
 80024a4:	b100      	cbz	r0, 80024a8 <SystemClock_Config+0x80>
 80024a6:	e7fe      	b.n	80024a6 <SystemClock_Config+0x7e>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80024a8:	f7ff f9c6 	bl	8001838 <HAL_RCC_GetHCLKFreq>
 80024ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80024b4:	f7ff f802 	bl	80014bc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80024b8:	2004      	movs	r0, #4
 80024ba:	f7ff f815 	bl	80014e8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80024be:	4622      	mov	r2, r4
 80024c0:	4621      	mov	r1, r4
 80024c2:	f04f 30ff 	mov.w	r0, #4294967295
 80024c6:	f7fe ffb9 	bl	800143c <HAL_NVIC_SetPriority>
}
 80024ca:	b014      	add	sp, #80	; 0x50
 80024cc:	bd10      	pop	{r4, pc}
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40007000 	.word	0x40007000

080024d8 <main>:
}

/* USER CODE END 0 */

int main(void)
{
 80024d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024dc:	b08c      	sub	sp, #48	; 0x30
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024de:	2400      	movs	r4, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024e0:	f7fe fd1e 	bl	8000f20 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80024e4:	f7ff ffa0 	bl	8002428 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e8:	4b7f      	ldr	r3, [pc, #508]	; (80026e8 <main+0x210>)
 80024ea:	9403      	str	r4, [sp, #12]
 80024ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80024ee:	487f      	ldr	r0, [pc, #508]	; (80026ec <main+0x214>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024f0:	f042 0204 	orr.w	r2, r2, #4
 80024f4:	631a      	str	r2, [r3, #48]	; 0x30
 80024f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024f8:	f002 0204 	and.w	r2, r2, #4
 80024fc:	9203      	str	r2, [sp, #12]
 80024fe:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002500:	9404      	str	r4, [sp, #16]
 8002502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002504:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002508:	631a      	str	r2, [r3, #48]	; 0x30
 800250a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800250c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002510:	9204      	str	r2, [sp, #16]
 8002512:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002514:	9405      	str	r4, [sp, #20]
 8002516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002518:	f042 0201 	orr.w	r2, r2, #1
 800251c:	631a      	str	r2, [r3, #48]	; 0x30
 800251e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002520:	f002 0201 	and.w	r2, r2, #1
 8002524:	9205      	str	r2, [sp, #20]
 8002526:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002528:	9406      	str	r4, [sp, #24]
 800252a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800252c:	f042 0202 	orr.w	r2, r2, #2
 8002530:	631a      	str	r2, [r3, #48]	; 0x30
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002538:	4622      	mov	r2, r4

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800253a:	9306      	str	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800253c:	2120      	movs	r1, #32

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800253e:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002540:	f7ff f8be 	bl	80016c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002548:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800254a:	a907      	add	r1, sp, #28
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800254c:	4b68      	ldr	r3, [pc, #416]	; (80026f0 <main+0x218>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800254e:	4869      	ldr	r0, [pc, #420]	; (80026f4 <main+0x21c>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002550:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002554:	f7fe ffda 	bl	800150c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002558:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255a:	2502      	movs	r5, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255c:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255e:	a907      	add	r1, sp, #28
  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002560:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002562:	4862      	ldr	r0, [pc, #392]	; (80026ec <main+0x214>)
  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002564:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002566:	260c      	movs	r6, #12
 8002568:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800256e:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002570:	f7fe ffcc 	bl	800150c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002574:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002576:	485d      	ldr	r0, [pc, #372]	; (80026ec <main+0x214>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002578:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800257a:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257c:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002580:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002582:	f7fe ffc3 	bl	800150c <HAL_GPIO_Init>

/* SPI2 init function */
static void MX_SPI2_Init(void)
{

  hspi2.Instance = SPI2;
 8002586:	485c      	ldr	r0, [pc, #368]	; (80026f8 <main+0x220>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002588:	4b5c      	ldr	r3, [pc, #368]	; (80026fc <main+0x224>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800258a:	6084      	str	r4, [r0, #8]
/* SPI2 init function */
static void MX_SPI2_Init(void)
{

  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800258c:	f44f 7e82 	mov.w	lr, #260	; 0x104
 8002590:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002598:	6183      	str	r3, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 10;
 800259a:	f04f 080a 	mov.w	r8, #10
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800259e:	2308      	movs	r3, #8
{

  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80025a0:	60c4      	str	r4, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80025a2:	6105      	str	r5, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025a4:	6144      	str	r4, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80025a6:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025a8:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025aa:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ac:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80025ae:	f8c0 802c 	str.w	r8, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025b2:	f7ff fbe2 	bl	8001d7a <HAL_SPI_Init>
 80025b6:	b100      	cbz	r0, 80025ba <main+0xe2>
 80025b8:	e7fe      	b.n	80025b8 <main+0xe0>

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 80025ba:	4c51      	ldr	r4, [pc, #324]	; (8002700 <main+0x228>)
 80025bc:	4b51      	ldr	r3, [pc, #324]	; (8002704 <main+0x22c>)
 80025be:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80025c0:	6060      	str	r0, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80025c2:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80025c4:	6120      	str	r0, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80025c6:	61a0      	str	r0, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025c8:	6220      	str	r0, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025ca:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025cc:	4b4e      	ldr	r3, [pc, #312]	; (8002708 <main+0x230>)
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025ce:	60e0      	str	r0, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80025d0:	6320      	str	r0, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025d2:	4620      	mov	r0, r4
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025d4:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 80025d6:	61e7      	str	r7, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025d8:	6167      	str	r7, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025da:	f7fe fcd7 	bl	8000f8c <HAL_ADC_Init>
 80025de:	b100      	cbz	r0, 80025e2 <main+0x10a>
 80025e0:	e7fe      	b.n	80025e0 <main+0x108>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_10;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80025e2:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025e4:	a907      	add	r1, sp, #28
 80025e6:	4620      	mov	r0, r4
    Error_Handler();
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_10;
 80025e8:	f8cd 801c 	str.w	r8, [sp, #28]
  sConfig.Rank = 1;
 80025ec:	9708      	str	r7, [sp, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025ee:	f7fe fe77 	bl	80012e0 <HAL_ADC_ConfigChannel>
 80025f2:	b100      	cbz	r0, 80025f6 <main+0x11e>
 80025f4:	e7fe      	b.n	80025f4 <main+0x11c>

/* UART4 init function */
static void MX_UART4_Init(void)
{

  huart4.Instance = UART4;
 80025f6:	4b45      	ldr	r3, [pc, #276]	; (800270c <main+0x234>)
  huart4.Init.BaudRate = 250000;
 80025f8:	4945      	ldr	r1, [pc, #276]	; (8002710 <main+0x238>)
 80025fa:	4a46      	ldr	r2, [pc, #280]	; (8002714 <main+0x23c>)
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80025fc:	6098      	str	r0, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80025fe:	60d8      	str	r0, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002600:	6118      	str	r0, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002602:	6198      	str	r0, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002604:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002606:	4618      	mov	r0, r3
/* UART4 init function */
static void MX_UART4_Init(void)
{

  huart4.Instance = UART4;
  huart4.Init.BaudRate = 250000;
 8002608:	e883 0006 	stmia.w	r3, {r1, r2}
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 800260c:	615e      	str	r6, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800260e:	f7ff fde5 	bl	80021dc <HAL_UART_Init>
 8002612:	b100      	cbz	r0, 8002616 <main+0x13e>
 8002614:	e7fe      	b.n	8002614 <main+0x13c>

  /* USER CODE BEGIN 2 */

  	int a = 0;
	int b = 0;
	setColor(0,0,0);
 8002616:	4602      	mov	r2, r0
 8002618:	4601      	mov	r1, r0
 800261a:	f7ff fec1 	bl	80023a0 <setColor>




		if (adc_flag == 1) {
			adc_flag = 0;
 800261e:	4680      	mov	r8, r0
	while (1) {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

		HAL_Delay(300);
 8002620:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002624:	f7fe fca4 	bl	8000f70 <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002628:	2120      	movs	r1, #32
 800262a:	4830      	ldr	r0, [pc, #192]	; (80026ec <main+0x214>)
 800262c:	4c3a      	ldr	r4, [pc, #232]	; (8002718 <main+0x240>)
 800262e:	f7ff f84b 	bl	80016c8 <HAL_GPIO_TogglePin>

		writeLed();
 8002632:	f7ff fe7b 	bl	800232c <writeLed>





		if (adc_flag == 1) {
 8002636:	4b39      	ldr	r3, [pc, #228]	; (800271c <main+0x244>)
 8002638:	781a      	ldrb	r2, [r3, #0]
 800263a:	2a01      	cmp	r2, #1
 800263c:	d114      	bne.n	8002668 <main+0x190>
			adc_flag = 0;
			sprintf(printbuffer, "AD=%d\r\n", erosites/360);
 800263e:	4938      	ldr	r1, [pc, #224]	; (8002720 <main+0x248>)




		if (adc_flag == 1) {
			adc_flag = 0;
 8002640:	f883 8000 	strb.w	r8, [r3]
			sprintf(printbuffer, "AD=%d\r\n", erosites/360);
 8002644:	8822      	ldrh	r2, [r4, #0]
 8002646:	4837      	ldr	r0, [pc, #220]	; (8002724 <main+0x24c>)
 8002648:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800264c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002650:	f000 f9a4 	bl	800299c <sprintf>

			HAL_UART_Transmit(&huart4, printbuffer, strlen(printbuffer), 5000);
 8002654:	4833      	ldr	r0, [pc, #204]	; (8002724 <main+0x24c>)
 8002656:	f7fd fddb 	bl	8000210 <strlen>
 800265a:	f241 3388 	movw	r3, #5000	; 0x1388
 800265e:	b282      	uxth	r2, r0
 8002660:	4930      	ldr	r1, [pc, #192]	; (8002724 <main+0x24c>)
 8002662:	482a      	ldr	r0, [pc, #168]	; (800270c <main+0x234>)
 8002664:	f7ff fde8 	bl	8002238 <HAL_UART_Transmit>


		}
		HAL_ADC_Start_IT(&hadc1);
 8002668:	4825      	ldr	r0, [pc, #148]	; (8002700 <main+0x228>)
 800266a:	f7fe fd39 	bl	80010e0 <HAL_ADC_Start_IT>

		int col = (erosites-500) / 270 ;
 800266e:	8824      	ldrh	r4, [r4, #0]
 8002670:	f5a4 73fa 	sub.w	r3, r4, #500	; 0x1f4
 8002674:	f44f 7487 	mov.w	r4, #270	; 0x10e
 8002678:	fb93 f4f4 	sdiv	r4, r3, r4
		if(col<0 ){col=0;}
 800267c:	1c63      	adds	r3, r4, #1
 800267e:	d003      	beq.n	8002688 <main+0x1b0>
		if(col>9){col=9;}
 8002680:	2c09      	cmp	r4, #9
 8002682:	bfa8      	it	ge
 8002684:	2409      	movge	r4, #9
 8002686:	e000      	b.n	800268a <main+0x1b2>

		}
		HAL_ADC_Start_IT(&hadc1);

		int col = (erosites-500) / 270 ;
		if(col<0 ){col=0;}
 8002688:	2400      	movs	r4, #0
		if(col>9){col=9;}

		setColumColor(0,col,0,0,5);
 800268a:	2605      	movs	r6, #5
 800268c:	2300      	movs	r3, #0
		setColumColor(1,col,2,0,1);
 800268e:	2701      	movs	r7, #1

		int col = (erosites-500) / 270 ;
		if(col<0 ){col=0;}
		if(col>9){col=9;}

		setColumColor(0,col,0,0,5);
 8002690:	461a      	mov	r2, r3
 8002692:	4621      	mov	r1, r4
 8002694:	4618      	mov	r0, r3
 8002696:	9600      	str	r6, [sp, #0]
 8002698:	f7ff fe9e 	bl	80023d8 <setColumColor>
		setColumColor(1,col,2,0,1);
 800269c:	4621      	mov	r1, r4
 800269e:	4638      	mov	r0, r7
 80026a0:	9700      	str	r7, [sp, #0]
 80026a2:	2300      	movs	r3, #0
 80026a4:	2202      	movs	r2, #2
 80026a6:	f7ff fe97 	bl	80023d8 <setColumColor>
		setColumColor(2,col,2,6,0);
 80026aa:	2202      	movs	r2, #2
 80026ac:	4621      	mov	r1, r4
 80026ae:	4610      	mov	r0, r2
 80026b0:	f8cd 8000 	str.w	r8, [sp]
 80026b4:	2306      	movs	r3, #6
 80026b6:	f7ff fe8f 	bl	80023d8 <setColumColor>
		setColumColor(3,col,1,3,3);
 80026ba:	2303      	movs	r3, #3
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	463a      	mov	r2, r7
 80026c0:	4621      	mov	r1, r4
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fe88 	bl	80023d8 <setColumColor>
		setColumColor(4,col,5,0,2);
 80026c8:	4632      	mov	r2, r6
 80026ca:	4621      	mov	r1, r4
 80026cc:	9500      	str	r5, [sp, #0]
 80026ce:	2300      	movs	r3, #0
 80026d0:	2004      	movs	r0, #4
 80026d2:	f7ff fe81 	bl	80023d8 <setColumColor>
		setColumColor(5,col,5,0,2);
 80026d6:	9500      	str	r5, [sp, #0]
 80026d8:	2300      	movs	r3, #0
 80026da:	4632      	mov	r2, r6
 80026dc:	4621      	mov	r1, r4
 80026de:	4630      	mov	r0, r6
 80026e0:	f7ff fe7a 	bl	80023d8 <setColumColor>
 80026e4:	e79c      	b.n	8002620 <main+0x148>
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40020000 	.word	0x40020000
 80026f0:	10210000 	.word	0x10210000
 80026f4:	40020800 	.word	0x40020800
 80026f8:	20000670 	.word	0x20000670
 80026fc:	40003800 	.word	0x40003800
 8002700:	200006c8 	.word	0x200006c8
 8002704:	40012000 	.word	0x40012000
 8002708:	0f000001 	.word	0x0f000001
 800270c:	20000714 	.word	0x20000714
 8002710:	40004c00 	.word	0x40004c00
 8002714:	0003d090 	.word	0x0003d090
 8002718:	20000712 	.word	0x20000712
 800271c:	2000055c 	.word	0x2000055c
 8002720:	08005770 	.word	0x08005770
 8002724:	2000063c 	.word	0x2000063c

08002728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002728:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800272a:	2007      	movs	r0, #7
 800272c:	f7fe fe74 	bl	8001418 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002730:	2200      	movs	r2, #0
 8002732:	4611      	mov	r1, r2
 8002734:	f06f 000b 	mvn.w	r0, #11
 8002738:	f7fe fe80 	bl	800143c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800273c:	2200      	movs	r2, #0
 800273e:	4611      	mov	r1, r2
 8002740:	f06f 000a 	mvn.w	r0, #10
 8002744:	f7fe fe7a 	bl	800143c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002748:	2200      	movs	r2, #0
 800274a:	4611      	mov	r1, r2
 800274c:	f06f 0009 	mvn.w	r0, #9
 8002750:	f7fe fe74 	bl	800143c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002754:	2200      	movs	r2, #0
 8002756:	4611      	mov	r1, r2
 8002758:	f06f 0004 	mvn.w	r0, #4
 800275c:	f7fe fe6e 	bl	800143c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002760:	2200      	movs	r2, #0
 8002762:	4611      	mov	r1, r2
 8002764:	f06f 0003 	mvn.w	r0, #3
 8002768:	f7fe fe68 	bl	800143c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800276c:	2200      	movs	r2, #0
 800276e:	4611      	mov	r1, r2
 8002770:	f06f 0001 	mvn.w	r0, #1
 8002774:	f7fe fe62 	bl	800143c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002778:	2200      	movs	r2, #0
 800277a:	4611      	mov	r1, r2
 800277c:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002780:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002784:	f7fe be5a 	b.w	800143c <HAL_NVIC_SetPriority>

08002788 <HAL_ADC_MspInit>:

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002788:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800278a:	6802      	ldr	r2, [r0, #0]
 800278c:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_ADC_MspInit+0x4c>)
 800278e:	429a      	cmp	r2, r3

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002790:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8002792:	d11d      	bne.n	80027d0 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002794:	2400      	movs	r4, #0
 8002796:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800279a:	9400      	str	r4, [sp, #0]
 800279c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PC0     ------> ADC1_IN10 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800279e:	480e      	ldr	r0, [pc, #56]	; (80027d8 <HAL_ADC_MspInit+0x50>)
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027a4:	645a      	str	r2, [r3, #68]	; 0x44
 80027a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	9403      	str	r4, [sp, #12]
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	9b00      	ldr	r3, [sp, #0]
  
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027b2:	2301      	movs	r3, #1
 80027b4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b6:	a901      	add	r1, sp, #4
  
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027b8:	2303      	movs	r3, #3
 80027ba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027bc:	f7fe fea6 	bl	800150c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80027c0:	2012      	movs	r0, #18
 80027c2:	4622      	mov	r2, r4
 80027c4:	4621      	mov	r1, r4
 80027c6:	f7fe fe39 	bl	800143c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80027ca:	2012      	movs	r0, #18
 80027cc:	f7fe fe6a 	bl	80014a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027d0:	b006      	add	sp, #24
 80027d2:	bd10      	pop	{r4, pc}
 80027d4:	40012000 	.word	0x40012000
 80027d8:	40020800 	.word	0x40020800

080027dc <HAL_SPI_MspInit>:
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027dc:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI2)
 80027de:	6802      	ldr	r2, [r0, #0]
 80027e0:	4b15      	ldr	r3, [pc, #84]	; (8002838 <HAL_SPI_MspInit+0x5c>)
 80027e2:	429a      	cmp	r2, r3
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027e4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI2)
 80027e6:	d124      	bne.n	8002832 <HAL_SPI_MspInit+0x56>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027e8:	2400      	movs	r4, #0
 80027ea:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80027ee:	9400      	str	r4, [sp, #0]
 80027f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f2:	4812      	ldr	r0, [pc, #72]	; (800283c <HAL_SPI_MspInit+0x60>)
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027f8:	641a      	str	r2, [r3, #64]	; 0x40
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	9403      	str	r4, [sp, #12]
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002802:	9300      	str	r3, [sp, #0]
  
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002804:	2502      	movs	r5, #2
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002806:	9b00      	ldr	r3, [sp, #0]
  
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002808:	9501      	str	r5, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800280a:	2307      	movs	r3, #7
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800280c:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800280e:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002810:	9305      	str	r3, [sp, #20]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002812:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002814:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002816:	f7fe fe79 	bl	800150c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800281a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800281e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002820:	a901      	add	r1, sp, #4

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002822:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002824:	4806      	ldr	r0, [pc, #24]	; (8002840 <HAL_SPI_MspInit+0x64>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002826:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800282c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282e:	f7fe fe6d 	bl	800150c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002832:	b006      	add	sp, #24
 8002834:	bd70      	pop	{r4, r5, r6, pc}
 8002836:	bf00      	nop
 8002838:	40003800 	.word	0x40003800
 800283c:	40020800 	.word	0x40020800
 8002840:	40020400 	.word	0x40020400

08002844 <HAL_UART_MspInit>:
  /* USER CODE END SPI2_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002844:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART4)
 8002846:	6802      	ldr	r2, [r0, #0]
 8002848:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <HAL_UART_MspInit+0x44>)
 800284a:	429a      	cmp	r2, r3
 800284c:	d118      	bne.n	8002880 <HAL_UART_MspInit+0x3c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	4b0e      	ldr	r3, [pc, #56]	; (800288c <HAL_UART_MspInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002854:	480e      	ldr	r0, [pc, #56]	; (8002890 <HAL_UART_MspInit+0x4c>)
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002858:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800285c:	641a      	str	r2, [r3, #64]	; 0x40
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002864:	9300      	str	r3, [sp, #0]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002866:	2202      	movs	r2, #2
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002868:	9b00      	ldr	r3, [sp, #0]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286a:	9202      	str	r2, [sp, #8]
  
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800286c:	2303      	movs	r3, #3
 800286e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002870:	2201      	movs	r2, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002872:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002874:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002876:	2308      	movs	r3, #8
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002878:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800287a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287c:	f7fe fe46 	bl	800150c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002880:	b007      	add	sp, #28
 8002882:	f85d fb04 	ldr.w	pc, [sp], #4
 8002886:	bf00      	nop
 8002888:	40004c00 	.word	0x40004c00
 800288c:	40023800 	.word	0x40023800
 8002890:	40020000 	.word	0x40020000

08002894 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002894:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002896:	f7fe fb5d 	bl	8000f54 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800289a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 800289e:	f7fe be30 	b.w	8001502 <HAL_SYSTICK_IRQHandler>
	...

080028a4 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80028a4:	4801      	ldr	r0, [pc, #4]	; (80028ac <ADC_IRQHandler+0x8>)
 80028a6:	f7fe bc86 	b.w	80011b6 <HAL_ADC_IRQHandler>
 80028aa:	bf00      	nop
 80028ac:	200006c8 	.word	0x200006c8

080028b0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028b0:	490f      	ldr	r1, [pc, #60]	; (80028f0 <SystemInit+0x40>)
 80028b2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80028b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80028be:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <SystemInit+0x44>)
 80028c0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028c2:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80028c4:	f042 0201 	orr.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028ca:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80028d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028d6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80028d8:	4a07      	ldr	r2, [pc, #28]	; (80028f8 <SystemInit+0x48>)
 80028da:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028e2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80028e4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80028ea:	608b      	str	r3, [r1, #8]
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000ed00 	.word	0xe000ed00
 80028f4:	40023800 	.word	0x40023800
 80028f8:	24003010 	.word	0x24003010

080028fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002934 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002900:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002902:	e003      	b.n	800290c <LoopCopyDataInit>

08002904 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002906:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002908:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800290a:	3104      	adds	r1, #4

0800290c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800290c:	480b      	ldr	r0, [pc, #44]	; (800293c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800290e:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002910:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002912:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002914:	d3f6      	bcc.n	8002904 <CopyDataInit>
  ldr  r2, =_sbss
 8002916:	4a0b      	ldr	r2, [pc, #44]	; (8002944 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002918:	e002      	b.n	8002920 <LoopFillZerobss>

0800291a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800291a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800291c:	f842 3b04 	str.w	r3, [r2], #4

08002920 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002920:	4b09      	ldr	r3, [pc, #36]	; (8002948 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002922:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002924:	d3f9      	bcc.n	800291a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002926:	f7ff ffc3 	bl	80028b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800292a:	f000 f811 	bl	8002950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800292e:	f7ff fdd3 	bl	80024d8 <main>
  bx  lr    
 8002932:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002934:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8002938:	080058f4 	.word	0x080058f4
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800293c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002940:	20000540 	.word	0x20000540
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8002944:	20000540 	.word	0x20000540
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002948:	20000758 	.word	0x20000758

0800294c <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800294c:	e7fe      	b.n	800294c <BusFault_Handler>
	...

08002950 <__libc_init_array>:
 8002950:	b570      	push	{r4, r5, r6, lr}
 8002952:	4b0e      	ldr	r3, [pc, #56]	; (800298c <__libc_init_array+0x3c>)
 8002954:	4c0e      	ldr	r4, [pc, #56]	; (8002990 <__libc_init_array+0x40>)
 8002956:	1ae4      	subs	r4, r4, r3
 8002958:	10a4      	asrs	r4, r4, #2
 800295a:	2500      	movs	r5, #0
 800295c:	461e      	mov	r6, r3
 800295e:	42a5      	cmp	r5, r4
 8002960:	d004      	beq.n	800296c <__libc_init_array+0x1c>
 8002962:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002966:	4798      	blx	r3
 8002968:	3501      	adds	r5, #1
 800296a:	e7f8      	b.n	800295e <__libc_init_array+0xe>
 800296c:	f002 feea 	bl	8005744 <_init>
 8002970:	4c08      	ldr	r4, [pc, #32]	; (8002994 <__libc_init_array+0x44>)
 8002972:	4b09      	ldr	r3, [pc, #36]	; (8002998 <__libc_init_array+0x48>)
 8002974:	1ae4      	subs	r4, r4, r3
 8002976:	10a4      	asrs	r4, r4, #2
 8002978:	2500      	movs	r5, #0
 800297a:	461e      	mov	r6, r3
 800297c:	42a5      	cmp	r5, r4
 800297e:	d004      	beq.n	800298a <__libc_init_array+0x3a>
 8002980:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002984:	4798      	blx	r3
 8002986:	3501      	adds	r5, #1
 8002988:	e7f8      	b.n	800297c <__libc_init_array+0x2c>
 800298a:	bd70      	pop	{r4, r5, r6, pc}
 800298c:	080058ec 	.word	0x080058ec
 8002990:	080058ec 	.word	0x080058ec
 8002994:	080058f0 	.word	0x080058f0
 8002998:	080058ec 	.word	0x080058ec

0800299c <sprintf>:
 800299c:	b40e      	push	{r1, r2, r3}
 800299e:	b500      	push	{lr}
 80029a0:	b09c      	sub	sp, #112	; 0x70
 80029a2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80029a6:	ab1d      	add	r3, sp, #116	; 0x74
 80029a8:	f8ad 1014 	strh.w	r1, [sp, #20]
 80029ac:	9002      	str	r0, [sp, #8]
 80029ae:	9006      	str	r0, [sp, #24]
 80029b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80029b4:	480a      	ldr	r0, [pc, #40]	; (80029e0 <sprintf+0x44>)
 80029b6:	9104      	str	r1, [sp, #16]
 80029b8:	9107      	str	r1, [sp, #28]
 80029ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029be:	f853 2b04 	ldr.w	r2, [r3], #4
 80029c2:	f8ad 1016 	strh.w	r1, [sp, #22]
 80029c6:	6800      	ldr	r0, [r0, #0]
 80029c8:	9301      	str	r3, [sp, #4]
 80029ca:	a902      	add	r1, sp, #8
 80029cc:	f000 f80c 	bl	80029e8 <_svfprintf_r>
 80029d0:	9b02      	ldr	r3, [sp, #8]
 80029d2:	2200      	movs	r2, #0
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	b01c      	add	sp, #112	; 0x70
 80029d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80029dc:	b003      	add	sp, #12
 80029de:	4770      	bx	lr
 80029e0:	200000f4 	.word	0x200000f4
 80029e4:	00000000 	.word	0x00000000

080029e8 <_svfprintf_r>:
 80029e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029ec:	b0bd      	sub	sp, #244	; 0xf4
 80029ee:	468b      	mov	fp, r1
 80029f0:	9205      	str	r2, [sp, #20]
 80029f2:	461f      	mov	r7, r3
 80029f4:	4682      	mov	sl, r0
 80029f6:	f001 fdeb 	bl	80045d0 <_localeconv_r>
 80029fa:	6803      	ldr	r3, [r0, #0]
 80029fc:	930d      	str	r3, [sp, #52]	; 0x34
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fd fc06 	bl	8000210 <strlen>
 8002a04:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8002a08:	9008      	str	r0, [sp, #32]
 8002a0a:	0619      	lsls	r1, r3, #24
 8002a0c:	d515      	bpl.n	8002a3a <_svfprintf_r+0x52>
 8002a0e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8002a12:	b993      	cbnz	r3, 8002a3a <_svfprintf_r+0x52>
 8002a14:	2140      	movs	r1, #64	; 0x40
 8002a16:	4650      	mov	r0, sl
 8002a18:	f001 fde6 	bl	80045e8 <_malloc_r>
 8002a1c:	f8cb 0000 	str.w	r0, [fp]
 8002a20:	f8cb 0010 	str.w	r0, [fp, #16]
 8002a24:	b930      	cbnz	r0, 8002a34 <_svfprintf_r+0x4c>
 8002a26:	230c      	movs	r3, #12
 8002a28:	f8ca 3000 	str.w	r3, [sl]
 8002a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a30:	f000 bf95 	b.w	800395e <_svfprintf_r+0xf76>
 8002a34:	2340      	movs	r3, #64	; 0x40
 8002a36:	f8cb 3014 	str.w	r3, [fp, #20]
 8002a3a:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8002ca0 <_svfprintf_r+0x2b8>
 8002a3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002a42:	2300      	movs	r3, #0
 8002a44:	ac2c      	add	r4, sp, #176	; 0xb0
 8002a46:	941f      	str	r4, [sp, #124]	; 0x7c
 8002a48:	9321      	str	r3, [sp, #132]	; 0x84
 8002a4a:	9320      	str	r3, [sp, #128]	; 0x80
 8002a4c:	9304      	str	r3, [sp, #16]
 8002a4e:	9311      	str	r3, [sp, #68]	; 0x44
 8002a50:	9310      	str	r3, [sp, #64]	; 0x40
 8002a52:	930a      	str	r3, [sp, #40]	; 0x28
 8002a54:	9d05      	ldr	r5, [sp, #20]
 8002a56:	462b      	mov	r3, r5
 8002a58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a5c:	b11a      	cbz	r2, 8002a66 <_svfprintf_r+0x7e>
 8002a5e:	2a25      	cmp	r2, #37	; 0x25
 8002a60:	d001      	beq.n	8002a66 <_svfprintf_r+0x7e>
 8002a62:	461d      	mov	r5, r3
 8002a64:	e7f7      	b.n	8002a56 <_svfprintf_r+0x6e>
 8002a66:	9b05      	ldr	r3, [sp, #20]
 8002a68:	1aee      	subs	r6, r5, r3
 8002a6a:	d017      	beq.n	8002a9c <_svfprintf_r+0xb4>
 8002a6c:	e884 0048 	stmia.w	r4, {r3, r6}
 8002a70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002a72:	4433      	add	r3, r6
 8002a74:	9321      	str	r3, [sp, #132]	; 0x84
 8002a76:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002a78:	3301      	adds	r3, #1
 8002a7a:	2b07      	cmp	r3, #7
 8002a7c:	9320      	str	r3, [sp, #128]	; 0x80
 8002a7e:	dc01      	bgt.n	8002a84 <_svfprintf_r+0x9c>
 8002a80:	3408      	adds	r4, #8
 8002a82:	e008      	b.n	8002a96 <_svfprintf_r+0xae>
 8002a84:	aa1f      	add	r2, sp, #124	; 0x7c
 8002a86:	4659      	mov	r1, fp
 8002a88:	4650      	mov	r0, sl
 8002a8a:	f002 fac1 	bl	8005010 <__ssprint_r>
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	f040 862c 	bne.w	80036ec <_svfprintf_r+0xd04>
 8002a94:	ac2c      	add	r4, sp, #176	; 0xb0
 8002a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a98:	4433      	add	r3, r6
 8002a9a:	930a      	str	r3, [sp, #40]	; 0x28
 8002a9c:	782b      	ldrb	r3, [r5, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 861d 	beq.w	80036de <_svfprintf_r+0xcf6>
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	1c6b      	adds	r3, r5, #1
 8002aa8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002aac:	4611      	mov	r1, r2
 8002aae:	f04f 39ff 	mov.w	r9, #4294967295
 8002ab2:	9209      	str	r2, [sp, #36]	; 0x24
 8002ab4:	4615      	mov	r5, r2
 8002ab6:	200a      	movs	r0, #10
 8002ab8:	1c5e      	adds	r6, r3, #1
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	9605      	str	r6, [sp, #20]
 8002abe:	9302      	str	r3, [sp, #8]
 8002ac0:	9b02      	ldr	r3, [sp, #8]
 8002ac2:	3b20      	subs	r3, #32
 8002ac4:	2b58      	cmp	r3, #88	; 0x58
 8002ac6:	f200 8263 	bhi.w	8002f90 <_svfprintf_r+0x5a8>
 8002aca:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002ace:	005c      	.short	0x005c
 8002ad0:	02610261 	.word	0x02610261
 8002ad4:	0261006b 	.word	0x0261006b
 8002ad8:	02610261 	.word	0x02610261
 8002adc:	02610261 	.word	0x02610261
 8002ae0:	006e0261 	.word	0x006e0261
 8002ae4:	02610059 	.word	0x02610059
 8002ae8:	007c0079 	.word	0x007c0079
 8002aec:	00a30261 	.word	0x00a30261
 8002af0:	00a600a6 	.word	0x00a600a6
 8002af4:	00a600a6 	.word	0x00a600a6
 8002af8:	00a600a6 	.word	0x00a600a6
 8002afc:	00a600a6 	.word	0x00a600a6
 8002b00:	026100a6 	.word	0x026100a6
 8002b04:	02610261 	.word	0x02610261
 8002b08:	02610261 	.word	0x02610261
 8002b0c:	02610261 	.word	0x02610261
 8002b10:	02610261 	.word	0x02610261
 8002b14:	00d60261 	.word	0x00d60261
 8002b18:	0261010b 	.word	0x0261010b
 8002b1c:	0261010b 	.word	0x0261010b
 8002b20:	02610261 	.word	0x02610261
 8002b24:	00b90261 	.word	0x00b90261
 8002b28:	02610261 	.word	0x02610261
 8002b2c:	02610152 	.word	0x02610152
 8002b30:	02610261 	.word	0x02610261
 8002b34:	02610261 	.word	0x02610261
 8002b38:	02610199 	.word	0x02610199
 8002b3c:	00660261 	.word	0x00660261
 8002b40:	02610261 	.word	0x02610261
 8002b44:	02610261 	.word	0x02610261
 8002b48:	02610261 	.word	0x02610261
 8002b4c:	02610261 	.word	0x02610261
 8002b50:	02610261 	.word	0x02610261
 8002b54:	006100cd 	.word	0x006100cd
 8002b58:	010b010b 	.word	0x010b010b
 8002b5c:	00bc010b 	.word	0x00bc010b
 8002b60:	02610061 	.word	0x02610061
 8002b64:	00bf0261 	.word	0x00bf0261
 8002b68:	01340261 	.word	0x01340261
 8002b6c:	016f0154 	.word	0x016f0154
 8002b70:	026100ca 	.word	0x026100ca
 8002b74:	02610180 	.word	0x02610180
 8002b78:	0261019b 	.word	0x0261019b
 8002b7c:	01b30261 	.word	0x01b30261
 8002b80:	2201      	movs	r2, #1
 8002b82:	212b      	movs	r1, #43	; 0x2b
 8002b84:	e002      	b.n	8002b8c <_svfprintf_r+0x1a4>
 8002b86:	b909      	cbnz	r1, 8002b8c <_svfprintf_r+0x1a4>
 8002b88:	2201      	movs	r2, #1
 8002b8a:	2120      	movs	r1, #32
 8002b8c:	9b05      	ldr	r3, [sp, #20]
 8002b8e:	e793      	b.n	8002ab8 <_svfprintf_r+0xd0>
 8002b90:	2a00      	cmp	r2, #0
 8002b92:	d077      	beq.n	8002c84 <_svfprintf_r+0x29c>
 8002b94:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8002b98:	e074      	b.n	8002c84 <_svfprintf_r+0x29c>
 8002b9a:	b10a      	cbz	r2, 8002ba0 <_svfprintf_r+0x1b8>
 8002b9c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8002ba0:	4b41      	ldr	r3, [pc, #260]	; (8002ca8 <_svfprintf_r+0x2c0>)
 8002ba2:	e14b      	b.n	8002e3c <_svfprintf_r+0x454>
 8002ba4:	f045 0501 	orr.w	r5, r5, #1
 8002ba8:	e7f0      	b.n	8002b8c <_svfprintf_r+0x1a4>
 8002baa:	683e      	ldr	r6, [r7, #0]
 8002bac:	9609      	str	r6, [sp, #36]	; 0x24
 8002bae:	2e00      	cmp	r6, #0
 8002bb0:	f107 0304 	add.w	r3, r7, #4
 8002bb4:	db01      	blt.n	8002bba <_svfprintf_r+0x1d2>
 8002bb6:	461f      	mov	r7, r3
 8002bb8:	e7e8      	b.n	8002b8c <_svfprintf_r+0x1a4>
 8002bba:	4276      	negs	r6, r6
 8002bbc:	9609      	str	r6, [sp, #36]	; 0x24
 8002bbe:	461f      	mov	r7, r3
 8002bc0:	f045 0504 	orr.w	r5, r5, #4
 8002bc4:	e7e2      	b.n	8002b8c <_svfprintf_r+0x1a4>
 8002bc6:	9e05      	ldr	r6, [sp, #20]
 8002bc8:	9b05      	ldr	r3, [sp, #20]
 8002bca:	7836      	ldrb	r6, [r6, #0]
 8002bcc:	9602      	str	r6, [sp, #8]
 8002bce:	2e2a      	cmp	r6, #42	; 0x2a
 8002bd0:	f103 0301 	add.w	r3, r3, #1
 8002bd4:	d002      	beq.n	8002bdc <_svfprintf_r+0x1f4>
 8002bd6:	f04f 0900 	mov.w	r9, #0
 8002bda:	e00a      	b.n	8002bf2 <_svfprintf_r+0x20a>
 8002bdc:	f8d7 9000 	ldr.w	r9, [r7]
 8002be0:	9305      	str	r3, [sp, #20]
 8002be2:	1d3e      	adds	r6, r7, #4
 8002be4:	f1b9 0f00 	cmp.w	r9, #0
 8002be8:	4637      	mov	r7, r6
 8002bea:	dacf      	bge.n	8002b8c <_svfprintf_r+0x1a4>
 8002bec:	f04f 39ff 	mov.w	r9, #4294967295
 8002bf0:	e7cc      	b.n	8002b8c <_svfprintf_r+0x1a4>
 8002bf2:	9305      	str	r3, [sp, #20]
 8002bf4:	9b02      	ldr	r3, [sp, #8]
 8002bf6:	3b30      	subs	r3, #48	; 0x30
 8002bf8:	2b09      	cmp	r3, #9
 8002bfa:	d808      	bhi.n	8002c0e <_svfprintf_r+0x226>
 8002bfc:	fb00 3909 	mla	r9, r0, r9, r3
 8002c00:	9b05      	ldr	r3, [sp, #20]
 8002c02:	461e      	mov	r6, r3
 8002c04:	f816 3b01 	ldrb.w	r3, [r6], #1
 8002c08:	9302      	str	r3, [sp, #8]
 8002c0a:	4633      	mov	r3, r6
 8002c0c:	e7f1      	b.n	8002bf2 <_svfprintf_r+0x20a>
 8002c0e:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 8002c12:	e755      	b.n	8002ac0 <_svfprintf_r+0xd8>
 8002c14:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002c18:	e7b8      	b.n	8002b8c <_svfprintf_r+0x1a4>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8002c1e:	9b02      	ldr	r3, [sp, #8]
 8002c20:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002c22:	3b30      	subs	r3, #48	; 0x30
 8002c24:	fb00 3306 	mla	r3, r0, r6, r3
 8002c28:	9309      	str	r3, [sp, #36]	; 0x24
 8002c2a:	9b05      	ldr	r3, [sp, #20]
 8002c2c:	461e      	mov	r6, r3
 8002c2e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8002c32:	9302      	str	r3, [sp, #8]
 8002c34:	9b02      	ldr	r3, [sp, #8]
 8002c36:	9605      	str	r6, [sp, #20]
 8002c38:	3b30      	subs	r3, #48	; 0x30
 8002c3a:	2b09      	cmp	r3, #9
 8002c3c:	d9ef      	bls.n	8002c1e <_svfprintf_r+0x236>
 8002c3e:	e73f      	b.n	8002ac0 <_svfprintf_r+0xd8>
 8002c40:	f045 0508 	orr.w	r5, r5, #8
 8002c44:	e7a2      	b.n	8002b8c <_svfprintf_r+0x1a4>
 8002c46:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8002c4a:	e79f      	b.n	8002b8c <_svfprintf_r+0x1a4>
 8002c4c:	9b05      	ldr	r3, [sp, #20]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b6c      	cmp	r3, #108	; 0x6c
 8002c52:	d103      	bne.n	8002c5c <_svfprintf_r+0x274>
 8002c54:	9b05      	ldr	r3, [sp, #20]
 8002c56:	3301      	adds	r3, #1
 8002c58:	9305      	str	r3, [sp, #20]
 8002c5a:	e002      	b.n	8002c62 <_svfprintf_r+0x27a>
 8002c5c:	f045 0510 	orr.w	r5, r5, #16
 8002c60:	e794      	b.n	8002b8c <_svfprintf_r+0x1a4>
 8002c62:	f045 0520 	orr.w	r5, r5, #32
 8002c66:	e791      	b.n	8002b8c <_svfprintf_r+0x1a4>
 8002c68:	1d3b      	adds	r3, r7, #4
 8002c6a:	9303      	str	r3, [sp, #12]
 8002c6c:	2600      	movs	r6, #0
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8002c74:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8002c78:	e199      	b.n	8002fae <_svfprintf_r+0x5c6>
 8002c7a:	b10a      	cbz	r2, 8002c80 <_svfprintf_r+0x298>
 8002c7c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8002c80:	f045 0510 	orr.w	r5, r5, #16
 8002c84:	06aa      	lsls	r2, r5, #26
 8002c86:	d511      	bpl.n	8002cac <_svfprintf_r+0x2c4>
 8002c88:	3707      	adds	r7, #7
 8002c8a:	f027 0707 	bic.w	r7, r7, #7
 8002c8e:	f107 0308 	add.w	r3, r7, #8
 8002c92:	9303      	str	r3, [sp, #12]
 8002c94:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002c98:	e017      	b.n	8002cca <_svfprintf_r+0x2e2>
 8002c9a:	bf00      	nop
 8002c9c:	f3af 8000 	nop.w
	...
 8002ca8:	08005798 	.word	0x08005798
 8002cac:	f015 0f10 	tst.w	r5, #16
 8002cb0:	f107 0304 	add.w	r3, r7, #4
 8002cb4:	d002      	beq.n	8002cbc <_svfprintf_r+0x2d4>
 8002cb6:	9303      	str	r3, [sp, #12]
 8002cb8:	683e      	ldr	r6, [r7, #0]
 8002cba:	e005      	b.n	8002cc8 <_svfprintf_r+0x2e0>
 8002cbc:	683e      	ldr	r6, [r7, #0]
 8002cbe:	9303      	str	r3, [sp, #12]
 8002cc0:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002cc4:	bf18      	it	ne
 8002cc6:	b236      	sxthne	r6, r6
 8002cc8:	17f7      	asrs	r7, r6, #31
 8002cca:	2e00      	cmp	r6, #0
 8002ccc:	f177 0300 	sbcs.w	r3, r7, #0
 8002cd0:	f280 80de 	bge.w	8002e90 <_svfprintf_r+0x4a8>
 8002cd4:	4276      	negs	r6, r6
 8002cd6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8002cda:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8002cde:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002ce2:	e0d5      	b.n	8002e90 <_svfprintf_r+0x4a8>
 8002ce4:	b10a      	cbz	r2, 8002cea <_svfprintf_r+0x302>
 8002ce6:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8002cea:	3707      	adds	r7, #7
 8002cec:	f027 0707 	bic.w	r7, r7, #7
 8002cf0:	f107 0308 	add.w	r3, r7, #8
 8002cf4:	9303      	str	r3, [sp, #12]
 8002cf6:	ed97 7b00 	vldr	d7, [r7]
 8002cfa:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002cfe:	9b06      	ldr	r3, [sp, #24]
 8002d00:	9312      	str	r3, [sp, #72]	; 0x48
 8002d02:	9b07      	ldr	r3, [sp, #28]
 8002d04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d08:	9313      	str	r3, [sp, #76]	; 0x4c
 8002d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d0e:	4bab      	ldr	r3, [pc, #684]	; (8002fbc <_svfprintf_r+0x5d4>)
 8002d10:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002d14:	f7fd ff26 	bl	8000b64 <__aeabi_dcmpun>
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	f040 84f1 	bne.w	8003700 <_svfprintf_r+0xd18>
 8002d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d22:	4ba6      	ldr	r3, [pc, #664]	; (8002fbc <_svfprintf_r+0x5d4>)
 8002d24:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002d28:	f7fd fefe 	bl	8000b28 <__aeabi_dcmple>
 8002d2c:	2800      	cmp	r0, #0
 8002d2e:	f040 84e7 	bne.w	8003700 <_svfprintf_r+0xd18>
 8002d32:	f000 bdfd 	b.w	8003930 <_svfprintf_r+0xf48>
 8002d36:	b10a      	cbz	r2, 8002d3c <_svfprintf_r+0x354>
 8002d38:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8002d3c:	f015 0f20 	tst.w	r5, #32
 8002d40:	f107 0304 	add.w	r3, r7, #4
 8002d44:	d007      	beq.n	8002d56 <_svfprintf_r+0x36e>
 8002d46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	17ce      	asrs	r6, r1, #31
 8002d4c:	4608      	mov	r0, r1
 8002d4e:	4631      	mov	r1, r6
 8002d50:	e9c2 0100 	strd	r0, r1, [r2]
 8002d54:	e00b      	b.n	8002d6e <_svfprintf_r+0x386>
 8002d56:	06e9      	lsls	r1, r5, #27
 8002d58:	d406      	bmi.n	8002d68 <_svfprintf_r+0x380>
 8002d5a:	066a      	lsls	r2, r5, #25
 8002d5c:	d504      	bpl.n	8002d68 <_svfprintf_r+0x380>
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8002d64:	8011      	strh	r1, [r2, #0]
 8002d66:	e002      	b.n	8002d6e <_svfprintf_r+0x386>
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002d6c:	6011      	str	r1, [r2, #0]
 8002d6e:	461f      	mov	r7, r3
 8002d70:	e670      	b.n	8002a54 <_svfprintf_r+0x6c>
 8002d72:	f045 0510 	orr.w	r5, r5, #16
 8002d76:	f015 0320 	ands.w	r3, r5, #32
 8002d7a:	d009      	beq.n	8002d90 <_svfprintf_r+0x3a8>
 8002d7c:	3707      	adds	r7, #7
 8002d7e:	f027 0707 	bic.w	r7, r7, #7
 8002d82:	f107 0308 	add.w	r3, r7, #8
 8002d86:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002d8a:	9303      	str	r3, [sp, #12]
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	e07b      	b.n	8002e88 <_svfprintf_r+0x4a0>
 8002d90:	1d3a      	adds	r2, r7, #4
 8002d92:	f015 0110 	ands.w	r1, r5, #16
 8002d96:	9203      	str	r2, [sp, #12]
 8002d98:	d105      	bne.n	8002da6 <_svfprintf_r+0x3be>
 8002d9a:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8002d9e:	d002      	beq.n	8002da6 <_svfprintf_r+0x3be>
 8002da0:	883e      	ldrh	r6, [r7, #0]
 8002da2:	2700      	movs	r7, #0
 8002da4:	e7f2      	b.n	8002d8c <_svfprintf_r+0x3a4>
 8002da6:	683e      	ldr	r6, [r7, #0]
 8002da8:	2700      	movs	r7, #0
 8002daa:	e06d      	b.n	8002e88 <_svfprintf_r+0x4a0>
 8002dac:	1d3b      	adds	r3, r7, #4
 8002dae:	9303      	str	r3, [sp, #12]
 8002db0:	2330      	movs	r3, #48	; 0x30
 8002db2:	2278      	movs	r2, #120	; 0x78
 8002db4:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8002db8:	4b81      	ldr	r3, [pc, #516]	; (8002fc0 <_svfprintf_r+0x5d8>)
 8002dba:	683e      	ldr	r6, [r7, #0]
 8002dbc:	9311      	str	r3, [sp, #68]	; 0x44
 8002dbe:	2700      	movs	r7, #0
 8002dc0:	f045 0502 	orr.w	r5, r5, #2
 8002dc4:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8002dc8:	2302      	movs	r3, #2
 8002dca:	9202      	str	r2, [sp, #8]
 8002dcc:	e05c      	b.n	8002e88 <_svfprintf_r+0x4a0>
 8002dce:	2600      	movs	r6, #0
 8002dd0:	1d3b      	adds	r3, r7, #4
 8002dd2:	45b1      	cmp	r9, r6
 8002dd4:	9303      	str	r3, [sp, #12]
 8002dd6:	f8d7 8000 	ldr.w	r8, [r7]
 8002dda:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8002dde:	db0a      	blt.n	8002df6 <_svfprintf_r+0x40e>
 8002de0:	464a      	mov	r2, r9
 8002de2:	4631      	mov	r1, r6
 8002de4:	4640      	mov	r0, r8
 8002de6:	f7fd fa1b 	bl	8000220 <memchr>
 8002dea:	2800      	cmp	r0, #0
 8002dec:	f000 80ea 	beq.w	8002fc4 <_svfprintf_r+0x5dc>
 8002df0:	ebc8 0900 	rsb	r9, r8, r0
 8002df4:	e0e7      	b.n	8002fc6 <_svfprintf_r+0x5de>
 8002df6:	4640      	mov	r0, r8
 8002df8:	f7fd fa0a 	bl	8000210 <strlen>
 8002dfc:	4681      	mov	r9, r0
 8002dfe:	e0e2      	b.n	8002fc6 <_svfprintf_r+0x5de>
 8002e00:	f045 0510 	orr.w	r5, r5, #16
 8002e04:	06ae      	lsls	r6, r5, #26
 8002e06:	d508      	bpl.n	8002e1a <_svfprintf_r+0x432>
 8002e08:	3707      	adds	r7, #7
 8002e0a:	f027 0707 	bic.w	r7, r7, #7
 8002e0e:	f107 0308 	add.w	r3, r7, #8
 8002e12:	9303      	str	r3, [sp, #12]
 8002e14:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002e18:	e00a      	b.n	8002e30 <_svfprintf_r+0x448>
 8002e1a:	1d3b      	adds	r3, r7, #4
 8002e1c:	f015 0f10 	tst.w	r5, #16
 8002e20:	9303      	str	r3, [sp, #12]
 8002e22:	d103      	bne.n	8002e2c <_svfprintf_r+0x444>
 8002e24:	0668      	lsls	r0, r5, #25
 8002e26:	d501      	bpl.n	8002e2c <_svfprintf_r+0x444>
 8002e28:	883e      	ldrh	r6, [r7, #0]
 8002e2a:	e000      	b.n	8002e2e <_svfprintf_r+0x446>
 8002e2c:	683e      	ldr	r6, [r7, #0]
 8002e2e:	2700      	movs	r7, #0
 8002e30:	2301      	movs	r3, #1
 8002e32:	e029      	b.n	8002e88 <_svfprintf_r+0x4a0>
 8002e34:	b10a      	cbz	r2, 8002e3a <_svfprintf_r+0x452>
 8002e36:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8002e3a:	4b61      	ldr	r3, [pc, #388]	; (8002fc0 <_svfprintf_r+0x5d8>)
 8002e3c:	9311      	str	r3, [sp, #68]	; 0x44
 8002e3e:	06a9      	lsls	r1, r5, #26
 8002e40:	d508      	bpl.n	8002e54 <_svfprintf_r+0x46c>
 8002e42:	3707      	adds	r7, #7
 8002e44:	f027 0707 	bic.w	r7, r7, #7
 8002e48:	f107 0308 	add.w	r3, r7, #8
 8002e4c:	9303      	str	r3, [sp, #12]
 8002e4e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002e52:	e00a      	b.n	8002e6a <_svfprintf_r+0x482>
 8002e54:	1d3b      	adds	r3, r7, #4
 8002e56:	f015 0f10 	tst.w	r5, #16
 8002e5a:	9303      	str	r3, [sp, #12]
 8002e5c:	d103      	bne.n	8002e66 <_svfprintf_r+0x47e>
 8002e5e:	066a      	lsls	r2, r5, #25
 8002e60:	d501      	bpl.n	8002e66 <_svfprintf_r+0x47e>
 8002e62:	883e      	ldrh	r6, [r7, #0]
 8002e64:	e000      	b.n	8002e68 <_svfprintf_r+0x480>
 8002e66:	683e      	ldr	r6, [r7, #0]
 8002e68:	2700      	movs	r7, #0
 8002e6a:	07eb      	lsls	r3, r5, #31
 8002e6c:	d50b      	bpl.n	8002e86 <_svfprintf_r+0x49e>
 8002e6e:	ea56 0307 	orrs.w	r3, r6, r7
 8002e72:	d008      	beq.n	8002e86 <_svfprintf_r+0x49e>
 8002e74:	2330      	movs	r3, #48	; 0x30
 8002e76:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8002e7a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002e7e:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8002e82:	f045 0502 	orr.w	r5, r5, #2
 8002e86:	2302      	movs	r3, #2
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002e8e:	e000      	b.n	8002e92 <_svfprintf_r+0x4aa>
 8002e90:	2301      	movs	r3, #1
 8002e92:	f1b9 0f00 	cmp.w	r9, #0
 8002e96:	f2c0 855c 	blt.w	8003952 <_svfprintf_r+0xf6a>
 8002e9a:	ea56 0207 	orrs.w	r2, r6, r7
 8002e9e:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 8002ea2:	d103      	bne.n	8002eac <_svfprintf_r+0x4c4>
 8002ea4:	f1b9 0f00 	cmp.w	r9, #0
 8002ea8:	d05f      	beq.n	8002f6a <_svfprintf_r+0x582>
 8002eaa:	e006      	b.n	8002eba <_svfprintf_r+0x4d2>
 8002eac:	460d      	mov	r5, r1
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d025      	beq.n	8002efe <_svfprintf_r+0x516>
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d046      	beq.n	8002f44 <_svfprintf_r+0x55c>
 8002eb6:	4629      	mov	r1, r5
 8002eb8:	e007      	b.n	8002eca <_svfprintf_r+0x4e2>
 8002eba:	460d      	mov	r5, r1
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d022      	beq.n	8002f06 <_svfprintf_r+0x51e>
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d03d      	beq.n	8002f40 <_svfprintf_r+0x558>
 8002ec4:	4629      	mov	r1, r5
 8002ec6:	2600      	movs	r6, #0
 8002ec8:	2700      	movs	r7, #0
 8002eca:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8002ece:	08f2      	lsrs	r2, r6, #3
 8002ed0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8002ed4:	08f8      	lsrs	r0, r7, #3
 8002ed6:	f006 0307 	and.w	r3, r6, #7
 8002eda:	4607      	mov	r7, r0
 8002edc:	4616      	mov	r6, r2
 8002ede:	3330      	adds	r3, #48	; 0x30
 8002ee0:	ea56 0207 	orrs.w	r2, r6, r7
 8002ee4:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8002ee8:	d1f1      	bne.n	8002ece <_svfprintf_r+0x4e6>
 8002eea:	07e8      	lsls	r0, r5, #31
 8002eec:	d548      	bpl.n	8002f80 <_svfprintf_r+0x598>
 8002eee:	2b30      	cmp	r3, #48	; 0x30
 8002ef0:	d046      	beq.n	8002f80 <_svfprintf_r+0x598>
 8002ef2:	2330      	movs	r3, #48	; 0x30
 8002ef4:	f808 3c01 	strb.w	r3, [r8, #-1]
 8002ef8:	f108 38ff 	add.w	r8, r8, #4294967295
 8002efc:	e040      	b.n	8002f80 <_svfprintf_r+0x598>
 8002efe:	2f00      	cmp	r7, #0
 8002f00:	bf08      	it	eq
 8002f02:	2e0a      	cmpeq	r6, #10
 8002f04:	d205      	bcs.n	8002f12 <_svfprintf_r+0x52a>
 8002f06:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8002f0a:	3630      	adds	r6, #48	; 0x30
 8002f0c:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8002f10:	e029      	b.n	8002f66 <_svfprintf_r+0x57e>
 8002f12:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8002f16:	4630      	mov	r0, r6
 8002f18:	4639      	mov	r1, r7
 8002f1a:	220a      	movs	r2, #10
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f7fd fe5f 	bl	8000be0 <__aeabi_uldivmod>
 8002f22:	3230      	adds	r2, #48	; 0x30
 8002f24:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8002f28:	2300      	movs	r3, #0
 8002f2a:	4630      	mov	r0, r6
 8002f2c:	4639      	mov	r1, r7
 8002f2e:	220a      	movs	r2, #10
 8002f30:	f7fd fe56 	bl	8000be0 <__aeabi_uldivmod>
 8002f34:	4606      	mov	r6, r0
 8002f36:	460f      	mov	r7, r1
 8002f38:	ea56 0307 	orrs.w	r3, r6, r7
 8002f3c:	d1eb      	bne.n	8002f16 <_svfprintf_r+0x52e>
 8002f3e:	e012      	b.n	8002f66 <_svfprintf_r+0x57e>
 8002f40:	2600      	movs	r6, #0
 8002f42:	2700      	movs	r7, #0
 8002f44:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8002f48:	f006 030f 	and.w	r3, r6, #15
 8002f4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002f4e:	5cd3      	ldrb	r3, [r2, r3]
 8002f50:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8002f54:	0933      	lsrs	r3, r6, #4
 8002f56:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8002f5a:	093a      	lsrs	r2, r7, #4
 8002f5c:	461e      	mov	r6, r3
 8002f5e:	4617      	mov	r7, r2
 8002f60:	ea56 0307 	orrs.w	r3, r6, r7
 8002f64:	d1f0      	bne.n	8002f48 <_svfprintf_r+0x560>
 8002f66:	4629      	mov	r1, r5
 8002f68:	e00a      	b.n	8002f80 <_svfprintf_r+0x598>
 8002f6a:	b93b      	cbnz	r3, 8002f7c <_svfprintf_r+0x594>
 8002f6c:	07ea      	lsls	r2, r5, #31
 8002f6e:	d505      	bpl.n	8002f7c <_svfprintf_r+0x594>
 8002f70:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8002f74:	2330      	movs	r3, #48	; 0x30
 8002f76:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8002f7a:	e001      	b.n	8002f80 <_svfprintf_r+0x598>
 8002f7c:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8002f80:	464e      	mov	r6, r9
 8002f82:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8002f86:	ebc8 0909 	rsb	r9, r8, r9
 8002f8a:	460d      	mov	r5, r1
 8002f8c:	2700      	movs	r7, #0
 8002f8e:	e01b      	b.n	8002fc8 <_svfprintf_r+0x5e0>
 8002f90:	b10a      	cbz	r2, 8002f96 <_svfprintf_r+0x5ae>
 8002f92:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8002f96:	9b02      	ldr	r3, [sp, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 83a0 	beq.w	80036de <_svfprintf_r+0xcf6>
 8002f9e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002fa2:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8002fa6:	2600      	movs	r6, #0
 8002fa8:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8002fac:	9703      	str	r7, [sp, #12]
 8002fae:	f04f 0901 	mov.w	r9, #1
 8002fb2:	4637      	mov	r7, r6
 8002fb4:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8002fb8:	e006      	b.n	8002fc8 <_svfprintf_r+0x5e0>
 8002fba:	bf00      	nop
 8002fbc:	7fefffff 	.word	0x7fefffff
 8002fc0:	080057a9 	.word	0x080057a9
 8002fc4:	4606      	mov	r6, r0
 8002fc6:	4637      	mov	r7, r6
 8002fc8:	454e      	cmp	r6, r9
 8002fca:	4633      	mov	r3, r6
 8002fcc:	bfb8      	it	lt
 8002fce:	464b      	movlt	r3, r9
 8002fd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8002fd2:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8002fd6:	b113      	cbz	r3, 8002fde <_svfprintf_r+0x5f6>
 8002fd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002fda:	3301      	adds	r3, #1
 8002fdc:	930b      	str	r3, [sp, #44]	; 0x2c
 8002fde:	f015 0302 	ands.w	r3, r5, #2
 8002fe2:	9314      	str	r3, [sp, #80]	; 0x50
 8002fe4:	bf1e      	ittt	ne
 8002fe6:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8002fe8:	3302      	addne	r3, #2
 8002fea:	930b      	strne	r3, [sp, #44]	; 0x2c
 8002fec:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8002ff0:	9315      	str	r3, [sp, #84]	; 0x54
 8002ff2:	d139      	bne.n	8003068 <_svfprintf_r+0x680>
 8002ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ff6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002ff8:	1a9b      	subs	r3, r3, r2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	930c      	str	r3, [sp, #48]	; 0x30
 8002ffe:	dd33      	ble.n	8003068 <_svfprintf_r+0x680>
 8003000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003002:	2b10      	cmp	r3, #16
 8003004:	4ba6      	ldr	r3, [pc, #664]	; (80032a0 <_svfprintf_r+0x8b8>)
 8003006:	6023      	str	r3, [r4, #0]
 8003008:	dd18      	ble.n	800303c <_svfprintf_r+0x654>
 800300a:	2310      	movs	r3, #16
 800300c:	6063      	str	r3, [r4, #4]
 800300e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003010:	3310      	adds	r3, #16
 8003012:	9321      	str	r3, [sp, #132]	; 0x84
 8003014:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003016:	3301      	adds	r3, #1
 8003018:	2b07      	cmp	r3, #7
 800301a:	9320      	str	r3, [sp, #128]	; 0x80
 800301c:	dc01      	bgt.n	8003022 <_svfprintf_r+0x63a>
 800301e:	3408      	adds	r4, #8
 8003020:	e008      	b.n	8003034 <_svfprintf_r+0x64c>
 8003022:	aa1f      	add	r2, sp, #124	; 0x7c
 8003024:	4659      	mov	r1, fp
 8003026:	4650      	mov	r0, sl
 8003028:	f001 fff2 	bl	8005010 <__ssprint_r>
 800302c:	2800      	cmp	r0, #0
 800302e:	f040 835d 	bne.w	80036ec <_svfprintf_r+0xd04>
 8003032:	ac2c      	add	r4, sp, #176	; 0xb0
 8003034:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003036:	3b10      	subs	r3, #16
 8003038:	930c      	str	r3, [sp, #48]	; 0x30
 800303a:	e7e1      	b.n	8003000 <_svfprintf_r+0x618>
 800303c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800303e:	6063      	str	r3, [r4, #4]
 8003040:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003042:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003044:	4413      	add	r3, r2
 8003046:	9321      	str	r3, [sp, #132]	; 0x84
 8003048:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800304a:	3301      	adds	r3, #1
 800304c:	2b07      	cmp	r3, #7
 800304e:	9320      	str	r3, [sp, #128]	; 0x80
 8003050:	dc01      	bgt.n	8003056 <_svfprintf_r+0x66e>
 8003052:	3408      	adds	r4, #8
 8003054:	e008      	b.n	8003068 <_svfprintf_r+0x680>
 8003056:	aa1f      	add	r2, sp, #124	; 0x7c
 8003058:	4659      	mov	r1, fp
 800305a:	4650      	mov	r0, sl
 800305c:	f001 ffd8 	bl	8005010 <__ssprint_r>
 8003060:	2800      	cmp	r0, #0
 8003062:	f040 8343 	bne.w	80036ec <_svfprintf_r+0xd04>
 8003066:	ac2c      	add	r4, sp, #176	; 0xb0
 8003068:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800306c:	b1bb      	cbz	r3, 800309e <_svfprintf_r+0x6b6>
 800306e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8003072:	6023      	str	r3, [r4, #0]
 8003074:	2301      	movs	r3, #1
 8003076:	6063      	str	r3, [r4, #4]
 8003078:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800307a:	3301      	adds	r3, #1
 800307c:	9321      	str	r3, [sp, #132]	; 0x84
 800307e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003080:	3301      	adds	r3, #1
 8003082:	2b07      	cmp	r3, #7
 8003084:	9320      	str	r3, [sp, #128]	; 0x80
 8003086:	dc01      	bgt.n	800308c <_svfprintf_r+0x6a4>
 8003088:	3408      	adds	r4, #8
 800308a:	e008      	b.n	800309e <_svfprintf_r+0x6b6>
 800308c:	aa1f      	add	r2, sp, #124	; 0x7c
 800308e:	4659      	mov	r1, fp
 8003090:	4650      	mov	r0, sl
 8003092:	f001 ffbd 	bl	8005010 <__ssprint_r>
 8003096:	2800      	cmp	r0, #0
 8003098:	f040 8328 	bne.w	80036ec <_svfprintf_r+0xd04>
 800309c:	ac2c      	add	r4, sp, #176	; 0xb0
 800309e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80030a0:	b1b3      	cbz	r3, 80030d0 <_svfprintf_r+0x6e8>
 80030a2:	ab18      	add	r3, sp, #96	; 0x60
 80030a4:	6023      	str	r3, [r4, #0]
 80030a6:	2302      	movs	r3, #2
 80030a8:	6063      	str	r3, [r4, #4]
 80030aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80030ac:	3302      	adds	r3, #2
 80030ae:	9321      	str	r3, [sp, #132]	; 0x84
 80030b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80030b2:	3301      	adds	r3, #1
 80030b4:	2b07      	cmp	r3, #7
 80030b6:	9320      	str	r3, [sp, #128]	; 0x80
 80030b8:	dc01      	bgt.n	80030be <_svfprintf_r+0x6d6>
 80030ba:	3408      	adds	r4, #8
 80030bc:	e008      	b.n	80030d0 <_svfprintf_r+0x6e8>
 80030be:	aa1f      	add	r2, sp, #124	; 0x7c
 80030c0:	4659      	mov	r1, fp
 80030c2:	4650      	mov	r0, sl
 80030c4:	f001 ffa4 	bl	8005010 <__ssprint_r>
 80030c8:	2800      	cmp	r0, #0
 80030ca:	f040 830f 	bne.w	80036ec <_svfprintf_r+0xd04>
 80030ce:	ac2c      	add	r4, sp, #176	; 0xb0
 80030d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80030d2:	2b80      	cmp	r3, #128	; 0x80
 80030d4:	d135      	bne.n	8003142 <_svfprintf_r+0x75a>
 80030d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80030da:	1a9b      	subs	r3, r3, r2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	dd30      	ble.n	8003142 <_svfprintf_r+0x75a>
 80030e0:	4a70      	ldr	r2, [pc, #448]	; (80032a4 <_svfprintf_r+0x8bc>)
 80030e2:	6022      	str	r2, [r4, #0]
 80030e4:	2b10      	cmp	r3, #16
 80030e6:	dd18      	ble.n	800311a <_svfprintf_r+0x732>
 80030e8:	2210      	movs	r2, #16
 80030ea:	6062      	str	r2, [r4, #4]
 80030ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80030ee:	3210      	adds	r2, #16
 80030f0:	9221      	str	r2, [sp, #132]	; 0x84
 80030f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80030f4:	3201      	adds	r2, #1
 80030f6:	2a07      	cmp	r2, #7
 80030f8:	9220      	str	r2, [sp, #128]	; 0x80
 80030fa:	dc01      	bgt.n	8003100 <_svfprintf_r+0x718>
 80030fc:	3408      	adds	r4, #8
 80030fe:	e00a      	b.n	8003116 <_svfprintf_r+0x72e>
 8003100:	aa1f      	add	r2, sp, #124	; 0x7c
 8003102:	4659      	mov	r1, fp
 8003104:	4650      	mov	r0, sl
 8003106:	930c      	str	r3, [sp, #48]	; 0x30
 8003108:	f001 ff82 	bl	8005010 <__ssprint_r>
 800310c:	2800      	cmp	r0, #0
 800310e:	f040 82ed 	bne.w	80036ec <_svfprintf_r+0xd04>
 8003112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003114:	ac2c      	add	r4, sp, #176	; 0xb0
 8003116:	3b10      	subs	r3, #16
 8003118:	e7e2      	b.n	80030e0 <_svfprintf_r+0x6f8>
 800311a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800311c:	6063      	str	r3, [r4, #4]
 800311e:	4413      	add	r3, r2
 8003120:	9321      	str	r3, [sp, #132]	; 0x84
 8003122:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003124:	3301      	adds	r3, #1
 8003126:	2b07      	cmp	r3, #7
 8003128:	9320      	str	r3, [sp, #128]	; 0x80
 800312a:	dc01      	bgt.n	8003130 <_svfprintf_r+0x748>
 800312c:	3408      	adds	r4, #8
 800312e:	e008      	b.n	8003142 <_svfprintf_r+0x75a>
 8003130:	aa1f      	add	r2, sp, #124	; 0x7c
 8003132:	4659      	mov	r1, fp
 8003134:	4650      	mov	r0, sl
 8003136:	f001 ff6b 	bl	8005010 <__ssprint_r>
 800313a:	2800      	cmp	r0, #0
 800313c:	f040 82d6 	bne.w	80036ec <_svfprintf_r+0xd04>
 8003140:	ac2c      	add	r4, sp, #176	; 0xb0
 8003142:	ebc9 0606 	rsb	r6, r9, r6
 8003146:	2e00      	cmp	r6, #0
 8003148:	dd2e      	ble.n	80031a8 <_svfprintf_r+0x7c0>
 800314a:	4b56      	ldr	r3, [pc, #344]	; (80032a4 <_svfprintf_r+0x8bc>)
 800314c:	6023      	str	r3, [r4, #0]
 800314e:	2e10      	cmp	r6, #16
 8003150:	dd16      	ble.n	8003180 <_svfprintf_r+0x798>
 8003152:	2310      	movs	r3, #16
 8003154:	6063      	str	r3, [r4, #4]
 8003156:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003158:	3310      	adds	r3, #16
 800315a:	9321      	str	r3, [sp, #132]	; 0x84
 800315c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800315e:	3301      	adds	r3, #1
 8003160:	2b07      	cmp	r3, #7
 8003162:	9320      	str	r3, [sp, #128]	; 0x80
 8003164:	dc01      	bgt.n	800316a <_svfprintf_r+0x782>
 8003166:	3408      	adds	r4, #8
 8003168:	e008      	b.n	800317c <_svfprintf_r+0x794>
 800316a:	aa1f      	add	r2, sp, #124	; 0x7c
 800316c:	4659      	mov	r1, fp
 800316e:	4650      	mov	r0, sl
 8003170:	f001 ff4e 	bl	8005010 <__ssprint_r>
 8003174:	2800      	cmp	r0, #0
 8003176:	f040 82b9 	bne.w	80036ec <_svfprintf_r+0xd04>
 800317a:	ac2c      	add	r4, sp, #176	; 0xb0
 800317c:	3e10      	subs	r6, #16
 800317e:	e7e4      	b.n	800314a <_svfprintf_r+0x762>
 8003180:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003182:	9821      	ldr	r0, [sp, #132]	; 0x84
 8003184:	6066      	str	r6, [r4, #4]
 8003186:	3301      	adds	r3, #1
 8003188:	4406      	add	r6, r0
 800318a:	2b07      	cmp	r3, #7
 800318c:	9621      	str	r6, [sp, #132]	; 0x84
 800318e:	9320      	str	r3, [sp, #128]	; 0x80
 8003190:	dc01      	bgt.n	8003196 <_svfprintf_r+0x7ae>
 8003192:	3408      	adds	r4, #8
 8003194:	e008      	b.n	80031a8 <_svfprintf_r+0x7c0>
 8003196:	aa1f      	add	r2, sp, #124	; 0x7c
 8003198:	4659      	mov	r1, fp
 800319a:	4650      	mov	r0, sl
 800319c:	f001 ff38 	bl	8005010 <__ssprint_r>
 80031a0:	2800      	cmp	r0, #0
 80031a2:	f040 82a3 	bne.w	80036ec <_svfprintf_r+0xd04>
 80031a6:	ac2c      	add	r4, sp, #176	; 0xb0
 80031a8:	05eb      	lsls	r3, r5, #23
 80031aa:	d414      	bmi.n	80031d6 <_svfprintf_r+0x7ee>
 80031ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80031ae:	e884 0300 	stmia.w	r4, {r8, r9}
 80031b2:	444b      	add	r3, r9
 80031b4:	9321      	str	r3, [sp, #132]	; 0x84
 80031b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80031b8:	3301      	adds	r3, #1
 80031ba:	2b07      	cmp	r3, #7
 80031bc:	9320      	str	r3, [sp, #128]	; 0x80
 80031be:	f340 8244 	ble.w	800364a <_svfprintf_r+0xc62>
 80031c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80031c4:	4659      	mov	r1, fp
 80031c6:	4650      	mov	r0, sl
 80031c8:	f001 ff22 	bl	8005010 <__ssprint_r>
 80031cc:	2800      	cmp	r0, #0
 80031ce:	f040 828d 	bne.w	80036ec <_svfprintf_r+0xd04>
 80031d2:	ac2c      	add	r4, sp, #176	; 0xb0
 80031d4:	e23a      	b.n	800364c <_svfprintf_r+0xc64>
 80031d6:	9b02      	ldr	r3, [sp, #8]
 80031d8:	2b65      	cmp	r3, #101	; 0x65
 80031da:	f340 81ad 	ble.w	8003538 <_svfprintf_r+0xb50>
 80031de:	2200      	movs	r2, #0
 80031e0:	2300      	movs	r3, #0
 80031e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80031e6:	f7fd fc8b 	bl	8000b00 <__aeabi_dcmpeq>
 80031ea:	2800      	cmp	r0, #0
 80031ec:	d05e      	beq.n	80032ac <_svfprintf_r+0x8c4>
 80031ee:	4b2e      	ldr	r3, [pc, #184]	; (80032a8 <_svfprintf_r+0x8c0>)
 80031f0:	6023      	str	r3, [r4, #0]
 80031f2:	2301      	movs	r3, #1
 80031f4:	6063      	str	r3, [r4, #4]
 80031f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80031f8:	3301      	adds	r3, #1
 80031fa:	9321      	str	r3, [sp, #132]	; 0x84
 80031fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80031fe:	3301      	adds	r3, #1
 8003200:	2b07      	cmp	r3, #7
 8003202:	9320      	str	r3, [sp, #128]	; 0x80
 8003204:	dc01      	bgt.n	800320a <_svfprintf_r+0x822>
 8003206:	3408      	adds	r4, #8
 8003208:	e008      	b.n	800321c <_svfprintf_r+0x834>
 800320a:	aa1f      	add	r2, sp, #124	; 0x7c
 800320c:	4659      	mov	r1, fp
 800320e:	4650      	mov	r0, sl
 8003210:	f001 fefe 	bl	8005010 <__ssprint_r>
 8003214:	2800      	cmp	r0, #0
 8003216:	f040 8269 	bne.w	80036ec <_svfprintf_r+0xd04>
 800321a:	ac2c      	add	r4, sp, #176	; 0xb0
 800321c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800321e:	9a04      	ldr	r2, [sp, #16]
 8003220:	4293      	cmp	r3, r2
 8003222:	db02      	blt.n	800322a <_svfprintf_r+0x842>
 8003224:	07ee      	lsls	r6, r5, #31
 8003226:	f140 8211 	bpl.w	800364c <_svfprintf_r+0xc64>
 800322a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800322c:	6023      	str	r3, [r4, #0]
 800322e:	9b08      	ldr	r3, [sp, #32]
 8003230:	6063      	str	r3, [r4, #4]
 8003232:	9a08      	ldr	r2, [sp, #32]
 8003234:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003236:	4413      	add	r3, r2
 8003238:	9321      	str	r3, [sp, #132]	; 0x84
 800323a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800323c:	3301      	adds	r3, #1
 800323e:	2b07      	cmp	r3, #7
 8003240:	9320      	str	r3, [sp, #128]	; 0x80
 8003242:	dc01      	bgt.n	8003248 <_svfprintf_r+0x860>
 8003244:	3408      	adds	r4, #8
 8003246:	e008      	b.n	800325a <_svfprintf_r+0x872>
 8003248:	aa1f      	add	r2, sp, #124	; 0x7c
 800324a:	4659      	mov	r1, fp
 800324c:	4650      	mov	r0, sl
 800324e:	f001 fedf 	bl	8005010 <__ssprint_r>
 8003252:	2800      	cmp	r0, #0
 8003254:	f040 824a 	bne.w	80036ec <_svfprintf_r+0xd04>
 8003258:	ac2c      	add	r4, sp, #176	; 0xb0
 800325a:	9b04      	ldr	r3, [sp, #16]
 800325c:	1e5e      	subs	r6, r3, #1
 800325e:	2e00      	cmp	r6, #0
 8003260:	f340 81f4 	ble.w	800364c <_svfprintf_r+0xc64>
 8003264:	4f0f      	ldr	r7, [pc, #60]	; (80032a4 <_svfprintf_r+0x8bc>)
 8003266:	f04f 0810 	mov.w	r8, #16
 800326a:	2e10      	cmp	r6, #16
 800326c:	f340 8159 	ble.w	8003522 <_svfprintf_r+0xb3a>
 8003270:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003272:	3310      	adds	r3, #16
 8003274:	9321      	str	r3, [sp, #132]	; 0x84
 8003276:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003278:	3301      	adds	r3, #1
 800327a:	2b07      	cmp	r3, #7
 800327c:	e884 0180 	stmia.w	r4, {r7, r8}
 8003280:	9320      	str	r3, [sp, #128]	; 0x80
 8003282:	dc01      	bgt.n	8003288 <_svfprintf_r+0x8a0>
 8003284:	3408      	adds	r4, #8
 8003286:	e008      	b.n	800329a <_svfprintf_r+0x8b2>
 8003288:	aa1f      	add	r2, sp, #124	; 0x7c
 800328a:	4659      	mov	r1, fp
 800328c:	4650      	mov	r0, sl
 800328e:	f001 febf 	bl	8005010 <__ssprint_r>
 8003292:	2800      	cmp	r0, #0
 8003294:	f040 822a 	bne.w	80036ec <_svfprintf_r+0xd04>
 8003298:	ac2c      	add	r4, sp, #176	; 0xb0
 800329a:	3e10      	subs	r6, #16
 800329c:	e7e5      	b.n	800326a <_svfprintf_r+0x882>
 800329e:	bf00      	nop
 80032a0:	080057bc 	.word	0x080057bc
 80032a4:	08005778 	.word	0x08005778
 80032a8:	080057ba 	.word	0x080057ba
 80032ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	dc7c      	bgt.n	80033ac <_svfprintf_r+0x9c4>
 80032b2:	4b9f      	ldr	r3, [pc, #636]	; (8003530 <_svfprintf_r+0xb48>)
 80032b4:	6023      	str	r3, [r4, #0]
 80032b6:	2301      	movs	r3, #1
 80032b8:	6063      	str	r3, [r4, #4]
 80032ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80032bc:	3301      	adds	r3, #1
 80032be:	9321      	str	r3, [sp, #132]	; 0x84
 80032c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80032c2:	3301      	adds	r3, #1
 80032c4:	2b07      	cmp	r3, #7
 80032c6:	9320      	str	r3, [sp, #128]	; 0x80
 80032c8:	dc01      	bgt.n	80032ce <_svfprintf_r+0x8e6>
 80032ca:	3408      	adds	r4, #8
 80032cc:	e008      	b.n	80032e0 <_svfprintf_r+0x8f8>
 80032ce:	aa1f      	add	r2, sp, #124	; 0x7c
 80032d0:	4659      	mov	r1, fp
 80032d2:	4650      	mov	r0, sl
 80032d4:	f001 fe9c 	bl	8005010 <__ssprint_r>
 80032d8:	2800      	cmp	r0, #0
 80032da:	f040 8207 	bne.w	80036ec <_svfprintf_r+0xd04>
 80032de:	ac2c      	add	r4, sp, #176	; 0xb0
 80032e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80032e2:	b923      	cbnz	r3, 80032ee <_svfprintf_r+0x906>
 80032e4:	9b04      	ldr	r3, [sp, #16]
 80032e6:	b913      	cbnz	r3, 80032ee <_svfprintf_r+0x906>
 80032e8:	07e8      	lsls	r0, r5, #31
 80032ea:	f140 81af 	bpl.w	800364c <_svfprintf_r+0xc64>
 80032ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032f0:	6023      	str	r3, [r4, #0]
 80032f2:	9b08      	ldr	r3, [sp, #32]
 80032f4:	6063      	str	r3, [r4, #4]
 80032f6:	9a08      	ldr	r2, [sp, #32]
 80032f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80032fa:	4413      	add	r3, r2
 80032fc:	9321      	str	r3, [sp, #132]	; 0x84
 80032fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003300:	3301      	adds	r3, #1
 8003302:	2b07      	cmp	r3, #7
 8003304:	9320      	str	r3, [sp, #128]	; 0x80
 8003306:	dc02      	bgt.n	800330e <_svfprintf_r+0x926>
 8003308:	f104 0308 	add.w	r3, r4, #8
 800330c:	e008      	b.n	8003320 <_svfprintf_r+0x938>
 800330e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003310:	4659      	mov	r1, fp
 8003312:	4650      	mov	r0, sl
 8003314:	f001 fe7c 	bl	8005010 <__ssprint_r>
 8003318:	2800      	cmp	r0, #0
 800331a:	f040 81e7 	bne.w	80036ec <_svfprintf_r+0xd04>
 800331e:	ab2c      	add	r3, sp, #176	; 0xb0
 8003320:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8003322:	4276      	negs	r6, r6
 8003324:	2e00      	cmp	r6, #0
 8003326:	dd30      	ble.n	800338a <_svfprintf_r+0x9a2>
 8003328:	4f82      	ldr	r7, [pc, #520]	; (8003534 <_svfprintf_r+0xb4c>)
 800332a:	2410      	movs	r4, #16
 800332c:	2e10      	cmp	r6, #16
 800332e:	dd16      	ble.n	800335e <_svfprintf_r+0x976>
 8003330:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003332:	601f      	str	r7, [r3, #0]
 8003334:	3210      	adds	r2, #16
 8003336:	9221      	str	r2, [sp, #132]	; 0x84
 8003338:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800333a:	605c      	str	r4, [r3, #4]
 800333c:	3201      	adds	r2, #1
 800333e:	2a07      	cmp	r2, #7
 8003340:	9220      	str	r2, [sp, #128]	; 0x80
 8003342:	dc01      	bgt.n	8003348 <_svfprintf_r+0x960>
 8003344:	3308      	adds	r3, #8
 8003346:	e008      	b.n	800335a <_svfprintf_r+0x972>
 8003348:	aa1f      	add	r2, sp, #124	; 0x7c
 800334a:	4659      	mov	r1, fp
 800334c:	4650      	mov	r0, sl
 800334e:	f001 fe5f 	bl	8005010 <__ssprint_r>
 8003352:	2800      	cmp	r0, #0
 8003354:	f040 81ca 	bne.w	80036ec <_svfprintf_r+0xd04>
 8003358:	ab2c      	add	r3, sp, #176	; 0xb0
 800335a:	3e10      	subs	r6, #16
 800335c:	e7e6      	b.n	800332c <_svfprintf_r+0x944>
 800335e:	4a75      	ldr	r2, [pc, #468]	; (8003534 <_svfprintf_r+0xb4c>)
 8003360:	e883 0044 	stmia.w	r3, {r2, r6}
 8003364:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003366:	4416      	add	r6, r2
 8003368:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800336a:	9621      	str	r6, [sp, #132]	; 0x84
 800336c:	3201      	adds	r2, #1
 800336e:	2a07      	cmp	r2, #7
 8003370:	9220      	str	r2, [sp, #128]	; 0x80
 8003372:	dc01      	bgt.n	8003378 <_svfprintf_r+0x990>
 8003374:	3308      	adds	r3, #8
 8003376:	e008      	b.n	800338a <_svfprintf_r+0x9a2>
 8003378:	aa1f      	add	r2, sp, #124	; 0x7c
 800337a:	4659      	mov	r1, fp
 800337c:	4650      	mov	r0, sl
 800337e:	f001 fe47 	bl	8005010 <__ssprint_r>
 8003382:	2800      	cmp	r0, #0
 8003384:	f040 81b2 	bne.w	80036ec <_svfprintf_r+0xd04>
 8003388:	ab2c      	add	r3, sp, #176	; 0xb0
 800338a:	9a04      	ldr	r2, [sp, #16]
 800338c:	605a      	str	r2, [r3, #4]
 800338e:	9904      	ldr	r1, [sp, #16]
 8003390:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003392:	f8c3 8000 	str.w	r8, [r3]
 8003396:	440a      	add	r2, r1
 8003398:	9221      	str	r2, [sp, #132]	; 0x84
 800339a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800339c:	3201      	adds	r2, #1
 800339e:	2a07      	cmp	r2, #7
 80033a0:	9220      	str	r2, [sp, #128]	; 0x80
 80033a2:	f73f af0e 	bgt.w	80031c2 <_svfprintf_r+0x7da>
 80033a6:	f103 0408 	add.w	r4, r3, #8
 80033aa:	e14f      	b.n	800364c <_svfprintf_r+0xc64>
 80033ac:	9b04      	ldr	r3, [sp, #16]
 80033ae:	42bb      	cmp	r3, r7
 80033b0:	bfa8      	it	ge
 80033b2:	463b      	movge	r3, r7
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	461e      	mov	r6, r3
 80033b8:	dd15      	ble.n	80033e6 <_svfprintf_r+0x9fe>
 80033ba:	6063      	str	r3, [r4, #4]
 80033bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80033be:	f8c4 8000 	str.w	r8, [r4]
 80033c2:	4433      	add	r3, r6
 80033c4:	9321      	str	r3, [sp, #132]	; 0x84
 80033c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80033c8:	3301      	adds	r3, #1
 80033ca:	2b07      	cmp	r3, #7
 80033cc:	9320      	str	r3, [sp, #128]	; 0x80
 80033ce:	dc01      	bgt.n	80033d4 <_svfprintf_r+0x9ec>
 80033d0:	3408      	adds	r4, #8
 80033d2:	e008      	b.n	80033e6 <_svfprintf_r+0x9fe>
 80033d4:	aa1f      	add	r2, sp, #124	; 0x7c
 80033d6:	4659      	mov	r1, fp
 80033d8:	4650      	mov	r0, sl
 80033da:	f001 fe19 	bl	8005010 <__ssprint_r>
 80033de:	2800      	cmp	r0, #0
 80033e0:	f040 8184 	bne.w	80036ec <_svfprintf_r+0xd04>
 80033e4:	ac2c      	add	r4, sp, #176	; 0xb0
 80033e6:	2e00      	cmp	r6, #0
 80033e8:	bfac      	ite	ge
 80033ea:	1bbe      	subge	r6, r7, r6
 80033ec:	463e      	movlt	r6, r7
 80033ee:	2e00      	cmp	r6, #0
 80033f0:	dd30      	ble.n	8003454 <_svfprintf_r+0xa6c>
 80033f2:	f04f 0910 	mov.w	r9, #16
 80033f6:	4b4f      	ldr	r3, [pc, #316]	; (8003534 <_svfprintf_r+0xb4c>)
 80033f8:	6023      	str	r3, [r4, #0]
 80033fa:	2e10      	cmp	r6, #16
 80033fc:	dd16      	ble.n	800342c <_svfprintf_r+0xa44>
 80033fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003400:	f8c4 9004 	str.w	r9, [r4, #4]
 8003404:	3310      	adds	r3, #16
 8003406:	9321      	str	r3, [sp, #132]	; 0x84
 8003408:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800340a:	3301      	adds	r3, #1
 800340c:	2b07      	cmp	r3, #7
 800340e:	9320      	str	r3, [sp, #128]	; 0x80
 8003410:	dc01      	bgt.n	8003416 <_svfprintf_r+0xa2e>
 8003412:	3408      	adds	r4, #8
 8003414:	e008      	b.n	8003428 <_svfprintf_r+0xa40>
 8003416:	aa1f      	add	r2, sp, #124	; 0x7c
 8003418:	4659      	mov	r1, fp
 800341a:	4650      	mov	r0, sl
 800341c:	f001 fdf8 	bl	8005010 <__ssprint_r>
 8003420:	2800      	cmp	r0, #0
 8003422:	f040 8163 	bne.w	80036ec <_svfprintf_r+0xd04>
 8003426:	ac2c      	add	r4, sp, #176	; 0xb0
 8003428:	3e10      	subs	r6, #16
 800342a:	e7e4      	b.n	80033f6 <_svfprintf_r+0xa0e>
 800342c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800342e:	6066      	str	r6, [r4, #4]
 8003430:	441e      	add	r6, r3
 8003432:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003434:	9621      	str	r6, [sp, #132]	; 0x84
 8003436:	3301      	adds	r3, #1
 8003438:	2b07      	cmp	r3, #7
 800343a:	9320      	str	r3, [sp, #128]	; 0x80
 800343c:	dc01      	bgt.n	8003442 <_svfprintf_r+0xa5a>
 800343e:	3408      	adds	r4, #8
 8003440:	e008      	b.n	8003454 <_svfprintf_r+0xa6c>
 8003442:	aa1f      	add	r2, sp, #124	; 0x7c
 8003444:	4659      	mov	r1, fp
 8003446:	4650      	mov	r0, sl
 8003448:	f001 fde2 	bl	8005010 <__ssprint_r>
 800344c:	2800      	cmp	r0, #0
 800344e:	f040 814d 	bne.w	80036ec <_svfprintf_r+0xd04>
 8003452:	ac2c      	add	r4, sp, #176	; 0xb0
 8003454:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003456:	9a04      	ldr	r2, [sp, #16]
 8003458:	4293      	cmp	r3, r2
 800345a:	4447      	add	r7, r8
 800345c:	db01      	blt.n	8003462 <_svfprintf_r+0xa7a>
 800345e:	07e9      	lsls	r1, r5, #31
 8003460:	d517      	bpl.n	8003492 <_svfprintf_r+0xaaa>
 8003462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003464:	6023      	str	r3, [r4, #0]
 8003466:	9b08      	ldr	r3, [sp, #32]
 8003468:	6063      	str	r3, [r4, #4]
 800346a:	9a08      	ldr	r2, [sp, #32]
 800346c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800346e:	4413      	add	r3, r2
 8003470:	9321      	str	r3, [sp, #132]	; 0x84
 8003472:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003474:	3301      	adds	r3, #1
 8003476:	2b07      	cmp	r3, #7
 8003478:	9320      	str	r3, [sp, #128]	; 0x80
 800347a:	dc01      	bgt.n	8003480 <_svfprintf_r+0xa98>
 800347c:	3408      	adds	r4, #8
 800347e:	e008      	b.n	8003492 <_svfprintf_r+0xaaa>
 8003480:	aa1f      	add	r2, sp, #124	; 0x7c
 8003482:	4659      	mov	r1, fp
 8003484:	4650      	mov	r0, sl
 8003486:	f001 fdc3 	bl	8005010 <__ssprint_r>
 800348a:	2800      	cmp	r0, #0
 800348c:	f040 812e 	bne.w	80036ec <_svfprintf_r+0xd04>
 8003490:	ac2c      	add	r4, sp, #176	; 0xb0
 8003492:	9b04      	ldr	r3, [sp, #16]
 8003494:	9a04      	ldr	r2, [sp, #16]
 8003496:	eb08 0603 	add.w	r6, r8, r3
 800349a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800349c:	1bf6      	subs	r6, r6, r7
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	429e      	cmp	r6, r3
 80034a2:	bfa8      	it	ge
 80034a4:	461e      	movge	r6, r3
 80034a6:	2e00      	cmp	r6, #0
 80034a8:	dd14      	ble.n	80034d4 <_svfprintf_r+0xaec>
 80034aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80034ac:	6027      	str	r7, [r4, #0]
 80034ae:	4433      	add	r3, r6
 80034b0:	9321      	str	r3, [sp, #132]	; 0x84
 80034b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80034b4:	6066      	str	r6, [r4, #4]
 80034b6:	3301      	adds	r3, #1
 80034b8:	2b07      	cmp	r3, #7
 80034ba:	9320      	str	r3, [sp, #128]	; 0x80
 80034bc:	dc01      	bgt.n	80034c2 <_svfprintf_r+0xada>
 80034be:	3408      	adds	r4, #8
 80034c0:	e008      	b.n	80034d4 <_svfprintf_r+0xaec>
 80034c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80034c4:	4659      	mov	r1, fp
 80034c6:	4650      	mov	r0, sl
 80034c8:	f001 fda2 	bl	8005010 <__ssprint_r>
 80034cc:	2800      	cmp	r0, #0
 80034ce:	f040 810d 	bne.w	80036ec <_svfprintf_r+0xd04>
 80034d2:	ac2c      	add	r4, sp, #176	; 0xb0
 80034d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80034d6:	9a04      	ldr	r2, [sp, #16]
 80034d8:	2e00      	cmp	r6, #0
 80034da:	eba2 0303 	sub.w	r3, r2, r3
 80034de:	bfac      	ite	ge
 80034e0:	1b9e      	subge	r6, r3, r6
 80034e2:	461e      	movlt	r6, r3
 80034e4:	2e00      	cmp	r6, #0
 80034e6:	f340 80b1 	ble.w	800364c <_svfprintf_r+0xc64>
 80034ea:	4f12      	ldr	r7, [pc, #72]	; (8003534 <_svfprintf_r+0xb4c>)
 80034ec:	f04f 0810 	mov.w	r8, #16
 80034f0:	2e10      	cmp	r6, #16
 80034f2:	dd16      	ble.n	8003522 <_svfprintf_r+0xb3a>
 80034f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80034f6:	3310      	adds	r3, #16
 80034f8:	9321      	str	r3, [sp, #132]	; 0x84
 80034fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80034fc:	3301      	adds	r3, #1
 80034fe:	2b07      	cmp	r3, #7
 8003500:	e884 0180 	stmia.w	r4, {r7, r8}
 8003504:	9320      	str	r3, [sp, #128]	; 0x80
 8003506:	dc01      	bgt.n	800350c <_svfprintf_r+0xb24>
 8003508:	3408      	adds	r4, #8
 800350a:	e008      	b.n	800351e <_svfprintf_r+0xb36>
 800350c:	aa1f      	add	r2, sp, #124	; 0x7c
 800350e:	4659      	mov	r1, fp
 8003510:	4650      	mov	r0, sl
 8003512:	f001 fd7d 	bl	8005010 <__ssprint_r>
 8003516:	2800      	cmp	r0, #0
 8003518:	f040 80e8 	bne.w	80036ec <_svfprintf_r+0xd04>
 800351c:	ac2c      	add	r4, sp, #176	; 0xb0
 800351e:	3e10      	subs	r6, #16
 8003520:	e7e6      	b.n	80034f0 <_svfprintf_r+0xb08>
 8003522:	4b04      	ldr	r3, [pc, #16]	; (8003534 <_svfprintf_r+0xb4c>)
 8003524:	e884 0048 	stmia.w	r4, {r3, r6}
 8003528:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800352a:	441e      	add	r6, r3
 800352c:	9621      	str	r6, [sp, #132]	; 0x84
 800352e:	e642      	b.n	80031b6 <_svfprintf_r+0x7ce>
 8003530:	080057ba 	.word	0x080057ba
 8003534:	08005778 	.word	0x08005778
 8003538:	9b04      	ldr	r3, [sp, #16]
 800353a:	2b01      	cmp	r3, #1
 800353c:	dc01      	bgt.n	8003542 <_svfprintf_r+0xb5a>
 800353e:	07ea      	lsls	r2, r5, #31
 8003540:	d573      	bpl.n	800362a <_svfprintf_r+0xc42>
 8003542:	2301      	movs	r3, #1
 8003544:	6063      	str	r3, [r4, #4]
 8003546:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003548:	f8c4 8000 	str.w	r8, [r4]
 800354c:	3301      	adds	r3, #1
 800354e:	9321      	str	r3, [sp, #132]	; 0x84
 8003550:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003552:	3301      	adds	r3, #1
 8003554:	2b07      	cmp	r3, #7
 8003556:	9320      	str	r3, [sp, #128]	; 0x80
 8003558:	dc01      	bgt.n	800355e <_svfprintf_r+0xb76>
 800355a:	3408      	adds	r4, #8
 800355c:	e008      	b.n	8003570 <_svfprintf_r+0xb88>
 800355e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003560:	4659      	mov	r1, fp
 8003562:	4650      	mov	r0, sl
 8003564:	f001 fd54 	bl	8005010 <__ssprint_r>
 8003568:	2800      	cmp	r0, #0
 800356a:	f040 80bf 	bne.w	80036ec <_svfprintf_r+0xd04>
 800356e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003570:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003572:	6023      	str	r3, [r4, #0]
 8003574:	9b08      	ldr	r3, [sp, #32]
 8003576:	6063      	str	r3, [r4, #4]
 8003578:	9a08      	ldr	r2, [sp, #32]
 800357a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800357c:	4413      	add	r3, r2
 800357e:	9321      	str	r3, [sp, #132]	; 0x84
 8003580:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003582:	3301      	adds	r3, #1
 8003584:	2b07      	cmp	r3, #7
 8003586:	9320      	str	r3, [sp, #128]	; 0x80
 8003588:	dc01      	bgt.n	800358e <_svfprintf_r+0xba6>
 800358a:	3408      	adds	r4, #8
 800358c:	e008      	b.n	80035a0 <_svfprintf_r+0xbb8>
 800358e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003590:	4659      	mov	r1, fp
 8003592:	4650      	mov	r0, sl
 8003594:	f001 fd3c 	bl	8005010 <__ssprint_r>
 8003598:	2800      	cmp	r0, #0
 800359a:	f040 80a7 	bne.w	80036ec <_svfprintf_r+0xd04>
 800359e:	ac2c      	add	r4, sp, #176	; 0xb0
 80035a0:	2300      	movs	r3, #0
 80035a2:	2200      	movs	r2, #0
 80035a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80035a8:	f7fd faaa 	bl	8000b00 <__aeabi_dcmpeq>
 80035ac:	9b04      	ldr	r3, [sp, #16]
 80035ae:	1e5e      	subs	r6, r3, #1
 80035b0:	b9b8      	cbnz	r0, 80035e2 <_svfprintf_r+0xbfa>
 80035b2:	f108 0301 	add.w	r3, r8, #1
 80035b6:	e884 0048 	stmia.w	r4, {r3, r6}
 80035ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035bc:	9a04      	ldr	r2, [sp, #16]
 80035be:	3b01      	subs	r3, #1
 80035c0:	4413      	add	r3, r2
 80035c2:	9321      	str	r3, [sp, #132]	; 0x84
 80035c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80035c6:	3301      	adds	r3, #1
 80035c8:	2b07      	cmp	r3, #7
 80035ca:	9320      	str	r3, [sp, #128]	; 0x80
 80035cc:	dd34      	ble.n	8003638 <_svfprintf_r+0xc50>
 80035ce:	aa1f      	add	r2, sp, #124	; 0x7c
 80035d0:	4659      	mov	r1, fp
 80035d2:	4650      	mov	r0, sl
 80035d4:	f001 fd1c 	bl	8005010 <__ssprint_r>
 80035d8:	2800      	cmp	r0, #0
 80035da:	f040 8087 	bne.w	80036ec <_svfprintf_r+0xd04>
 80035de:	ac2c      	add	r4, sp, #176	; 0xb0
 80035e0:	e02b      	b.n	800363a <_svfprintf_r+0xc52>
 80035e2:	2e00      	cmp	r6, #0
 80035e4:	dd29      	ble.n	800363a <_svfprintf_r+0xc52>
 80035e6:	4fa7      	ldr	r7, [pc, #668]	; (8003884 <_svfprintf_r+0xe9c>)
 80035e8:	f04f 0810 	mov.w	r8, #16
 80035ec:	2e10      	cmp	r6, #16
 80035ee:	dd15      	ble.n	800361c <_svfprintf_r+0xc34>
 80035f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035f2:	3310      	adds	r3, #16
 80035f4:	9321      	str	r3, [sp, #132]	; 0x84
 80035f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80035f8:	3301      	adds	r3, #1
 80035fa:	2b07      	cmp	r3, #7
 80035fc:	e884 0180 	stmia.w	r4, {r7, r8}
 8003600:	9320      	str	r3, [sp, #128]	; 0x80
 8003602:	dc01      	bgt.n	8003608 <_svfprintf_r+0xc20>
 8003604:	3408      	adds	r4, #8
 8003606:	e007      	b.n	8003618 <_svfprintf_r+0xc30>
 8003608:	aa1f      	add	r2, sp, #124	; 0x7c
 800360a:	4659      	mov	r1, fp
 800360c:	4650      	mov	r0, sl
 800360e:	f001 fcff 	bl	8005010 <__ssprint_r>
 8003612:	2800      	cmp	r0, #0
 8003614:	d16a      	bne.n	80036ec <_svfprintf_r+0xd04>
 8003616:	ac2c      	add	r4, sp, #176	; 0xb0
 8003618:	3e10      	subs	r6, #16
 800361a:	e7e7      	b.n	80035ec <_svfprintf_r+0xc04>
 800361c:	4b99      	ldr	r3, [pc, #612]	; (8003884 <_svfprintf_r+0xe9c>)
 800361e:	e884 0048 	stmia.w	r4, {r3, r6}
 8003622:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003624:	441e      	add	r6, r3
 8003626:	9621      	str	r6, [sp, #132]	; 0x84
 8003628:	e7cc      	b.n	80035c4 <_svfprintf_r+0xbdc>
 800362a:	2301      	movs	r3, #1
 800362c:	6063      	str	r3, [r4, #4]
 800362e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003630:	f8c4 8000 	str.w	r8, [r4]
 8003634:	3301      	adds	r3, #1
 8003636:	e7c4      	b.n	80035c2 <_svfprintf_r+0xbda>
 8003638:	3408      	adds	r4, #8
 800363a:	ab1b      	add	r3, sp, #108	; 0x6c
 800363c:	6023      	str	r3, [r4, #0]
 800363e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003640:	6063      	str	r3, [r4, #4]
 8003642:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003644:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003646:	4413      	add	r3, r2
 8003648:	e5b4      	b.n	80031b4 <_svfprintf_r+0x7cc>
 800364a:	3408      	adds	r4, #8
 800364c:	076b      	lsls	r3, r5, #29
 800364e:	d40b      	bmi.n	8003668 <_svfprintf_r+0xc80>
 8003650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003652:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003654:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003656:	428a      	cmp	r2, r1
 8003658:	bfac      	ite	ge
 800365a:	189b      	addge	r3, r3, r2
 800365c:	185b      	addlt	r3, r3, r1
 800365e:	930a      	str	r3, [sp, #40]	; 0x28
 8003660:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003662:	2b00      	cmp	r3, #0
 8003664:	d035      	beq.n	80036d2 <_svfprintf_r+0xcea>
 8003666:	e02e      	b.n	80036c6 <_svfprintf_r+0xcde>
 8003668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800366a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800366c:	1a9d      	subs	r5, r3, r2
 800366e:	2d00      	cmp	r5, #0
 8003670:	ddee      	ble.n	8003650 <_svfprintf_r+0xc68>
 8003672:	2610      	movs	r6, #16
 8003674:	4b84      	ldr	r3, [pc, #528]	; (8003888 <_svfprintf_r+0xea0>)
 8003676:	6023      	str	r3, [r4, #0]
 8003678:	2d10      	cmp	r5, #16
 800367a:	dd13      	ble.n	80036a4 <_svfprintf_r+0xcbc>
 800367c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800367e:	6066      	str	r6, [r4, #4]
 8003680:	3310      	adds	r3, #16
 8003682:	9321      	str	r3, [sp, #132]	; 0x84
 8003684:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003686:	3301      	adds	r3, #1
 8003688:	2b07      	cmp	r3, #7
 800368a:	9320      	str	r3, [sp, #128]	; 0x80
 800368c:	dc01      	bgt.n	8003692 <_svfprintf_r+0xcaa>
 800368e:	3408      	adds	r4, #8
 8003690:	e006      	b.n	80036a0 <_svfprintf_r+0xcb8>
 8003692:	aa1f      	add	r2, sp, #124	; 0x7c
 8003694:	4659      	mov	r1, fp
 8003696:	4650      	mov	r0, sl
 8003698:	f001 fcba 	bl	8005010 <__ssprint_r>
 800369c:	bb30      	cbnz	r0, 80036ec <_svfprintf_r+0xd04>
 800369e:	ac2c      	add	r4, sp, #176	; 0xb0
 80036a0:	3d10      	subs	r5, #16
 80036a2:	e7e7      	b.n	8003674 <_svfprintf_r+0xc8c>
 80036a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80036a6:	6065      	str	r5, [r4, #4]
 80036a8:	441d      	add	r5, r3
 80036aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80036ac:	9521      	str	r5, [sp, #132]	; 0x84
 80036ae:	3301      	adds	r3, #1
 80036b0:	2b07      	cmp	r3, #7
 80036b2:	9320      	str	r3, [sp, #128]	; 0x80
 80036b4:	ddcc      	ble.n	8003650 <_svfprintf_r+0xc68>
 80036b6:	aa1f      	add	r2, sp, #124	; 0x7c
 80036b8:	4659      	mov	r1, fp
 80036ba:	4650      	mov	r0, sl
 80036bc:	f001 fca8 	bl	8005010 <__ssprint_r>
 80036c0:	2800      	cmp	r0, #0
 80036c2:	d0c5      	beq.n	8003650 <_svfprintf_r+0xc68>
 80036c4:	e012      	b.n	80036ec <_svfprintf_r+0xd04>
 80036c6:	aa1f      	add	r2, sp, #124	; 0x7c
 80036c8:	4659      	mov	r1, fp
 80036ca:	4650      	mov	r0, sl
 80036cc:	f001 fca0 	bl	8005010 <__ssprint_r>
 80036d0:	b960      	cbnz	r0, 80036ec <_svfprintf_r+0xd04>
 80036d2:	2300      	movs	r3, #0
 80036d4:	9320      	str	r3, [sp, #128]	; 0x80
 80036d6:	9f03      	ldr	r7, [sp, #12]
 80036d8:	ac2c      	add	r4, sp, #176	; 0xb0
 80036da:	f7ff b9bb 	b.w	8002a54 <_svfprintf_r+0x6c>
 80036de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80036e0:	b123      	cbz	r3, 80036ec <_svfprintf_r+0xd04>
 80036e2:	aa1f      	add	r2, sp, #124	; 0x7c
 80036e4:	4659      	mov	r1, fp
 80036e6:	4650      	mov	r0, sl
 80036e8:	f001 fc92 	bl	8005010 <__ssprint_r>
 80036ec:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80036f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80036f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036f6:	bf18      	it	ne
 80036f8:	f04f 33ff 	movne.w	r3, #4294967295
 80036fc:	4618      	mov	r0, r3
 80036fe:	e12e      	b.n	800395e <_svfprintf_r+0xf76>
 8003700:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003704:	4610      	mov	r0, r2
 8003706:	4619      	mov	r1, r3
 8003708:	f7fd fa2c 	bl	8000b64 <__aeabi_dcmpun>
 800370c:	b160      	cbz	r0, 8003728 <_svfprintf_r+0xd40>
 800370e:	4b5f      	ldr	r3, [pc, #380]	; (800388c <_svfprintf_r+0xea4>)
 8003710:	4a5f      	ldr	r2, [pc, #380]	; (8003890 <_svfprintf_r+0xea8>)
 8003712:	9902      	ldr	r1, [sp, #8]
 8003714:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8003718:	2947      	cmp	r1, #71	; 0x47
 800371a:	bfcc      	ite	gt
 800371c:	4690      	movgt	r8, r2
 800371e:	4698      	movle	r8, r3
 8003720:	f04f 0903 	mov.w	r9, #3
 8003724:	2600      	movs	r6, #0
 8003726:	e44e      	b.n	8002fc6 <_svfprintf_r+0x5de>
 8003728:	f1b9 3fff 	cmp.w	r9, #4294967295
 800372c:	d00a      	beq.n	8003744 <_svfprintf_r+0xd5c>
 800372e:	9b02      	ldr	r3, [sp, #8]
 8003730:	f023 0320 	bic.w	r3, r3, #32
 8003734:	2b47      	cmp	r3, #71	; 0x47
 8003736:	d107      	bne.n	8003748 <_svfprintf_r+0xd60>
 8003738:	f1b9 0f00 	cmp.w	r9, #0
 800373c:	bf08      	it	eq
 800373e:	f04f 0901 	moveq.w	r9, #1
 8003742:	e001      	b.n	8003748 <_svfprintf_r+0xd60>
 8003744:	f04f 0906 	mov.w	r9, #6
 8003748:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800374c:	930c      	str	r3, [sp, #48]	; 0x30
 800374e:	9b07      	ldr	r3, [sp, #28]
 8003750:	2b00      	cmp	r3, #0
 8003752:	da07      	bge.n	8003764 <_svfprintf_r+0xd7c>
 8003754:	9b06      	ldr	r3, [sp, #24]
 8003756:	930e      	str	r3, [sp, #56]	; 0x38
 8003758:	9b07      	ldr	r3, [sp, #28]
 800375a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800375e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003760:	232d      	movs	r3, #45	; 0x2d
 8003762:	e004      	b.n	800376e <_svfprintf_r+0xd86>
 8003764:	ed9d 7b06 	vldr	d7, [sp, #24]
 8003768:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800376c:	2300      	movs	r3, #0
 800376e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003770:	9b02      	ldr	r3, [sp, #8]
 8003772:	f023 0720 	bic.w	r7, r3, #32
 8003776:	2f46      	cmp	r7, #70	; 0x46
 8003778:	d004      	beq.n	8003784 <_svfprintf_r+0xd9c>
 800377a:	2f45      	cmp	r7, #69	; 0x45
 800377c:	d105      	bne.n	800378a <_svfprintf_r+0xda2>
 800377e:	f109 0601 	add.w	r6, r9, #1
 8003782:	e003      	b.n	800378c <_svfprintf_r+0xda4>
 8003784:	464e      	mov	r6, r9
 8003786:	2103      	movs	r1, #3
 8003788:	e001      	b.n	800378e <_svfprintf_r+0xda6>
 800378a:	464e      	mov	r6, r9
 800378c:	2102      	movs	r1, #2
 800378e:	ab1d      	add	r3, sp, #116	; 0x74
 8003790:	9301      	str	r3, [sp, #4]
 8003792:	ab1a      	add	r3, sp, #104	; 0x68
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	4632      	mov	r2, r6
 8003798:	ab19      	add	r3, sp, #100	; 0x64
 800379a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800379e:	4650      	mov	r0, sl
 80037a0:	f000 f976 	bl	8003a90 <_dtoa_r>
 80037a4:	2f47      	cmp	r7, #71	; 0x47
 80037a6:	4680      	mov	r8, r0
 80037a8:	d102      	bne.n	80037b0 <_svfprintf_r+0xdc8>
 80037aa:	07eb      	lsls	r3, r5, #31
 80037ac:	f140 80cd 	bpl.w	800394a <_svfprintf_r+0xf62>
 80037b0:	eb08 0306 	add.w	r3, r8, r6
 80037b4:	2f46      	cmp	r7, #70	; 0x46
 80037b6:	9304      	str	r3, [sp, #16]
 80037b8:	d111      	bne.n	80037de <_svfprintf_r+0xdf6>
 80037ba:	f898 3000 	ldrb.w	r3, [r8]
 80037be:	2b30      	cmp	r3, #48	; 0x30
 80037c0:	d109      	bne.n	80037d6 <_svfprintf_r+0xdee>
 80037c2:	2200      	movs	r2, #0
 80037c4:	2300      	movs	r3, #0
 80037c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80037ca:	f7fd f999 	bl	8000b00 <__aeabi_dcmpeq>
 80037ce:	b910      	cbnz	r0, 80037d6 <_svfprintf_r+0xdee>
 80037d0:	f1c6 0601 	rsb	r6, r6, #1
 80037d4:	9619      	str	r6, [sp, #100]	; 0x64
 80037d6:	9a04      	ldr	r2, [sp, #16]
 80037d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80037da:	441a      	add	r2, r3
 80037dc:	9204      	str	r2, [sp, #16]
 80037de:	2200      	movs	r2, #0
 80037e0:	2300      	movs	r3, #0
 80037e2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80037e6:	f7fd f98b 	bl	8000b00 <__aeabi_dcmpeq>
 80037ea:	b908      	cbnz	r0, 80037f0 <_svfprintf_r+0xe08>
 80037ec:	2230      	movs	r2, #48	; 0x30
 80037ee:	e002      	b.n	80037f6 <_svfprintf_r+0xe0e>
 80037f0:	9b04      	ldr	r3, [sp, #16]
 80037f2:	931d      	str	r3, [sp, #116]	; 0x74
 80037f4:	e007      	b.n	8003806 <_svfprintf_r+0xe1e>
 80037f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80037f8:	9904      	ldr	r1, [sp, #16]
 80037fa:	4299      	cmp	r1, r3
 80037fc:	d903      	bls.n	8003806 <_svfprintf_r+0xe1e>
 80037fe:	1c59      	adds	r1, r3, #1
 8003800:	911d      	str	r1, [sp, #116]	; 0x74
 8003802:	701a      	strb	r2, [r3, #0]
 8003804:	e7f7      	b.n	80037f6 <_svfprintf_r+0xe0e>
 8003806:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003808:	2f47      	cmp	r7, #71	; 0x47
 800380a:	ebc8 0303 	rsb	r3, r8, r3
 800380e:	9304      	str	r3, [sp, #16]
 8003810:	d108      	bne.n	8003824 <_svfprintf_r+0xe3c>
 8003812:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003814:	1cdf      	adds	r7, r3, #3
 8003816:	db01      	blt.n	800381c <_svfprintf_r+0xe34>
 8003818:	4599      	cmp	r9, r3
 800381a:	da68      	bge.n	80038ee <_svfprintf_r+0xf06>
 800381c:	9b02      	ldr	r3, [sp, #8]
 800381e:	3b02      	subs	r3, #2
 8003820:	9302      	str	r3, [sp, #8]
 8003822:	e002      	b.n	800382a <_svfprintf_r+0xe42>
 8003824:	9b02      	ldr	r3, [sp, #8]
 8003826:	2b65      	cmp	r3, #101	; 0x65
 8003828:	dc4a      	bgt.n	80038c0 <_svfprintf_r+0xed8>
 800382a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800382c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8003830:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 8003834:	3b01      	subs	r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	9319      	str	r3, [sp, #100]	; 0x64
 800383a:	bfba      	itte	lt
 800383c:	425b      	neglt	r3, r3
 800383e:	222d      	movlt	r2, #45	; 0x2d
 8003840:	222b      	movge	r2, #43	; 0x2b
 8003842:	2b09      	cmp	r3, #9
 8003844:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8003848:	dd24      	ble.n	8003894 <_svfprintf_r+0xeac>
 800384a:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800384e:	200a      	movs	r0, #10
 8003850:	fb93 f1f0 	sdiv	r1, r3, r0
 8003854:	fb00 3311 	mls	r3, r0, r1, r3
 8003858:	3330      	adds	r3, #48	; 0x30
 800385a:	2909      	cmp	r1, #9
 800385c:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8003860:	460b      	mov	r3, r1
 8003862:	dcf5      	bgt.n	8003850 <_svfprintf_r+0xe68>
 8003864:	3330      	adds	r3, #48	; 0x30
 8003866:	f802 3c01 	strb.w	r3, [r2, #-1]
 800386a:	1e51      	subs	r1, r2, #1
 800386c:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8003870:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8003874:	4281      	cmp	r1, r0
 8003876:	461a      	mov	r2, r3
 8003878:	d213      	bcs.n	80038a2 <_svfprintf_r+0xeba>
 800387a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800387e:	f803 2b01 	strb.w	r2, [r3], #1
 8003882:	e7f7      	b.n	8003874 <_svfprintf_r+0xe8c>
 8003884:	08005778 	.word	0x08005778
 8003888:	080057bc 	.word	0x080057bc
 800388c:	08005790 	.word	0x08005790
 8003890:	08005794 	.word	0x08005794
 8003894:	2230      	movs	r2, #48	; 0x30
 8003896:	4413      	add	r3, r2
 8003898:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800389c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80038a0:	aa1c      	add	r2, sp, #112	; 0x70
 80038a2:	ab1b      	add	r3, sp, #108	; 0x6c
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	9a04      	ldr	r2, [sp, #16]
 80038a8:	9310      	str	r3, [sp, #64]	; 0x40
 80038aa:	2a01      	cmp	r2, #1
 80038ac:	eb03 0902 	add.w	r9, r3, r2
 80038b0:	dc02      	bgt.n	80038b8 <_svfprintf_r+0xed0>
 80038b2:	f015 0701 	ands.w	r7, r5, #1
 80038b6:	d032      	beq.n	800391e <_svfprintf_r+0xf36>
 80038b8:	9b08      	ldr	r3, [sp, #32]
 80038ba:	2700      	movs	r7, #0
 80038bc:	4499      	add	r9, r3
 80038be:	e02e      	b.n	800391e <_svfprintf_r+0xf36>
 80038c0:	9b02      	ldr	r3, [sp, #8]
 80038c2:	2b66      	cmp	r3, #102	; 0x66
 80038c4:	d113      	bne.n	80038ee <_svfprintf_r+0xf06>
 80038c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	dd07      	ble.n	80038dc <_svfprintf_r+0xef4>
 80038cc:	f1b9 0f00 	cmp.w	r9, #0
 80038d0:	d101      	bne.n	80038d6 <_svfprintf_r+0xeee>
 80038d2:	07ee      	lsls	r6, r5, #31
 80038d4:	d521      	bpl.n	800391a <_svfprintf_r+0xf32>
 80038d6:	9a08      	ldr	r2, [sp, #32]
 80038d8:	4413      	add	r3, r2
 80038da:	e006      	b.n	80038ea <_svfprintf_r+0xf02>
 80038dc:	f1b9 0f00 	cmp.w	r9, #0
 80038e0:	d101      	bne.n	80038e6 <_svfprintf_r+0xefe>
 80038e2:	07ed      	lsls	r5, r5, #31
 80038e4:	d514      	bpl.n	8003910 <_svfprintf_r+0xf28>
 80038e6:	9b08      	ldr	r3, [sp, #32]
 80038e8:	3301      	adds	r3, #1
 80038ea:	444b      	add	r3, r9
 80038ec:	e015      	b.n	800391a <_svfprintf_r+0xf32>
 80038ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80038f0:	9a04      	ldr	r2, [sp, #16]
 80038f2:	4293      	cmp	r3, r2
 80038f4:	db03      	blt.n	80038fe <_svfprintf_r+0xf16>
 80038f6:	07e8      	lsls	r0, r5, #31
 80038f8:	d50d      	bpl.n	8003916 <_svfprintf_r+0xf2e>
 80038fa:	9a08      	ldr	r2, [sp, #32]
 80038fc:	e006      	b.n	800390c <_svfprintf_r+0xf24>
 80038fe:	9a04      	ldr	r2, [sp, #16]
 8003900:	9908      	ldr	r1, [sp, #32]
 8003902:	2b00      	cmp	r3, #0
 8003904:	440a      	add	r2, r1
 8003906:	dc05      	bgt.n	8003914 <_svfprintf_r+0xf2c>
 8003908:	f1c3 0301 	rsb	r3, r3, #1
 800390c:	4413      	add	r3, r2
 800390e:	e002      	b.n	8003916 <_svfprintf_r+0xf2e>
 8003910:	2301      	movs	r3, #1
 8003912:	e002      	b.n	800391a <_svfprintf_r+0xf32>
 8003914:	4613      	mov	r3, r2
 8003916:	2267      	movs	r2, #103	; 0x67
 8003918:	9202      	str	r2, [sp, #8]
 800391a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800391c:	4699      	mov	r9, r3
 800391e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003920:	b113      	cbz	r3, 8003928 <_svfprintf_r+0xf40>
 8003922:	232d      	movs	r3, #45	; 0x2d
 8003924:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003928:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800392a:	2600      	movs	r6, #0
 800392c:	f7ff bb4c 	b.w	8002fc8 <_svfprintf_r+0x5e0>
 8003930:	2200      	movs	r2, #0
 8003932:	2300      	movs	r3, #0
 8003934:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003938:	f7fd f8ec 	bl	8000b14 <__aeabi_dcmplt>
 800393c:	b110      	cbz	r0, 8003944 <_svfprintf_r+0xf5c>
 800393e:	232d      	movs	r3, #45	; 0x2d
 8003940:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003944:	4b07      	ldr	r3, [pc, #28]	; (8003964 <_svfprintf_r+0xf7c>)
 8003946:	4a08      	ldr	r2, [pc, #32]	; (8003968 <_svfprintf_r+0xf80>)
 8003948:	e6e3      	b.n	8003712 <_svfprintf_r+0xd2a>
 800394a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800394c:	1a1b      	subs	r3, r3, r0
 800394e:	9304      	str	r3, [sp, #16]
 8003950:	e75f      	b.n	8003812 <_svfprintf_r+0xe2a>
 8003952:	ea56 0207 	orrs.w	r2, r6, r7
 8003956:	f47f aaaa 	bne.w	8002eae <_svfprintf_r+0x4c6>
 800395a:	f7ff baaf 	b.w	8002ebc <_svfprintf_r+0x4d4>
 800395e:	b03d      	add	sp, #244	; 0xf4
 8003960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003964:	08005788 	.word	0x08005788
 8003968:	0800578c 	.word	0x0800578c

0800396c <quorem>:
 800396c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003970:	6903      	ldr	r3, [r0, #16]
 8003972:	690c      	ldr	r4, [r1, #16]
 8003974:	429c      	cmp	r4, r3
 8003976:	4680      	mov	r8, r0
 8003978:	f300 8083 	bgt.w	8003a82 <quorem+0x116>
 800397c:	3c01      	subs	r4, #1
 800397e:	f101 0714 	add.w	r7, r1, #20
 8003982:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003986:	f100 0614 	add.w	r6, r0, #20
 800398a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800398e:	eb06 030e 	add.w	r3, r6, lr
 8003992:	9301      	str	r3, [sp, #4]
 8003994:	3501      	adds	r5, #1
 8003996:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800399a:	fbb3 f5f5 	udiv	r5, r3, r5
 800399e:	eb07 090e 	add.w	r9, r7, lr
 80039a2:	2d00      	cmp	r5, #0
 80039a4:	d039      	beq.n	8003a1a <quorem+0xae>
 80039a6:	f04f 0a00 	mov.w	sl, #0
 80039aa:	4638      	mov	r0, r7
 80039ac:	46b4      	mov	ip, r6
 80039ae:	46d3      	mov	fp, sl
 80039b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80039b4:	b293      	uxth	r3, r2
 80039b6:	fb05 a303 	mla	r3, r5, r3, sl
 80039ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80039be:	b29b      	uxth	r3, r3
 80039c0:	ebc3 030b 	rsb	r3, r3, fp
 80039c4:	0c12      	lsrs	r2, r2, #16
 80039c6:	f8bc b000 	ldrh.w	fp, [ip]
 80039ca:	fb05 a202 	mla	r2, r5, r2, sl
 80039ce:	fa13 f38b 	uxtah	r3, r3, fp
 80039d2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80039d6:	fa1f fb82 	uxth.w	fp, r2
 80039da:	f8dc 2000 	ldr.w	r2, [ip]
 80039de:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80039e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80039ec:	4581      	cmp	r9, r0
 80039ee:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80039f2:	f84c 3b04 	str.w	r3, [ip], #4
 80039f6:	d2db      	bcs.n	80039b0 <quorem+0x44>
 80039f8:	f856 300e 	ldr.w	r3, [r6, lr]
 80039fc:	b96b      	cbnz	r3, 8003a1a <quorem+0xae>
 80039fe:	9b01      	ldr	r3, [sp, #4]
 8003a00:	3b04      	subs	r3, #4
 8003a02:	429e      	cmp	r6, r3
 8003a04:	461a      	mov	r2, r3
 8003a06:	d302      	bcc.n	8003a0e <quorem+0xa2>
 8003a08:	f8c8 4010 	str.w	r4, [r8, #16]
 8003a0c:	e005      	b.n	8003a1a <quorem+0xae>
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	3b04      	subs	r3, #4
 8003a12:	2a00      	cmp	r2, #0
 8003a14:	d1f8      	bne.n	8003a08 <quorem+0x9c>
 8003a16:	3c01      	subs	r4, #1
 8003a18:	e7f3      	b.n	8003a02 <quorem+0x96>
 8003a1a:	4640      	mov	r0, r8
 8003a1c:	f001 fa1f 	bl	8004e5e <__mcmp>
 8003a20:	2800      	cmp	r0, #0
 8003a22:	db2c      	blt.n	8003a7e <quorem+0x112>
 8003a24:	3501      	adds	r5, #1
 8003a26:	4630      	mov	r0, r6
 8003a28:	f04f 0e00 	mov.w	lr, #0
 8003a2c:	f857 1b04 	ldr.w	r1, [r7], #4
 8003a30:	f8d0 c000 	ldr.w	ip, [r0]
 8003a34:	b28a      	uxth	r2, r1
 8003a36:	ebc2 030e 	rsb	r3, r2, lr
 8003a3a:	0c09      	lsrs	r1, r1, #16
 8003a3c:	fa13 f38c 	uxtah	r3, r3, ip
 8003a40:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 8003a44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a4e:	45b9      	cmp	r9, r7
 8003a50:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003a54:	f840 3b04 	str.w	r3, [r0], #4
 8003a58:	d2e8      	bcs.n	8003a2c <quorem+0xc0>
 8003a5a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003a5e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003a62:	b962      	cbnz	r2, 8003a7e <quorem+0x112>
 8003a64:	3b04      	subs	r3, #4
 8003a66:	429e      	cmp	r6, r3
 8003a68:	461a      	mov	r2, r3
 8003a6a:	d302      	bcc.n	8003a72 <quorem+0x106>
 8003a6c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003a70:	e005      	b.n	8003a7e <quorem+0x112>
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	3b04      	subs	r3, #4
 8003a76:	2a00      	cmp	r2, #0
 8003a78:	d1f8      	bne.n	8003a6c <quorem+0x100>
 8003a7a:	3c01      	subs	r4, #1
 8003a7c:	e7f3      	b.n	8003a66 <quorem+0xfa>
 8003a7e:	4628      	mov	r0, r5
 8003a80:	e000      	b.n	8003a84 <quorem+0x118>
 8003a82:	2000      	movs	r0, #0
 8003a84:	b003      	add	sp, #12
 8003a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a8a:	0000      	movs	r0, r0
 8003a8c:	0000      	movs	r0, r0
	...

08003a90 <_dtoa_r>:
 8003a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a94:	ec59 8b10 	vmov	r8, r9, d0
 8003a98:	b097      	sub	sp, #92	; 0x5c
 8003a9a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003a9c:	9106      	str	r1, [sp, #24]
 8003a9e:	4682      	mov	sl, r0
 8003aa0:	9209      	str	r2, [sp, #36]	; 0x24
 8003aa2:	9310      	str	r3, [sp, #64]	; 0x40
 8003aa4:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8003aa6:	e9cd 8900 	strd	r8, r9, [sp]
 8003aaa:	b945      	cbnz	r5, 8003abe <_dtoa_r+0x2e>
 8003aac:	2010      	movs	r0, #16
 8003aae:	f000 fd93 	bl	80045d8 <malloc>
 8003ab2:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8003ab6:	6045      	str	r5, [r0, #4]
 8003ab8:	6085      	str	r5, [r0, #8]
 8003aba:	6005      	str	r5, [r0, #0]
 8003abc:	60c5      	str	r5, [r0, #12]
 8003abe:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8003ac2:	6819      	ldr	r1, [r3, #0]
 8003ac4:	b159      	cbz	r1, 8003ade <_dtoa_r+0x4e>
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	604a      	str	r2, [r1, #4]
 8003aca:	2301      	movs	r3, #1
 8003acc:	4093      	lsls	r3, r2
 8003ace:	608b      	str	r3, [r1, #8]
 8003ad0:	4650      	mov	r0, sl
 8003ad2:	f000 ffeb 	bl	8004aac <_Bfree>
 8003ad6:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	9b01      	ldr	r3, [sp, #4]
 8003ae0:	4a9f      	ldr	r2, [pc, #636]	; (8003d60 <_dtoa_r+0x2d0>)
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	bfbf      	itttt	lt
 8003ae6:	2301      	movlt	r3, #1
 8003ae8:	6023      	strlt	r3, [r4, #0]
 8003aea:	9b01      	ldrlt	r3, [sp, #4]
 8003aec:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003af0:	bfb8      	it	lt
 8003af2:	9301      	strlt	r3, [sp, #4]
 8003af4:	9f01      	ldr	r7, [sp, #4]
 8003af6:	bfa4      	itt	ge
 8003af8:	2300      	movge	r3, #0
 8003afa:	6023      	strge	r3, [r4, #0]
 8003afc:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8003b00:	0d1b      	lsrs	r3, r3, #20
 8003b02:	051b      	lsls	r3, r3, #20
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d11d      	bne.n	8003b44 <_dtoa_r+0xb4>
 8003b08:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003b0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	9b00      	ldr	r3, [sp, #0]
 8003b12:	b943      	cbnz	r3, 8003b26 <_dtoa_r+0x96>
 8003b14:	4a93      	ldr	r2, [pc, #588]	; (8003d64 <_dtoa_r+0x2d4>)
 8003b16:	4b94      	ldr	r3, [pc, #592]	; (8003d68 <_dtoa_r+0x2d8>)
 8003b18:	f3c7 0013 	ubfx	r0, r7, #0, #20
 8003b1c:	2800      	cmp	r0, #0
 8003b1e:	bf14      	ite	ne
 8003b20:	4618      	movne	r0, r3
 8003b22:	4610      	moveq	r0, r2
 8003b24:	e000      	b.n	8003b28 <_dtoa_r+0x98>
 8003b26:	4890      	ldr	r0, [pc, #576]	; (8003d68 <_dtoa_r+0x2d8>)
 8003b28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 854a 	beq.w	80045c4 <_dtoa_r+0xb34>
 8003b30:	78c3      	ldrb	r3, [r0, #3]
 8003b32:	b113      	cbz	r3, 8003b3a <_dtoa_r+0xaa>
 8003b34:	f100 0308 	add.w	r3, r0, #8
 8003b38:	e000      	b.n	8003b3c <_dtoa_r+0xac>
 8003b3a:	1cc3      	adds	r3, r0, #3
 8003b3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	f000 bd40 	b.w	80045c4 <_dtoa_r+0xb34>
 8003b44:	e9dd 4500 	ldrd	r4, r5, [sp]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	4629      	mov	r1, r5
 8003b50:	f7fc ffd6 	bl	8000b00 <__aeabi_dcmpeq>
 8003b54:	4680      	mov	r8, r0
 8003b56:	b158      	cbz	r0, 8003b70 <_dtoa_r+0xe0>
 8003b58:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8522 	beq.w	80045aa <_dtoa_r+0xb1a>
 8003b66:	4881      	ldr	r0, [pc, #516]	; (8003d6c <_dtoa_r+0x2dc>)
 8003b68:	6018      	str	r0, [r3, #0]
 8003b6a:	3801      	subs	r0, #1
 8003b6c:	f000 bd2a 	b.w	80045c4 <_dtoa_r+0xb34>
 8003b70:	aa14      	add	r2, sp, #80	; 0x50
 8003b72:	a915      	add	r1, sp, #84	; 0x54
 8003b74:	ec45 4b10 	vmov	d0, r4, r5
 8003b78:	4650      	mov	r0, sl
 8003b7a:	f001 f9eb 	bl	8004f54 <__d2b>
 8003b7e:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003b82:	9002      	str	r0, [sp, #8]
 8003b84:	b15e      	cbz	r6, 8003b9e <_dtoa_r+0x10e>
 8003b86:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8003b8a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003b8e:	4620      	mov	r0, r4
 8003b90:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003b94:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8003b98:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 8003b9c:	e01d      	b.n	8003bda <_dtoa_r+0x14a>
 8003b9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003ba0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8003ba2:	441e      	add	r6, r3
 8003ba4:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	dd0a      	ble.n	8003bc2 <_dtoa_r+0x132>
 8003bac:	9a00      	ldr	r2, [sp, #0]
 8003bae:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8003bb2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003bb6:	fa22 f000 	lsr.w	r0, r2, r0
 8003bba:	fa07 f303 	lsl.w	r3, r7, r3
 8003bbe:	4318      	orrs	r0, r3
 8003bc0:	e004      	b.n	8003bcc <_dtoa_r+0x13c>
 8003bc2:	f1c3 0020 	rsb	r0, r3, #32
 8003bc6:	9b00      	ldr	r3, [sp, #0]
 8003bc8:	fa03 f000 	lsl.w	r0, r3, r0
 8003bcc:	f7fc fcba 	bl	8000544 <__aeabi_ui2d>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003bd6:	3e01      	subs	r6, #1
 8003bd8:	9311      	str	r3, [sp, #68]	; 0x44
 8003bda:	2200      	movs	r2, #0
 8003bdc:	4b64      	ldr	r3, [pc, #400]	; (8003d70 <_dtoa_r+0x2e0>)
 8003bde:	f7fc fb73 	bl	80002c8 <__aeabi_dsub>
 8003be2:	a359      	add	r3, pc, #356	; (adr r3, 8003d48 <_dtoa_r+0x2b8>)
 8003be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be8:	f7fc fd22 	bl	8000630 <__aeabi_dmul>
 8003bec:	a358      	add	r3, pc, #352	; (adr r3, 8003d50 <_dtoa_r+0x2c0>)
 8003bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf2:	f7fc fb6b 	bl	80002cc <__adddf3>
 8003bf6:	4604      	mov	r4, r0
 8003bf8:	4630      	mov	r0, r6
 8003bfa:	460d      	mov	r5, r1
 8003bfc:	f7fc fcb2 	bl	8000564 <__aeabi_i2d>
 8003c00:	a355      	add	r3, pc, #340	; (adr r3, 8003d58 <_dtoa_r+0x2c8>)
 8003c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c06:	f7fc fd13 	bl	8000630 <__aeabi_dmul>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4620      	mov	r0, r4
 8003c10:	4629      	mov	r1, r5
 8003c12:	f7fc fb5b 	bl	80002cc <__adddf3>
 8003c16:	4604      	mov	r4, r0
 8003c18:	460d      	mov	r5, r1
 8003c1a:	f7fc ffb9 	bl	8000b90 <__aeabi_d2iz>
 8003c1e:	2200      	movs	r2, #0
 8003c20:	4683      	mov	fp, r0
 8003c22:	2300      	movs	r3, #0
 8003c24:	4620      	mov	r0, r4
 8003c26:	4629      	mov	r1, r5
 8003c28:	f7fc ff74 	bl	8000b14 <__aeabi_dcmplt>
 8003c2c:	b158      	cbz	r0, 8003c46 <_dtoa_r+0x1b6>
 8003c2e:	4658      	mov	r0, fp
 8003c30:	f7fc fc98 	bl	8000564 <__aeabi_i2d>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4620      	mov	r0, r4
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	f7fc ff60 	bl	8000b00 <__aeabi_dcmpeq>
 8003c40:	b908      	cbnz	r0, 8003c46 <_dtoa_r+0x1b6>
 8003c42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003c46:	f1bb 0f16 	cmp.w	fp, #22
 8003c4a:	d80d      	bhi.n	8003c68 <_dtoa_r+0x1d8>
 8003c4c:	4949      	ldr	r1, [pc, #292]	; (8003d74 <_dtoa_r+0x2e4>)
 8003c4e:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8003c52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c5a:	f7fc ff79 	bl	8000b50 <__aeabi_dcmpgt>
 8003c5e:	b130      	cbz	r0, 8003c6e <_dtoa_r+0x1de>
 8003c60:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003c64:	2300      	movs	r3, #0
 8003c66:	e000      	b.n	8003c6a <_dtoa_r+0x1da>
 8003c68:	2301      	movs	r3, #1
 8003c6a:	930d      	str	r3, [sp, #52]	; 0x34
 8003c6c:	e000      	b.n	8003c70 <_dtoa_r+0x1e0>
 8003c6e:	900d      	str	r0, [sp, #52]	; 0x34
 8003c70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003c72:	1b9e      	subs	r6, r3, r6
 8003c74:	1e73      	subs	r3, r6, #1
 8003c76:	9305      	str	r3, [sp, #20]
 8003c78:	bf43      	ittte	mi
 8003c7a:	f1c3 0900 	rsbmi	r9, r3, #0
 8003c7e:	2300      	movmi	r3, #0
 8003c80:	9305      	strmi	r3, [sp, #20]
 8003c82:	f04f 0900 	movpl.w	r9, #0
 8003c86:	f1bb 0f00 	cmp.w	fp, #0
 8003c8a:	db07      	blt.n	8003c9c <_dtoa_r+0x20c>
 8003c8c:	9b05      	ldr	r3, [sp, #20]
 8003c8e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003c92:	445b      	add	r3, fp
 8003c94:	9305      	str	r3, [sp, #20]
 8003c96:	2300      	movs	r3, #0
 8003c98:	9307      	str	r3, [sp, #28]
 8003c9a:	e006      	b.n	8003caa <_dtoa_r+0x21a>
 8003c9c:	f1cb 0300 	rsb	r3, fp, #0
 8003ca0:	9307      	str	r3, [sp, #28]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	ebcb 0909 	rsb	r9, fp, r9
 8003ca8:	930c      	str	r3, [sp, #48]	; 0x30
 8003caa:	9b06      	ldr	r3, [sp, #24]
 8003cac:	2b09      	cmp	r3, #9
 8003cae:	d827      	bhi.n	8003d00 <_dtoa_r+0x270>
 8003cb0:	2b05      	cmp	r3, #5
 8003cb2:	bfc4      	itt	gt
 8003cb4:	3b04      	subgt	r3, #4
 8003cb6:	9306      	strgt	r3, [sp, #24]
 8003cb8:	9b06      	ldr	r3, [sp, #24]
 8003cba:	f1a3 0302 	sub.w	r3, r3, #2
 8003cbe:	bfcc      	ite	gt
 8003cc0:	2500      	movgt	r5, #0
 8003cc2:	2501      	movle	r5, #1
 8003cc4:	2b03      	cmp	r3, #3
 8003cc6:	d820      	bhi.n	8003d0a <_dtoa_r+0x27a>
 8003cc8:	e8df f003 	tbb	[pc, r3]
 8003ccc:	04020e06 	.word	0x04020e06
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e002      	b.n	8003cda <_dtoa_r+0x24a>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e008      	b.n	8003cea <_dtoa_r+0x25a>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	9308      	str	r3, [sp, #32]
 8003cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	dd1c      	ble.n	8003d1c <_dtoa_r+0x28c>
 8003ce2:	9303      	str	r3, [sp, #12]
 8003ce4:	4698      	mov	r8, r3
 8003ce6:	e01e      	b.n	8003d26 <_dtoa_r+0x296>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	9308      	str	r3, [sp, #32]
 8003cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cee:	445b      	add	r3, fp
 8003cf0:	f103 0801 	add.w	r8, r3, #1
 8003cf4:	9303      	str	r3, [sp, #12]
 8003cf6:	4643      	mov	r3, r8
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	bfb8      	it	lt
 8003cfc:	2301      	movlt	r3, #1
 8003cfe:	e012      	b.n	8003d26 <_dtoa_r+0x296>
 8003d00:	2501      	movs	r5, #1
 8003d02:	2300      	movs	r3, #0
 8003d04:	9306      	str	r3, [sp, #24]
 8003d06:	9508      	str	r5, [sp, #32]
 8003d08:	e001      	b.n	8003d0e <_dtoa_r+0x27e>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	9308      	str	r3, [sp, #32]
 8003d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d12:	9303      	str	r3, [sp, #12]
 8003d14:	4698      	mov	r8, r3
 8003d16:	2200      	movs	r2, #0
 8003d18:	2312      	movs	r3, #18
 8003d1a:	e003      	b.n	8003d24 <_dtoa_r+0x294>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	9303      	str	r3, [sp, #12]
 8003d20:	4698      	mov	r8, r3
 8003d22:	461a      	mov	r2, r3
 8003d24:	9209      	str	r2, [sp, #36]	; 0x24
 8003d26:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	6062      	str	r2, [r4, #4]
 8003d2e:	2104      	movs	r1, #4
 8003d30:	f101 0214 	add.w	r2, r1, #20
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d81f      	bhi.n	8003d78 <_dtoa_r+0x2e8>
 8003d38:	6862      	ldr	r2, [r4, #4]
 8003d3a:	3201      	adds	r2, #1
 8003d3c:	6062      	str	r2, [r4, #4]
 8003d3e:	0049      	lsls	r1, r1, #1
 8003d40:	e7f6      	b.n	8003d30 <_dtoa_r+0x2a0>
 8003d42:	bf00      	nop
 8003d44:	f3af 8000 	nop.w
 8003d48:	636f4361 	.word	0x636f4361
 8003d4c:	3fd287a7 	.word	0x3fd287a7
 8003d50:	8b60c8b3 	.word	0x8b60c8b3
 8003d54:	3fc68a28 	.word	0x3fc68a28
 8003d58:	509f79fb 	.word	0x509f79fb
 8003d5c:	3fd34413 	.word	0x3fd34413
 8003d60:	7ff00000 	.word	0x7ff00000
 8003d64:	080057cc 	.word	0x080057cc
 8003d68:	080057d5 	.word	0x080057d5
 8003d6c:	080057bb 	.word	0x080057bb
 8003d70:	3ff80000 	.word	0x3ff80000
 8003d74:	080057e8 	.word	0x080057e8
 8003d78:	6861      	ldr	r1, [r4, #4]
 8003d7a:	4650      	mov	r0, sl
 8003d7c:	f000 fe61 	bl	8004a42 <_Balloc>
 8003d80:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8003d84:	6020      	str	r0, [r4, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	9304      	str	r3, [sp, #16]
 8003d8a:	f1b8 0f0e 	cmp.w	r8, #14
 8003d8e:	f200 815d 	bhi.w	800404c <_dtoa_r+0x5bc>
 8003d92:	2d00      	cmp	r5, #0
 8003d94:	f000 815a 	beq.w	800404c <_dtoa_r+0x5bc>
 8003d98:	ed9d 7b00 	vldr	d7, [sp]
 8003d9c:	f1bb 0f00 	cmp.w	fp, #0
 8003da0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003da4:	dd31      	ble.n	8003e0a <_dtoa_r+0x37a>
 8003da6:	4aa0      	ldr	r2, [pc, #640]	; (8004028 <_dtoa_r+0x598>)
 8003da8:	f00b 030f 	and.w	r3, fp, #15
 8003dac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003db0:	ed93 7b00 	vldr	d7, [r3]
 8003db4:	ea4f 142b 	mov.w	r4, fp, asr #4
 8003db8:	06e2      	lsls	r2, r4, #27
 8003dba:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003dbe:	d50c      	bpl.n	8003dda <_dtoa_r+0x34a>
 8003dc0:	4b9a      	ldr	r3, [pc, #616]	; (800402c <_dtoa_r+0x59c>)
 8003dc2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003dc6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003dca:	f7fc fd5b 	bl	8000884 <__aeabi_ddiv>
 8003dce:	f004 040f 	and.w	r4, r4, #15
 8003dd2:	e9cd 0100 	strd	r0, r1, [sp]
 8003dd6:	2603      	movs	r6, #3
 8003dd8:	e000      	b.n	8003ddc <_dtoa_r+0x34c>
 8003dda:	2602      	movs	r6, #2
 8003ddc:	4d93      	ldr	r5, [pc, #588]	; (800402c <_dtoa_r+0x59c>)
 8003dde:	b16c      	cbz	r4, 8003dfc <_dtoa_r+0x36c>
 8003de0:	07e3      	lsls	r3, r4, #31
 8003de2:	d508      	bpl.n	8003df6 <_dtoa_r+0x366>
 8003de4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003de8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003dec:	f7fc fc20 	bl	8000630 <__aeabi_dmul>
 8003df0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003df4:	3601      	adds	r6, #1
 8003df6:	1064      	asrs	r4, r4, #1
 8003df8:	3508      	adds	r5, #8
 8003dfa:	e7f0      	b.n	8003dde <_dtoa_r+0x34e>
 8003dfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003e00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e04:	f7fc fd3e 	bl	8000884 <__aeabi_ddiv>
 8003e08:	e020      	b.n	8003e4c <_dtoa_r+0x3bc>
 8003e0a:	f1cb 0400 	rsb	r4, fp, #0
 8003e0e:	b304      	cbz	r4, 8003e52 <_dtoa_r+0x3c2>
 8003e10:	4b85      	ldr	r3, [pc, #532]	; (8004028 <_dtoa_r+0x598>)
 8003e12:	4d86      	ldr	r5, [pc, #536]	; (800402c <_dtoa_r+0x59c>)
 8003e14:	f004 020f 	and.w	r2, r4, #15
 8003e18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e20:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003e24:	f7fc fc04 	bl	8000630 <__aeabi_dmul>
 8003e28:	e9cd 0100 	strd	r0, r1, [sp]
 8003e2c:	1124      	asrs	r4, r4, #4
 8003e2e:	2300      	movs	r3, #0
 8003e30:	2602      	movs	r6, #2
 8003e32:	b154      	cbz	r4, 8003e4a <_dtoa_r+0x3ba>
 8003e34:	07e7      	lsls	r7, r4, #31
 8003e36:	d505      	bpl.n	8003e44 <_dtoa_r+0x3b4>
 8003e38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003e3c:	f7fc fbf8 	bl	8000630 <__aeabi_dmul>
 8003e40:	3601      	adds	r6, #1
 8003e42:	2301      	movs	r3, #1
 8003e44:	1064      	asrs	r4, r4, #1
 8003e46:	3508      	adds	r5, #8
 8003e48:	e7f3      	b.n	8003e32 <_dtoa_r+0x3a2>
 8003e4a:	b11b      	cbz	r3, 8003e54 <_dtoa_r+0x3c4>
 8003e4c:	e9cd 0100 	strd	r0, r1, [sp]
 8003e50:	e000      	b.n	8003e54 <_dtoa_r+0x3c4>
 8003e52:	2602      	movs	r6, #2
 8003e54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e56:	b1eb      	cbz	r3, 8003e94 <_dtoa_r+0x404>
 8003e58:	e9dd 4500 	ldrd	r4, r5, [sp]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	4b74      	ldr	r3, [pc, #464]	; (8004030 <_dtoa_r+0x5a0>)
 8003e60:	4620      	mov	r0, r4
 8003e62:	4629      	mov	r1, r5
 8003e64:	f7fc fe56 	bl	8000b14 <__aeabi_dcmplt>
 8003e68:	b1a0      	cbz	r0, 8003e94 <_dtoa_r+0x404>
 8003e6a:	f1b8 0f00 	cmp.w	r8, #0
 8003e6e:	d011      	beq.n	8003e94 <_dtoa_r+0x404>
 8003e70:	9b03      	ldr	r3, [sp, #12]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f340 80e6 	ble.w	8004044 <_dtoa_r+0x5b4>
 8003e78:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003e7c:	930a      	str	r3, [sp, #40]	; 0x28
 8003e7e:	2200      	movs	r2, #0
 8003e80:	4b6c      	ldr	r3, [pc, #432]	; (8004034 <_dtoa_r+0x5a4>)
 8003e82:	4620      	mov	r0, r4
 8003e84:	4629      	mov	r1, r5
 8003e86:	f7fc fbd3 	bl	8000630 <__aeabi_dmul>
 8003e8a:	3601      	adds	r6, #1
 8003e8c:	e9cd 0100 	strd	r0, r1, [sp]
 8003e90:	9f03      	ldr	r7, [sp, #12]
 8003e92:	e002      	b.n	8003e9a <_dtoa_r+0x40a>
 8003e94:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8003e98:	4647      	mov	r7, r8
 8003e9a:	4630      	mov	r0, r6
 8003e9c:	f7fc fb62 	bl	8000564 <__aeabi_i2d>
 8003ea0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003ea4:	f7fc fbc4 	bl	8000630 <__aeabi_dmul>
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	4b63      	ldr	r3, [pc, #396]	; (8004038 <_dtoa_r+0x5a8>)
 8003eac:	f7fc fa0e 	bl	80002cc <__adddf3>
 8003eb0:	4604      	mov	r4, r0
 8003eb2:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003eb6:	b9cf      	cbnz	r7, 8003eec <_dtoa_r+0x45c>
 8003eb8:	2200      	movs	r2, #0
 8003eba:	4b60      	ldr	r3, [pc, #384]	; (800403c <_dtoa_r+0x5ac>)
 8003ebc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ec0:	f7fc fa02 	bl	80002c8 <__aeabi_dsub>
 8003ec4:	4622      	mov	r2, r4
 8003ec6:	462b      	mov	r3, r5
 8003ec8:	e9cd 0100 	strd	r0, r1, [sp]
 8003ecc:	f7fc fe40 	bl	8000b50 <__aeabi_dcmpgt>
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	f040 8241 	bne.w	8004358 <_dtoa_r+0x8c8>
 8003ed6:	4622      	mov	r2, r4
 8003ed8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003edc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ee0:	f7fc fe18 	bl	8000b14 <__aeabi_dcmplt>
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	f040 822e 	bne.w	8004346 <_dtoa_r+0x8b6>
 8003eea:	e0ab      	b.n	8004044 <_dtoa_r+0x5b4>
 8003eec:	9a08      	ldr	r2, [sp, #32]
 8003eee:	4b4e      	ldr	r3, [pc, #312]	; (8004028 <_dtoa_r+0x598>)
 8003ef0:	1e79      	subs	r1, r7, #1
 8003ef2:	2a00      	cmp	r2, #0
 8003ef4:	d04a      	beq.n	8003f8c <_dtoa_r+0x4fc>
 8003ef6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efe:	2000      	movs	r0, #0
 8003f00:	494f      	ldr	r1, [pc, #316]	; (8004040 <_dtoa_r+0x5b0>)
 8003f02:	f7fc fcbf 	bl	8000884 <__aeabi_ddiv>
 8003f06:	4622      	mov	r2, r4
 8003f08:	462b      	mov	r3, r5
 8003f0a:	f7fc f9dd 	bl	80002c8 <__aeabi_dsub>
 8003f0e:	9c04      	ldr	r4, [sp, #16]
 8003f10:	4605      	mov	r5, r0
 8003f12:	460e      	mov	r6, r1
 8003f14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f18:	f7fc fe3a 	bl	8000b90 <__aeabi_d2iz>
 8003f1c:	9012      	str	r0, [sp, #72]	; 0x48
 8003f1e:	f7fc fb21 	bl	8000564 <__aeabi_i2d>
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f2a:	f7fc f9cd 	bl	80002c8 <__aeabi_dsub>
 8003f2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003f30:	3330      	adds	r3, #48	; 0x30
 8003f32:	f804 3b01 	strb.w	r3, [r4], #1
 8003f36:	462a      	mov	r2, r5
 8003f38:	4633      	mov	r3, r6
 8003f3a:	e9cd 0100 	strd	r0, r1, [sp]
 8003f3e:	f7fc fde9 	bl	8000b14 <__aeabi_dcmplt>
 8003f42:	2800      	cmp	r0, #0
 8003f44:	f040 8321 	bne.w	800458a <_dtoa_r+0xafa>
 8003f48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	4938      	ldr	r1, [pc, #224]	; (8004030 <_dtoa_r+0x5a0>)
 8003f50:	f7fc f9ba 	bl	80002c8 <__aeabi_dsub>
 8003f54:	462a      	mov	r2, r5
 8003f56:	4633      	mov	r3, r6
 8003f58:	f7fc fddc 	bl	8000b14 <__aeabi_dcmplt>
 8003f5c:	2800      	cmp	r0, #0
 8003f5e:	f040 80d2 	bne.w	8004106 <_dtoa_r+0x676>
 8003f62:	9b04      	ldr	r3, [sp, #16]
 8003f64:	1ae3      	subs	r3, r4, r3
 8003f66:	42bb      	cmp	r3, r7
 8003f68:	da6c      	bge.n	8004044 <_dtoa_r+0x5b4>
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	4b31      	ldr	r3, [pc, #196]	; (8004034 <_dtoa_r+0x5a4>)
 8003f6e:	4628      	mov	r0, r5
 8003f70:	4631      	mov	r1, r6
 8003f72:	f7fc fb5d 	bl	8000630 <__aeabi_dmul>
 8003f76:	2200      	movs	r2, #0
 8003f78:	4605      	mov	r5, r0
 8003f7a:	460e      	mov	r6, r1
 8003f7c:	4b2d      	ldr	r3, [pc, #180]	; (8004034 <_dtoa_r+0x5a4>)
 8003f7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f82:	f7fc fb55 	bl	8000630 <__aeabi_dmul>
 8003f86:	e9cd 0100 	strd	r0, r1, [sp]
 8003f8a:	e7c3      	b.n	8003f14 <_dtoa_r+0x484>
 8003f8c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003f90:	4622      	mov	r2, r4
 8003f92:	462b      	mov	r3, r5
 8003f94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f98:	f7fc fb4a 	bl	8000630 <__aeabi_dmul>
 8003f9c:	9b04      	ldr	r3, [sp, #16]
 8003f9e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8003fa2:	19dc      	adds	r4, r3, r7
 8003fa4:	461d      	mov	r5, r3
 8003fa6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003faa:	f7fc fdf1 	bl	8000b90 <__aeabi_d2iz>
 8003fae:	4606      	mov	r6, r0
 8003fb0:	f7fc fad8 	bl	8000564 <__aeabi_i2d>
 8003fb4:	3630      	adds	r6, #48	; 0x30
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003fbe:	f7fc f983 	bl	80002c8 <__aeabi_dsub>
 8003fc2:	f805 6b01 	strb.w	r6, [r5], #1
 8003fc6:	42ac      	cmp	r4, r5
 8003fc8:	e9cd 0100 	strd	r0, r1, [sp]
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	d123      	bne.n	800401a <_dtoa_r+0x58a>
 8003fd2:	4b1b      	ldr	r3, [pc, #108]	; (8004040 <_dtoa_r+0x5b0>)
 8003fd4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8003fd8:	f7fc f978 	bl	80002cc <__adddf3>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003fe4:	f7fc fdb4 	bl	8000b50 <__aeabi_dcmpgt>
 8003fe8:	2800      	cmp	r0, #0
 8003fea:	f040 808c 	bne.w	8004106 <_dtoa_r+0x676>
 8003fee:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	4912      	ldr	r1, [pc, #72]	; (8004040 <_dtoa_r+0x5b0>)
 8003ff6:	f7fc f967 	bl	80002c8 <__aeabi_dsub>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004002:	f7fc fd87 	bl	8000b14 <__aeabi_dcmplt>
 8004006:	b1e8      	cbz	r0, 8004044 <_dtoa_r+0x5b4>
 8004008:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800400c:	2b30      	cmp	r3, #48	; 0x30
 800400e:	f104 32ff 	add.w	r2, r4, #4294967295
 8004012:	f040 82ba 	bne.w	800458a <_dtoa_r+0xafa>
 8004016:	4614      	mov	r4, r2
 8004018:	e7f6      	b.n	8004008 <_dtoa_r+0x578>
 800401a:	4b06      	ldr	r3, [pc, #24]	; (8004034 <_dtoa_r+0x5a4>)
 800401c:	f7fc fb08 	bl	8000630 <__aeabi_dmul>
 8004020:	e9cd 0100 	strd	r0, r1, [sp]
 8004024:	e7bf      	b.n	8003fa6 <_dtoa_r+0x516>
 8004026:	bf00      	nop
 8004028:	080057e8 	.word	0x080057e8
 800402c:	080058b0 	.word	0x080058b0
 8004030:	3ff00000 	.word	0x3ff00000
 8004034:	40240000 	.word	0x40240000
 8004038:	401c0000 	.word	0x401c0000
 800403c:	40140000 	.word	0x40140000
 8004040:	3fe00000 	.word	0x3fe00000
 8004044:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8004048:	e88d 0018 	stmia.w	sp, {r3, r4}
 800404c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800404e:	2b00      	cmp	r3, #0
 8004050:	db7c      	blt.n	800414c <_dtoa_r+0x6bc>
 8004052:	f1bb 0f0e 	cmp.w	fp, #14
 8004056:	dc79      	bgt.n	800414c <_dtoa_r+0x6bc>
 8004058:	4b8f      	ldr	r3, [pc, #572]	; (8004298 <_dtoa_r+0x808>)
 800405a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800405e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004064:	2b00      	cmp	r3, #0
 8004066:	da14      	bge.n	8004092 <_dtoa_r+0x602>
 8004068:	f1b8 0f00 	cmp.w	r8, #0
 800406c:	dc11      	bgt.n	8004092 <_dtoa_r+0x602>
 800406e:	f040 816c 	bne.w	800434a <_dtoa_r+0x8ba>
 8004072:	2200      	movs	r2, #0
 8004074:	4b89      	ldr	r3, [pc, #548]	; (800429c <_dtoa_r+0x80c>)
 8004076:	4630      	mov	r0, r6
 8004078:	4639      	mov	r1, r7
 800407a:	f7fc fad9 	bl	8000630 <__aeabi_dmul>
 800407e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004082:	f7fc fd5b 	bl	8000b3c <__aeabi_dcmpge>
 8004086:	4645      	mov	r5, r8
 8004088:	4646      	mov	r6, r8
 800408a:	2800      	cmp	r0, #0
 800408c:	f040 815f 	bne.w	800434e <_dtoa_r+0x8be>
 8004090:	e166      	b.n	8004360 <_dtoa_r+0x8d0>
 8004092:	9c04      	ldr	r4, [sp, #16]
 8004094:	4632      	mov	r2, r6
 8004096:	463b      	mov	r3, r7
 8004098:	e9dd 0100 	ldrd	r0, r1, [sp]
 800409c:	f7fc fbf2 	bl	8000884 <__aeabi_ddiv>
 80040a0:	f7fc fd76 	bl	8000b90 <__aeabi_d2iz>
 80040a4:	4605      	mov	r5, r0
 80040a6:	f7fc fa5d 	bl	8000564 <__aeabi_i2d>
 80040aa:	4632      	mov	r2, r6
 80040ac:	463b      	mov	r3, r7
 80040ae:	f7fc fabf 	bl	8000630 <__aeabi_dmul>
 80040b2:	460b      	mov	r3, r1
 80040b4:	4602      	mov	r2, r0
 80040b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040ba:	f7fc f905 	bl	80002c8 <__aeabi_dsub>
 80040be:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 80040c2:	f804 eb01 	strb.w	lr, [r4], #1
 80040c6:	9b04      	ldr	r3, [sp, #16]
 80040c8:	ebc3 0e04 	rsb	lr, r3, r4
 80040cc:	45f0      	cmp	r8, lr
 80040ce:	e9cd 0100 	strd	r0, r1, [sp]
 80040d2:	d12e      	bne.n	8004132 <_dtoa_r+0x6a2>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	f7fc f8f8 	bl	80002cc <__adddf3>
 80040dc:	4680      	mov	r8, r0
 80040de:	4689      	mov	r9, r1
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4630      	mov	r0, r6
 80040e6:	4639      	mov	r1, r7
 80040e8:	f7fc fd14 	bl	8000b14 <__aeabi_dcmplt>
 80040ec:	b978      	cbnz	r0, 800410e <_dtoa_r+0x67e>
 80040ee:	4642      	mov	r2, r8
 80040f0:	464b      	mov	r3, r9
 80040f2:	4630      	mov	r0, r6
 80040f4:	4639      	mov	r1, r7
 80040f6:	f7fc fd03 	bl	8000b00 <__aeabi_dcmpeq>
 80040fa:	2800      	cmp	r0, #0
 80040fc:	f000 8247 	beq.w	800458e <_dtoa_r+0xafe>
 8004100:	07e9      	lsls	r1, r5, #31
 8004102:	d404      	bmi.n	800410e <_dtoa_r+0x67e>
 8004104:	e243      	b.n	800458e <_dtoa_r+0xafe>
 8004106:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800410a:	e000      	b.n	800410e <_dtoa_r+0x67e>
 800410c:	461c      	mov	r4, r3
 800410e:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8004112:	2a39      	cmp	r2, #57	; 0x39
 8004114:	f104 33ff 	add.w	r3, r4, #4294967295
 8004118:	d107      	bne.n	800412a <_dtoa_r+0x69a>
 800411a:	9a04      	ldr	r2, [sp, #16]
 800411c:	429a      	cmp	r2, r3
 800411e:	d1f5      	bne.n	800410c <_dtoa_r+0x67c>
 8004120:	9904      	ldr	r1, [sp, #16]
 8004122:	2230      	movs	r2, #48	; 0x30
 8004124:	f10b 0b01 	add.w	fp, fp, #1
 8004128:	700a      	strb	r2, [r1, #0]
 800412a:	781a      	ldrb	r2, [r3, #0]
 800412c:	3201      	adds	r2, #1
 800412e:	701a      	strb	r2, [r3, #0]
 8004130:	e22d      	b.n	800458e <_dtoa_r+0xafe>
 8004132:	2200      	movs	r2, #0
 8004134:	4b5a      	ldr	r3, [pc, #360]	; (80042a0 <_dtoa_r+0x810>)
 8004136:	f7fc fa7b 	bl	8000630 <__aeabi_dmul>
 800413a:	2200      	movs	r2, #0
 800413c:	2300      	movs	r3, #0
 800413e:	e9cd 0100 	strd	r0, r1, [sp]
 8004142:	f7fc fcdd 	bl	8000b00 <__aeabi_dcmpeq>
 8004146:	2800      	cmp	r0, #0
 8004148:	d0a4      	beq.n	8004094 <_dtoa_r+0x604>
 800414a:	e220      	b.n	800458e <_dtoa_r+0xafe>
 800414c:	9a08      	ldr	r2, [sp, #32]
 800414e:	2a00      	cmp	r2, #0
 8004150:	d02d      	beq.n	80041ae <_dtoa_r+0x71e>
 8004152:	9a06      	ldr	r2, [sp, #24]
 8004154:	2a01      	cmp	r2, #1
 8004156:	dc0a      	bgt.n	800416e <_dtoa_r+0x6de>
 8004158:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800415a:	b112      	cbz	r2, 8004162 <_dtoa_r+0x6d2>
 800415c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004160:	e002      	b.n	8004168 <_dtoa_r+0x6d8>
 8004162:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004164:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004168:	9d07      	ldr	r5, [sp, #28]
 800416a:	464c      	mov	r4, r9
 800416c:	e015      	b.n	800419a <_dtoa_r+0x70a>
 800416e:	9b07      	ldr	r3, [sp, #28]
 8004170:	f108 35ff 	add.w	r5, r8, #4294967295
 8004174:	42ab      	cmp	r3, r5
 8004176:	bfbf      	itttt	lt
 8004178:	9b07      	ldrlt	r3, [sp, #28]
 800417a:	9507      	strlt	r5, [sp, #28]
 800417c:	1aea      	sublt	r2, r5, r3
 800417e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8004180:	bfb7      	itett	lt
 8004182:	189b      	addlt	r3, r3, r2
 8004184:	1b5d      	subge	r5, r3, r5
 8004186:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004188:	2500      	movlt	r5, #0
 800418a:	f1b8 0f00 	cmp.w	r8, #0
 800418e:	bfb9      	ittee	lt
 8004190:	ebc8 0409 	rsblt	r4, r8, r9
 8004194:	2300      	movlt	r3, #0
 8004196:	464c      	movge	r4, r9
 8004198:	4643      	movge	r3, r8
 800419a:	9a05      	ldr	r2, [sp, #20]
 800419c:	2101      	movs	r1, #1
 800419e:	441a      	add	r2, r3
 80041a0:	4650      	mov	r0, sl
 80041a2:	4499      	add	r9, r3
 80041a4:	9205      	str	r2, [sp, #20]
 80041a6:	f000 fd20 	bl	8004bea <__i2b>
 80041aa:	4606      	mov	r6, r0
 80041ac:	e002      	b.n	80041b4 <_dtoa_r+0x724>
 80041ae:	9d07      	ldr	r5, [sp, #28]
 80041b0:	9e08      	ldr	r6, [sp, #32]
 80041b2:	464c      	mov	r4, r9
 80041b4:	b15c      	cbz	r4, 80041ce <_dtoa_r+0x73e>
 80041b6:	9b05      	ldr	r3, [sp, #20]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	dd08      	ble.n	80041ce <_dtoa_r+0x73e>
 80041bc:	42a3      	cmp	r3, r4
 80041be:	9a05      	ldr	r2, [sp, #20]
 80041c0:	bfa8      	it	ge
 80041c2:	4623      	movge	r3, r4
 80041c4:	ebc3 0909 	rsb	r9, r3, r9
 80041c8:	1ae4      	subs	r4, r4, r3
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	9305      	str	r3, [sp, #20]
 80041ce:	9b07      	ldr	r3, [sp, #28]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	dd1d      	ble.n	8004210 <_dtoa_r+0x780>
 80041d4:	9b08      	ldr	r3, [sp, #32]
 80041d6:	b1ab      	cbz	r3, 8004204 <_dtoa_r+0x774>
 80041d8:	b185      	cbz	r5, 80041fc <_dtoa_r+0x76c>
 80041da:	4631      	mov	r1, r6
 80041dc:	462a      	mov	r2, r5
 80041de:	4650      	mov	r0, sl
 80041e0:	f000 fd9e 	bl	8004d20 <__pow5mult>
 80041e4:	9a02      	ldr	r2, [sp, #8]
 80041e6:	4601      	mov	r1, r0
 80041e8:	4606      	mov	r6, r0
 80041ea:	4650      	mov	r0, sl
 80041ec:	f000 fd06 	bl	8004bfc <__multiply>
 80041f0:	9902      	ldr	r1, [sp, #8]
 80041f2:	4607      	mov	r7, r0
 80041f4:	4650      	mov	r0, sl
 80041f6:	f000 fc59 	bl	8004aac <_Bfree>
 80041fa:	9702      	str	r7, [sp, #8]
 80041fc:	9b07      	ldr	r3, [sp, #28]
 80041fe:	1b5a      	subs	r2, r3, r5
 8004200:	d006      	beq.n	8004210 <_dtoa_r+0x780>
 8004202:	e000      	b.n	8004206 <_dtoa_r+0x776>
 8004204:	9a07      	ldr	r2, [sp, #28]
 8004206:	9902      	ldr	r1, [sp, #8]
 8004208:	4650      	mov	r0, sl
 800420a:	f000 fd89 	bl	8004d20 <__pow5mult>
 800420e:	9002      	str	r0, [sp, #8]
 8004210:	2101      	movs	r1, #1
 8004212:	4650      	mov	r0, sl
 8004214:	f000 fce9 	bl	8004bea <__i2b>
 8004218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800421a:	4605      	mov	r5, r0
 800421c:	b35b      	cbz	r3, 8004276 <_dtoa_r+0x7e6>
 800421e:	461a      	mov	r2, r3
 8004220:	4601      	mov	r1, r0
 8004222:	4650      	mov	r0, sl
 8004224:	f000 fd7c 	bl	8004d20 <__pow5mult>
 8004228:	9b06      	ldr	r3, [sp, #24]
 800422a:	2b01      	cmp	r3, #1
 800422c:	4605      	mov	r5, r0
 800422e:	dc18      	bgt.n	8004262 <_dtoa_r+0x7d2>
 8004230:	9b00      	ldr	r3, [sp, #0]
 8004232:	b983      	cbnz	r3, 8004256 <_dtoa_r+0x7c6>
 8004234:	9b01      	ldr	r3, [sp, #4]
 8004236:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800423a:	b973      	cbnz	r3, 800425a <_dtoa_r+0x7ca>
 800423c:	9b01      	ldr	r3, [sp, #4]
 800423e:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8004242:	0d3f      	lsrs	r7, r7, #20
 8004244:	053f      	lsls	r7, r7, #20
 8004246:	b14f      	cbz	r7, 800425c <_dtoa_r+0x7cc>
 8004248:	9b05      	ldr	r3, [sp, #20]
 800424a:	3301      	adds	r3, #1
 800424c:	f109 0901 	add.w	r9, r9, #1
 8004250:	9305      	str	r3, [sp, #20]
 8004252:	2701      	movs	r7, #1
 8004254:	e002      	b.n	800425c <_dtoa_r+0x7cc>
 8004256:	2700      	movs	r7, #0
 8004258:	e000      	b.n	800425c <_dtoa_r+0x7cc>
 800425a:	9f00      	ldr	r7, [sp, #0]
 800425c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800425e:	b173      	cbz	r3, 800427e <_dtoa_r+0x7ee>
 8004260:	e000      	b.n	8004264 <_dtoa_r+0x7d4>
 8004262:	2700      	movs	r7, #0
 8004264:	692b      	ldr	r3, [r5, #16]
 8004266:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800426a:	6918      	ldr	r0, [r3, #16]
 800426c:	f000 fc70 	bl	8004b50 <__hi0bits>
 8004270:	f1c0 0020 	rsb	r0, r0, #32
 8004274:	e004      	b.n	8004280 <_dtoa_r+0x7f0>
 8004276:	9b06      	ldr	r3, [sp, #24]
 8004278:	2b01      	cmp	r3, #1
 800427a:	ddd9      	ble.n	8004230 <_dtoa_r+0x7a0>
 800427c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800427e:	2001      	movs	r0, #1
 8004280:	9b05      	ldr	r3, [sp, #20]
 8004282:	4418      	add	r0, r3
 8004284:	f010 001f 	ands.w	r0, r0, #31
 8004288:	d00e      	beq.n	80042a8 <_dtoa_r+0x818>
 800428a:	f1c0 0320 	rsb	r3, r0, #32
 800428e:	2b04      	cmp	r3, #4
 8004290:	dd08      	ble.n	80042a4 <_dtoa_r+0x814>
 8004292:	f1c0 001c 	rsb	r0, r0, #28
 8004296:	e008      	b.n	80042aa <_dtoa_r+0x81a>
 8004298:	080057e8 	.word	0x080057e8
 800429c:	40140000 	.word	0x40140000
 80042a0:	40240000 	.word	0x40240000
 80042a4:	d006      	beq.n	80042b4 <_dtoa_r+0x824>
 80042a6:	4618      	mov	r0, r3
 80042a8:	301c      	adds	r0, #28
 80042aa:	9b05      	ldr	r3, [sp, #20]
 80042ac:	4403      	add	r3, r0
 80042ae:	4481      	add	r9, r0
 80042b0:	4404      	add	r4, r0
 80042b2:	9305      	str	r3, [sp, #20]
 80042b4:	f1b9 0f00 	cmp.w	r9, #0
 80042b8:	dd05      	ble.n	80042c6 <_dtoa_r+0x836>
 80042ba:	464a      	mov	r2, r9
 80042bc:	9902      	ldr	r1, [sp, #8]
 80042be:	4650      	mov	r0, sl
 80042c0:	f000 fd7c 	bl	8004dbc <__lshift>
 80042c4:	9002      	str	r0, [sp, #8]
 80042c6:	9b05      	ldr	r3, [sp, #20]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	dd05      	ble.n	80042d8 <_dtoa_r+0x848>
 80042cc:	4629      	mov	r1, r5
 80042ce:	461a      	mov	r2, r3
 80042d0:	4650      	mov	r0, sl
 80042d2:	f000 fd73 	bl	8004dbc <__lshift>
 80042d6:	4605      	mov	r5, r0
 80042d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042da:	b1eb      	cbz	r3, 8004318 <_dtoa_r+0x888>
 80042dc:	4629      	mov	r1, r5
 80042de:	9802      	ldr	r0, [sp, #8]
 80042e0:	f000 fdbd 	bl	8004e5e <__mcmp>
 80042e4:	2800      	cmp	r0, #0
 80042e6:	da17      	bge.n	8004318 <_dtoa_r+0x888>
 80042e8:	2300      	movs	r3, #0
 80042ea:	220a      	movs	r2, #10
 80042ec:	9902      	ldr	r1, [sp, #8]
 80042ee:	4650      	mov	r0, sl
 80042f0:	f000 fbf3 	bl	8004ada <__multadd>
 80042f4:	9b08      	ldr	r3, [sp, #32]
 80042f6:	9002      	str	r0, [sp, #8]
 80042f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 8158 	beq.w	80045b2 <_dtoa_r+0xb22>
 8004302:	2300      	movs	r3, #0
 8004304:	4631      	mov	r1, r6
 8004306:	220a      	movs	r2, #10
 8004308:	4650      	mov	r0, sl
 800430a:	f000 fbe6 	bl	8004ada <__multadd>
 800430e:	9b03      	ldr	r3, [sp, #12]
 8004310:	2b00      	cmp	r3, #0
 8004312:	4606      	mov	r6, r0
 8004314:	dc37      	bgt.n	8004386 <_dtoa_r+0x8f6>
 8004316:	e033      	b.n	8004380 <_dtoa_r+0x8f0>
 8004318:	f1b8 0f00 	cmp.w	r8, #0
 800431c:	dc2a      	bgt.n	8004374 <_dtoa_r+0x8e4>
 800431e:	9b06      	ldr	r3, [sp, #24]
 8004320:	2b02      	cmp	r3, #2
 8004322:	dd27      	ble.n	8004374 <_dtoa_r+0x8e4>
 8004324:	f8cd 800c 	str.w	r8, [sp, #12]
 8004328:	9b03      	ldr	r3, [sp, #12]
 800432a:	b983      	cbnz	r3, 800434e <_dtoa_r+0x8be>
 800432c:	4629      	mov	r1, r5
 800432e:	2205      	movs	r2, #5
 8004330:	4650      	mov	r0, sl
 8004332:	f000 fbd2 	bl	8004ada <__multadd>
 8004336:	4601      	mov	r1, r0
 8004338:	4605      	mov	r5, r0
 800433a:	9802      	ldr	r0, [sp, #8]
 800433c:	f000 fd8f 	bl	8004e5e <__mcmp>
 8004340:	2800      	cmp	r0, #0
 8004342:	dc0d      	bgt.n	8004360 <_dtoa_r+0x8d0>
 8004344:	e003      	b.n	800434e <_dtoa_r+0x8be>
 8004346:	463d      	mov	r5, r7
 8004348:	e000      	b.n	800434c <_dtoa_r+0x8bc>
 800434a:	2500      	movs	r5, #0
 800434c:	462e      	mov	r6, r5
 800434e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004350:	9c04      	ldr	r4, [sp, #16]
 8004352:	ea6f 0b03 	mvn.w	fp, r3
 8004356:	e00a      	b.n	800436e <_dtoa_r+0x8de>
 8004358:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800435c:	463d      	mov	r5, r7
 800435e:	463e      	mov	r6, r7
 8004360:	9b04      	ldr	r3, [sp, #16]
 8004362:	9a04      	ldr	r2, [sp, #16]
 8004364:	1c5c      	adds	r4, r3, #1
 8004366:	2331      	movs	r3, #49	; 0x31
 8004368:	7013      	strb	r3, [r2, #0]
 800436a:	f10b 0b01 	add.w	fp, fp, #1
 800436e:	46b0      	mov	r8, r6
 8004370:	2600      	movs	r6, #0
 8004372:	e0f7      	b.n	8004564 <_dtoa_r+0xad4>
 8004374:	9b08      	ldr	r3, [sp, #32]
 8004376:	f8cd 800c 	str.w	r8, [sp, #12]
 800437a:	b923      	cbnz	r3, 8004386 <_dtoa_r+0x8f6>
 800437c:	9c04      	ldr	r4, [sp, #16]
 800437e:	e0b1      	b.n	80044e4 <_dtoa_r+0xa54>
 8004380:	9b06      	ldr	r3, [sp, #24]
 8004382:	2b02      	cmp	r3, #2
 8004384:	dcd0      	bgt.n	8004328 <_dtoa_r+0x898>
 8004386:	2c00      	cmp	r4, #0
 8004388:	dd05      	ble.n	8004396 <_dtoa_r+0x906>
 800438a:	4631      	mov	r1, r6
 800438c:	4622      	mov	r2, r4
 800438e:	4650      	mov	r0, sl
 8004390:	f000 fd14 	bl	8004dbc <__lshift>
 8004394:	4606      	mov	r6, r0
 8004396:	b19f      	cbz	r7, 80043c0 <_dtoa_r+0x930>
 8004398:	6871      	ldr	r1, [r6, #4]
 800439a:	4650      	mov	r0, sl
 800439c:	f000 fb51 	bl	8004a42 <_Balloc>
 80043a0:	6932      	ldr	r2, [r6, #16]
 80043a2:	3202      	adds	r2, #2
 80043a4:	4604      	mov	r4, r0
 80043a6:	0092      	lsls	r2, r2, #2
 80043a8:	f106 010c 	add.w	r1, r6, #12
 80043ac:	300c      	adds	r0, #12
 80043ae:	f000 fb3b 	bl	8004a28 <memcpy>
 80043b2:	2201      	movs	r2, #1
 80043b4:	4621      	mov	r1, r4
 80043b6:	4650      	mov	r0, sl
 80043b8:	f000 fd00 	bl	8004dbc <__lshift>
 80043bc:	4680      	mov	r8, r0
 80043be:	e000      	b.n	80043c2 <_dtoa_r+0x932>
 80043c0:	46b0      	mov	r8, r6
 80043c2:	9b00      	ldr	r3, [sp, #0]
 80043c4:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	9305      	str	r3, [sp, #20]
 80043ce:	4629      	mov	r1, r5
 80043d0:	9802      	ldr	r0, [sp, #8]
 80043d2:	f7ff facb 	bl	800396c <quorem>
 80043d6:	4631      	mov	r1, r6
 80043d8:	4604      	mov	r4, r0
 80043da:	f100 0730 	add.w	r7, r0, #48	; 0x30
 80043de:	9802      	ldr	r0, [sp, #8]
 80043e0:	f000 fd3d 	bl	8004e5e <__mcmp>
 80043e4:	4642      	mov	r2, r8
 80043e6:	9000      	str	r0, [sp, #0]
 80043e8:	4629      	mov	r1, r5
 80043ea:	4650      	mov	r0, sl
 80043ec:	f000 fd53 	bl	8004e96 <__mdiff>
 80043f0:	68c3      	ldr	r3, [r0, #12]
 80043f2:	4602      	mov	r2, r0
 80043f4:	b93b      	cbnz	r3, 8004406 <_dtoa_r+0x976>
 80043f6:	4601      	mov	r1, r0
 80043f8:	9007      	str	r0, [sp, #28]
 80043fa:	9802      	ldr	r0, [sp, #8]
 80043fc:	f000 fd2f 	bl	8004e5e <__mcmp>
 8004400:	9a07      	ldr	r2, [sp, #28]
 8004402:	4603      	mov	r3, r0
 8004404:	e000      	b.n	8004408 <_dtoa_r+0x978>
 8004406:	2301      	movs	r3, #1
 8004408:	4611      	mov	r1, r2
 800440a:	4650      	mov	r0, sl
 800440c:	9307      	str	r3, [sp, #28]
 800440e:	f000 fb4d 	bl	8004aac <_Bfree>
 8004412:	9b07      	ldr	r3, [sp, #28]
 8004414:	b94b      	cbnz	r3, 800442a <_dtoa_r+0x99a>
 8004416:	9a06      	ldr	r2, [sp, #24]
 8004418:	b93a      	cbnz	r2, 800442a <_dtoa_r+0x99a>
 800441a:	9a05      	ldr	r2, [sp, #20]
 800441c:	b92a      	cbnz	r2, 800442a <_dtoa_r+0x99a>
 800441e:	2f39      	cmp	r7, #57	; 0x39
 8004420:	d028      	beq.n	8004474 <_dtoa_r+0x9e4>
 8004422:	9b00      	ldr	r3, [sp, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	dc1a      	bgt.n	800445e <_dtoa_r+0x9ce>
 8004428:	e01b      	b.n	8004462 <_dtoa_r+0x9d2>
 800442a:	9a00      	ldr	r2, [sp, #0]
 800442c:	2a00      	cmp	r2, #0
 800442e:	db04      	blt.n	800443a <_dtoa_r+0x9aa>
 8004430:	d11a      	bne.n	8004468 <_dtoa_r+0x9d8>
 8004432:	9a06      	ldr	r2, [sp, #24]
 8004434:	b9c2      	cbnz	r2, 8004468 <_dtoa_r+0x9d8>
 8004436:	9a05      	ldr	r2, [sp, #20]
 8004438:	b9b2      	cbnz	r2, 8004468 <_dtoa_r+0x9d8>
 800443a:	2b00      	cmp	r3, #0
 800443c:	dd11      	ble.n	8004462 <_dtoa_r+0x9d2>
 800443e:	2201      	movs	r2, #1
 8004440:	9902      	ldr	r1, [sp, #8]
 8004442:	4650      	mov	r0, sl
 8004444:	f000 fcba 	bl	8004dbc <__lshift>
 8004448:	4629      	mov	r1, r5
 800444a:	9002      	str	r0, [sp, #8]
 800444c:	f000 fd07 	bl	8004e5e <__mcmp>
 8004450:	2800      	cmp	r0, #0
 8004452:	dc02      	bgt.n	800445a <_dtoa_r+0x9ca>
 8004454:	d105      	bne.n	8004462 <_dtoa_r+0x9d2>
 8004456:	07fa      	lsls	r2, r7, #31
 8004458:	d503      	bpl.n	8004462 <_dtoa_r+0x9d2>
 800445a:	2f39      	cmp	r7, #57	; 0x39
 800445c:	d00a      	beq.n	8004474 <_dtoa_r+0x9e4>
 800445e:	f104 0731 	add.w	r7, r4, #49	; 0x31
 8004462:	f109 0401 	add.w	r4, r9, #1
 8004466:	e00c      	b.n	8004482 <_dtoa_r+0x9f2>
 8004468:	2b00      	cmp	r3, #0
 800446a:	f109 0401 	add.w	r4, r9, #1
 800446e:	dd0b      	ble.n	8004488 <_dtoa_r+0x9f8>
 8004470:	2f39      	cmp	r7, #57	; 0x39
 8004472:	d105      	bne.n	8004480 <_dtoa_r+0x9f0>
 8004474:	2339      	movs	r3, #57	; 0x39
 8004476:	f889 3000 	strb.w	r3, [r9]
 800447a:	f109 0901 	add.w	r9, r9, #1
 800447e:	e054      	b.n	800452a <_dtoa_r+0xa9a>
 8004480:	3701      	adds	r7, #1
 8004482:	f889 7000 	strb.w	r7, [r9]
 8004486:	e06d      	b.n	8004564 <_dtoa_r+0xad4>
 8004488:	9b04      	ldr	r3, [sp, #16]
 800448a:	9a03      	ldr	r2, [sp, #12]
 800448c:	f804 7c01 	strb.w	r7, [r4, #-1]
 8004490:	1ae3      	subs	r3, r4, r3
 8004492:	4293      	cmp	r3, r2
 8004494:	46a1      	mov	r9, r4
 8004496:	d03a      	beq.n	800450e <_dtoa_r+0xa7e>
 8004498:	2300      	movs	r3, #0
 800449a:	220a      	movs	r2, #10
 800449c:	9902      	ldr	r1, [sp, #8]
 800449e:	4650      	mov	r0, sl
 80044a0:	f000 fb1b 	bl	8004ada <__multadd>
 80044a4:	4546      	cmp	r6, r8
 80044a6:	9002      	str	r0, [sp, #8]
 80044a8:	f04f 0300 	mov.w	r3, #0
 80044ac:	f04f 020a 	mov.w	r2, #10
 80044b0:	4631      	mov	r1, r6
 80044b2:	4650      	mov	r0, sl
 80044b4:	d104      	bne.n	80044c0 <_dtoa_r+0xa30>
 80044b6:	f000 fb10 	bl	8004ada <__multadd>
 80044ba:	4606      	mov	r6, r0
 80044bc:	4680      	mov	r8, r0
 80044be:	e786      	b.n	80043ce <_dtoa_r+0x93e>
 80044c0:	f000 fb0b 	bl	8004ada <__multadd>
 80044c4:	4641      	mov	r1, r8
 80044c6:	4606      	mov	r6, r0
 80044c8:	2300      	movs	r3, #0
 80044ca:	220a      	movs	r2, #10
 80044cc:	4650      	mov	r0, sl
 80044ce:	f000 fb04 	bl	8004ada <__multadd>
 80044d2:	4680      	mov	r8, r0
 80044d4:	e77b      	b.n	80043ce <_dtoa_r+0x93e>
 80044d6:	2300      	movs	r3, #0
 80044d8:	220a      	movs	r2, #10
 80044da:	9902      	ldr	r1, [sp, #8]
 80044dc:	4650      	mov	r0, sl
 80044de:	f000 fafc 	bl	8004ada <__multadd>
 80044e2:	9002      	str	r0, [sp, #8]
 80044e4:	4629      	mov	r1, r5
 80044e6:	9802      	ldr	r0, [sp, #8]
 80044e8:	f7ff fa40 	bl	800396c <quorem>
 80044ec:	f100 0730 	add.w	r7, r0, #48	; 0x30
 80044f0:	f804 7b01 	strb.w	r7, [r4], #1
 80044f4:	9b04      	ldr	r3, [sp, #16]
 80044f6:	9a03      	ldr	r2, [sp, #12]
 80044f8:	1ae3      	subs	r3, r4, r3
 80044fa:	4293      	cmp	r3, r2
 80044fc:	dbeb      	blt.n	80044d6 <_dtoa_r+0xa46>
 80044fe:	9b04      	ldr	r3, [sp, #16]
 8004500:	2a01      	cmp	r2, #1
 8004502:	bfac      	ite	ge
 8004504:	189b      	addge	r3, r3, r2
 8004506:	3301      	addlt	r3, #1
 8004508:	46b0      	mov	r8, r6
 800450a:	4699      	mov	r9, r3
 800450c:	2600      	movs	r6, #0
 800450e:	2201      	movs	r2, #1
 8004510:	9902      	ldr	r1, [sp, #8]
 8004512:	4650      	mov	r0, sl
 8004514:	f000 fc52 	bl	8004dbc <__lshift>
 8004518:	4629      	mov	r1, r5
 800451a:	9002      	str	r0, [sp, #8]
 800451c:	f000 fc9f 	bl	8004e5e <__mcmp>
 8004520:	2800      	cmp	r0, #0
 8004522:	dc02      	bgt.n	800452a <_dtoa_r+0xa9a>
 8004524:	d115      	bne.n	8004552 <_dtoa_r+0xac2>
 8004526:	07fb      	lsls	r3, r7, #31
 8004528:	d513      	bpl.n	8004552 <_dtoa_r+0xac2>
 800452a:	464c      	mov	r4, r9
 800452c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8004530:	2b39      	cmp	r3, #57	; 0x39
 8004532:	f104 32ff 	add.w	r2, r4, #4294967295
 8004536:	d109      	bne.n	800454c <_dtoa_r+0xabc>
 8004538:	9b04      	ldr	r3, [sp, #16]
 800453a:	4293      	cmp	r3, r2
 800453c:	d104      	bne.n	8004548 <_dtoa_r+0xab8>
 800453e:	f10b 0b01 	add.w	fp, fp, #1
 8004542:	2331      	movs	r3, #49	; 0x31
 8004544:	9a04      	ldr	r2, [sp, #16]
 8004546:	e002      	b.n	800454e <_dtoa_r+0xabe>
 8004548:	4614      	mov	r4, r2
 800454a:	e7ef      	b.n	800452c <_dtoa_r+0xa9c>
 800454c:	3301      	adds	r3, #1
 800454e:	7013      	strb	r3, [r2, #0]
 8004550:	e008      	b.n	8004564 <_dtoa_r+0xad4>
 8004552:	464c      	mov	r4, r9
 8004554:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8004558:	2b30      	cmp	r3, #48	; 0x30
 800455a:	f104 32ff 	add.w	r2, r4, #4294967295
 800455e:	d101      	bne.n	8004564 <_dtoa_r+0xad4>
 8004560:	4614      	mov	r4, r2
 8004562:	e7f7      	b.n	8004554 <_dtoa_r+0xac4>
 8004564:	4629      	mov	r1, r5
 8004566:	4650      	mov	r0, sl
 8004568:	f000 faa0 	bl	8004aac <_Bfree>
 800456c:	f1b8 0f00 	cmp.w	r8, #0
 8004570:	d00d      	beq.n	800458e <_dtoa_r+0xafe>
 8004572:	b12e      	cbz	r6, 8004580 <_dtoa_r+0xaf0>
 8004574:	4546      	cmp	r6, r8
 8004576:	d003      	beq.n	8004580 <_dtoa_r+0xaf0>
 8004578:	4631      	mov	r1, r6
 800457a:	4650      	mov	r0, sl
 800457c:	f000 fa96 	bl	8004aac <_Bfree>
 8004580:	4641      	mov	r1, r8
 8004582:	4650      	mov	r0, sl
 8004584:	f000 fa92 	bl	8004aac <_Bfree>
 8004588:	e001      	b.n	800458e <_dtoa_r+0xafe>
 800458a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800458e:	9902      	ldr	r1, [sp, #8]
 8004590:	4650      	mov	r0, sl
 8004592:	f000 fa8b 	bl	8004aac <_Bfree>
 8004596:	2300      	movs	r3, #0
 8004598:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800459a:	7023      	strb	r3, [r4, #0]
 800459c:	f10b 0301 	add.w	r3, fp, #1
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045a4:	b11b      	cbz	r3, 80045ae <_dtoa_r+0xb1e>
 80045a6:	601c      	str	r4, [r3, #0]
 80045a8:	e001      	b.n	80045ae <_dtoa_r+0xb1e>
 80045aa:	4808      	ldr	r0, [pc, #32]	; (80045cc <_dtoa_r+0xb3c>)
 80045ac:	e00a      	b.n	80045c4 <_dtoa_r+0xb34>
 80045ae:	9804      	ldr	r0, [sp, #16]
 80045b0:	e008      	b.n	80045c4 <_dtoa_r+0xb34>
 80045b2:	9b03      	ldr	r3, [sp, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f73f aee1 	bgt.w	800437c <_dtoa_r+0x8ec>
 80045ba:	9b06      	ldr	r3, [sp, #24]
 80045bc:	2b02      	cmp	r3, #2
 80045be:	f77f aedd 	ble.w	800437c <_dtoa_r+0x8ec>
 80045c2:	e6b1      	b.n	8004328 <_dtoa_r+0x898>
 80045c4:	b017      	add	sp, #92	; 0x5c
 80045c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ca:	bf00      	nop
 80045cc:	080057ba 	.word	0x080057ba

080045d0 <_localeconv_r>:
 80045d0:	4800      	ldr	r0, [pc, #0]	; (80045d4 <_localeconv_r+0x4>)
 80045d2:	4770      	bx	lr
 80045d4:	200000f8 	.word	0x200000f8

080045d8 <malloc>:
 80045d8:	4b02      	ldr	r3, [pc, #8]	; (80045e4 <malloc+0xc>)
 80045da:	4601      	mov	r1, r0
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	f000 b803 	b.w	80045e8 <_malloc_r>
 80045e2:	bf00      	nop
 80045e4:	200000f4 	.word	0x200000f4

080045e8 <_malloc_r>:
 80045e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ec:	f101 040b 	add.w	r4, r1, #11
 80045f0:	2c16      	cmp	r4, #22
 80045f2:	b085      	sub	sp, #20
 80045f4:	4681      	mov	r9, r0
 80045f6:	d903      	bls.n	8004600 <_malloc_r+0x18>
 80045f8:	f034 0407 	bics.w	r4, r4, #7
 80045fc:	d501      	bpl.n	8004602 <_malloc_r+0x1a>
 80045fe:	e002      	b.n	8004606 <_malloc_r+0x1e>
 8004600:	2410      	movs	r4, #16
 8004602:	428c      	cmp	r4, r1
 8004604:	d203      	bcs.n	800460e <_malloc_r+0x26>
 8004606:	230c      	movs	r3, #12
 8004608:	f8c9 3000 	str.w	r3, [r9]
 800460c:	e1ea      	b.n	80049e4 <_malloc_r+0x3fc>
 800460e:	4648      	mov	r0, r9
 8004610:	f000 fa15 	bl	8004a3e <__malloc_lock>
 8004614:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8004618:	4d9e      	ldr	r5, [pc, #632]	; (8004894 <_malloc_r+0x2ac>)
 800461a:	d217      	bcs.n	800464c <_malloc_r+0x64>
 800461c:	f104 0208 	add.w	r2, r4, #8
 8004620:	442a      	add	r2, r5
 8004622:	f1a2 0108 	sub.w	r1, r2, #8
 8004626:	6856      	ldr	r6, [r2, #4]
 8004628:	428e      	cmp	r6, r1
 800462a:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800462e:	d102      	bne.n	8004636 <_malloc_r+0x4e>
 8004630:	68d6      	ldr	r6, [r2, #12]
 8004632:	42b2      	cmp	r2, r6
 8004634:	d008      	beq.n	8004648 <_malloc_r+0x60>
 8004636:	6873      	ldr	r3, [r6, #4]
 8004638:	68f2      	ldr	r2, [r6, #12]
 800463a:	68b1      	ldr	r1, [r6, #8]
 800463c:	f023 0303 	bic.w	r3, r3, #3
 8004640:	60ca      	str	r2, [r1, #12]
 8004642:	4433      	add	r3, r6
 8004644:	6091      	str	r1, [r2, #8]
 8004646:	e02f      	b.n	80046a8 <_malloc_r+0xc0>
 8004648:	3302      	adds	r3, #2
 800464a:	e03d      	b.n	80046c8 <_malloc_r+0xe0>
 800464c:	0a63      	lsrs	r3, r4, #9
 800464e:	d01a      	beq.n	8004686 <_malloc_r+0x9e>
 8004650:	2b04      	cmp	r3, #4
 8004652:	d802      	bhi.n	800465a <_malloc_r+0x72>
 8004654:	09a3      	lsrs	r3, r4, #6
 8004656:	3338      	adds	r3, #56	; 0x38
 8004658:	e018      	b.n	800468c <_malloc_r+0xa4>
 800465a:	2b14      	cmp	r3, #20
 800465c:	d801      	bhi.n	8004662 <_malloc_r+0x7a>
 800465e:	335b      	adds	r3, #91	; 0x5b
 8004660:	e014      	b.n	800468c <_malloc_r+0xa4>
 8004662:	2b54      	cmp	r3, #84	; 0x54
 8004664:	d802      	bhi.n	800466c <_malloc_r+0x84>
 8004666:	0b23      	lsrs	r3, r4, #12
 8004668:	336e      	adds	r3, #110	; 0x6e
 800466a:	e00f      	b.n	800468c <_malloc_r+0xa4>
 800466c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004670:	d802      	bhi.n	8004678 <_malloc_r+0x90>
 8004672:	0be3      	lsrs	r3, r4, #15
 8004674:	3377      	adds	r3, #119	; 0x77
 8004676:	e009      	b.n	800468c <_malloc_r+0xa4>
 8004678:	f240 5254 	movw	r2, #1364	; 0x554
 800467c:	4293      	cmp	r3, r2
 800467e:	d804      	bhi.n	800468a <_malloc_r+0xa2>
 8004680:	0ca3      	lsrs	r3, r4, #18
 8004682:	337c      	adds	r3, #124	; 0x7c
 8004684:	e002      	b.n	800468c <_malloc_r+0xa4>
 8004686:	233f      	movs	r3, #63	; 0x3f
 8004688:	e000      	b.n	800468c <_malloc_r+0xa4>
 800468a:	237e      	movs	r3, #126	; 0x7e
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004692:	f1a2 0008 	sub.w	r0, r2, #8
 8004696:	6856      	ldr	r6, [r2, #4]
 8004698:	e00c      	b.n	80046b4 <_malloc_r+0xcc>
 800469a:	2900      	cmp	r1, #0
 800469c:	68f1      	ldr	r1, [r6, #12]
 800469e:	db08      	blt.n	80046b2 <_malloc_r+0xca>
 80046a0:	68b3      	ldr	r3, [r6, #8]
 80046a2:	60d9      	str	r1, [r3, #12]
 80046a4:	608b      	str	r3, [r1, #8]
 80046a6:	18b3      	adds	r3, r6, r2
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	f042 0201 	orr.w	r2, r2, #1
 80046ae:	605a      	str	r2, [r3, #4]
 80046b0:	e1a3      	b.n	80049fa <_malloc_r+0x412>
 80046b2:	460e      	mov	r6, r1
 80046b4:	4286      	cmp	r6, r0
 80046b6:	d006      	beq.n	80046c6 <_malloc_r+0xde>
 80046b8:	6872      	ldr	r2, [r6, #4]
 80046ba:	f022 0203 	bic.w	r2, r2, #3
 80046be:	1b11      	subs	r1, r2, r4
 80046c0:	290f      	cmp	r1, #15
 80046c2:	ddea      	ble.n	800469a <_malloc_r+0xb2>
 80046c4:	3b01      	subs	r3, #1
 80046c6:	3301      	adds	r3, #1
 80046c8:	4a72      	ldr	r2, [pc, #456]	; (8004894 <_malloc_r+0x2ac>)
 80046ca:	692e      	ldr	r6, [r5, #16]
 80046cc:	f102 0708 	add.w	r7, r2, #8
 80046d0:	42be      	cmp	r6, r7
 80046d2:	4639      	mov	r1, r7
 80046d4:	d079      	beq.n	80047ca <_malloc_r+0x1e2>
 80046d6:	6870      	ldr	r0, [r6, #4]
 80046d8:	f020 0003 	bic.w	r0, r0, #3
 80046dc:	ebc4 0e00 	rsb	lr, r4, r0
 80046e0:	f1be 0f0f 	cmp.w	lr, #15
 80046e4:	dd0d      	ble.n	8004702 <_malloc_r+0x11a>
 80046e6:	1933      	adds	r3, r6, r4
 80046e8:	f044 0401 	orr.w	r4, r4, #1
 80046ec:	6074      	str	r4, [r6, #4]
 80046ee:	6153      	str	r3, [r2, #20]
 80046f0:	6113      	str	r3, [r2, #16]
 80046f2:	f04e 0201 	orr.w	r2, lr, #1
 80046f6:	60df      	str	r7, [r3, #12]
 80046f8:	609f      	str	r7, [r3, #8]
 80046fa:	605a      	str	r2, [r3, #4]
 80046fc:	f843 e00e 	str.w	lr, [r3, lr]
 8004700:	e17b      	b.n	80049fa <_malloc_r+0x412>
 8004702:	f1be 0f00 	cmp.w	lr, #0
 8004706:	6157      	str	r7, [r2, #20]
 8004708:	6117      	str	r7, [r2, #16]
 800470a:	db05      	blt.n	8004718 <_malloc_r+0x130>
 800470c:	4430      	add	r0, r6
 800470e:	6843      	ldr	r3, [r0, #4]
 8004710:	f043 0301 	orr.w	r3, r3, #1
 8004714:	6043      	str	r3, [r0, #4]
 8004716:	e170      	b.n	80049fa <_malloc_r+0x412>
 8004718:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800471c:	d215      	bcs.n	800474a <_malloc_r+0x162>
 800471e:	08c0      	lsrs	r0, r0, #3
 8004720:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8004724:	2701      	movs	r7, #1
 8004726:	fa07 fe0e 	lsl.w	lr, r7, lr
 800472a:	6857      	ldr	r7, [r2, #4]
 800472c:	3001      	adds	r0, #1
 800472e:	ea4e 0707 	orr.w	r7, lr, r7
 8004732:	6057      	str	r7, [r2, #4]
 8004734:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8004738:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 800473c:	f8c6 e008 	str.w	lr, [r6, #8]
 8004740:	3f08      	subs	r7, #8
 8004742:	60f7      	str	r7, [r6, #12]
 8004744:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8004748:	e03d      	b.n	80047c6 <_malloc_r+0x1de>
 800474a:	0a42      	lsrs	r2, r0, #9
 800474c:	2a04      	cmp	r2, #4
 800474e:	d802      	bhi.n	8004756 <_malloc_r+0x16e>
 8004750:	0982      	lsrs	r2, r0, #6
 8004752:	3238      	adds	r2, #56	; 0x38
 8004754:	e015      	b.n	8004782 <_malloc_r+0x19a>
 8004756:	2a14      	cmp	r2, #20
 8004758:	d801      	bhi.n	800475e <_malloc_r+0x176>
 800475a:	325b      	adds	r2, #91	; 0x5b
 800475c:	e011      	b.n	8004782 <_malloc_r+0x19a>
 800475e:	2a54      	cmp	r2, #84	; 0x54
 8004760:	d802      	bhi.n	8004768 <_malloc_r+0x180>
 8004762:	0b02      	lsrs	r2, r0, #12
 8004764:	326e      	adds	r2, #110	; 0x6e
 8004766:	e00c      	b.n	8004782 <_malloc_r+0x19a>
 8004768:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800476c:	d802      	bhi.n	8004774 <_malloc_r+0x18c>
 800476e:	0bc2      	lsrs	r2, r0, #15
 8004770:	3277      	adds	r2, #119	; 0x77
 8004772:	e006      	b.n	8004782 <_malloc_r+0x19a>
 8004774:	f240 5754 	movw	r7, #1364	; 0x554
 8004778:	42ba      	cmp	r2, r7
 800477a:	bf9a      	itte	ls
 800477c:	0c82      	lsrls	r2, r0, #18
 800477e:	327c      	addls	r2, #124	; 0x7c
 8004780:	227e      	movhi	r2, #126	; 0x7e
 8004782:	1c57      	adds	r7, r2, #1
 8004784:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8004788:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800478c:	f8df c104 	ldr.w	ip, [pc, #260]	; 8004894 <_malloc_r+0x2ac>
 8004790:	45be      	cmp	lr, r7
 8004792:	d10d      	bne.n	80047b0 <_malloc_r+0x1c8>
 8004794:	2001      	movs	r0, #1
 8004796:	1092      	asrs	r2, r2, #2
 8004798:	fa00 f202 	lsl.w	r2, r0, r2
 800479c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80047a0:	4310      	orrs	r0, r2
 80047a2:	f8cc 0004 	str.w	r0, [ip, #4]
 80047a6:	4672      	mov	r2, lr
 80047a8:	e009      	b.n	80047be <_malloc_r+0x1d6>
 80047aa:	68bf      	ldr	r7, [r7, #8]
 80047ac:	45be      	cmp	lr, r7
 80047ae:	d004      	beq.n	80047ba <_malloc_r+0x1d2>
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	f022 0203 	bic.w	r2, r2, #3
 80047b6:	4290      	cmp	r0, r2
 80047b8:	d3f7      	bcc.n	80047aa <_malloc_r+0x1c2>
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	46be      	mov	lr, r7
 80047be:	60f2      	str	r2, [r6, #12]
 80047c0:	f8c6 e008 	str.w	lr, [r6, #8]
 80047c4:	6096      	str	r6, [r2, #8]
 80047c6:	f8ce 600c 	str.w	r6, [lr, #12]
 80047ca:	2001      	movs	r0, #1
 80047cc:	109a      	asrs	r2, r3, #2
 80047ce:	fa00 f202 	lsl.w	r2, r0, r2
 80047d2:	6868      	ldr	r0, [r5, #4]
 80047d4:	4282      	cmp	r2, r0
 80047d6:	d85f      	bhi.n	8004898 <_malloc_r+0x2b0>
 80047d8:	4202      	tst	r2, r0
 80047da:	d106      	bne.n	80047ea <_malloc_r+0x202>
 80047dc:	f023 0303 	bic.w	r3, r3, #3
 80047e0:	0052      	lsls	r2, r2, #1
 80047e2:	4202      	tst	r2, r0
 80047e4:	f103 0304 	add.w	r3, r3, #4
 80047e8:	d0fa      	beq.n	80047e0 <_malloc_r+0x1f8>
 80047ea:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 80047ee:	46c2      	mov	sl, r8
 80047f0:	469c      	mov	ip, r3
 80047f2:	f8da 600c 	ldr.w	r6, [sl, #12]
 80047f6:	4556      	cmp	r6, sl
 80047f8:	d02c      	beq.n	8004854 <_malloc_r+0x26c>
 80047fa:	6870      	ldr	r0, [r6, #4]
 80047fc:	68f7      	ldr	r7, [r6, #12]
 80047fe:	f020 0003 	bic.w	r0, r0, #3
 8004802:	ebc4 0e00 	rsb	lr, r4, r0
 8004806:	f1be 0f0f 	cmp.w	lr, #15
 800480a:	dd11      	ble.n	8004830 <_malloc_r+0x248>
 800480c:	1933      	adds	r3, r6, r4
 800480e:	f044 0401 	orr.w	r4, r4, #1
 8004812:	6074      	str	r4, [r6, #4]
 8004814:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8004818:	60d7      	str	r7, [r2, #12]
 800481a:	60ba      	str	r2, [r7, #8]
 800481c:	f04e 0201 	orr.w	r2, lr, #1
 8004820:	616b      	str	r3, [r5, #20]
 8004822:	612b      	str	r3, [r5, #16]
 8004824:	60d9      	str	r1, [r3, #12]
 8004826:	6099      	str	r1, [r3, #8]
 8004828:	605a      	str	r2, [r3, #4]
 800482a:	f843 e00e 	str.w	lr, [r3, lr]
 800482e:	e00b      	b.n	8004848 <_malloc_r+0x260>
 8004830:	f1be 0f00 	cmp.w	lr, #0
 8004834:	db0c      	blt.n	8004850 <_malloc_r+0x268>
 8004836:	1833      	adds	r3, r6, r0
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	f042 0201 	orr.w	r2, r2, #1
 800483e:	605a      	str	r2, [r3, #4]
 8004840:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8004844:	60df      	str	r7, [r3, #12]
 8004846:	60bb      	str	r3, [r7, #8]
 8004848:	4648      	mov	r0, r9
 800484a:	f000 f8f9 	bl	8004a40 <__malloc_unlock>
 800484e:	e0d8      	b.n	8004a02 <_malloc_r+0x41a>
 8004850:	463e      	mov	r6, r7
 8004852:	e7d0      	b.n	80047f6 <_malloc_r+0x20e>
 8004854:	f10c 0c01 	add.w	ip, ip, #1
 8004858:	f01c 0f03 	tst.w	ip, #3
 800485c:	f10a 0a08 	add.w	sl, sl, #8
 8004860:	d1c7      	bne.n	80047f2 <_malloc_r+0x20a>
 8004862:	0798      	lsls	r0, r3, #30
 8004864:	d104      	bne.n	8004870 <_malloc_r+0x288>
 8004866:	686b      	ldr	r3, [r5, #4]
 8004868:	ea23 0302 	bic.w	r3, r3, r2
 800486c:	606b      	str	r3, [r5, #4]
 800486e:	e005      	b.n	800487c <_malloc_r+0x294>
 8004870:	f858 0908 	ldr.w	r0, [r8], #-8
 8004874:	4580      	cmp	r8, r0
 8004876:	f103 33ff 	add.w	r3, r3, #4294967295
 800487a:	d0f2      	beq.n	8004862 <_malloc_r+0x27a>
 800487c:	6868      	ldr	r0, [r5, #4]
 800487e:	0052      	lsls	r2, r2, #1
 8004880:	4282      	cmp	r2, r0
 8004882:	d809      	bhi.n	8004898 <_malloc_r+0x2b0>
 8004884:	b142      	cbz	r2, 8004898 <_malloc_r+0x2b0>
 8004886:	4663      	mov	r3, ip
 8004888:	4202      	tst	r2, r0
 800488a:	d1ae      	bne.n	80047ea <_malloc_r+0x202>
 800488c:	3304      	adds	r3, #4
 800488e:	0052      	lsls	r2, r2, #1
 8004890:	e7fa      	b.n	8004888 <_malloc_r+0x2a0>
 8004892:	bf00      	nop
 8004894:	20000130 	.word	0x20000130
 8004898:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800489c:	f8db 6004 	ldr.w	r6, [fp, #4]
 80048a0:	f026 0603 	bic.w	r6, r6, #3
 80048a4:	42b4      	cmp	r4, r6
 80048a6:	d803      	bhi.n	80048b0 <_malloc_r+0x2c8>
 80048a8:	1b33      	subs	r3, r6, r4
 80048aa:	2b0f      	cmp	r3, #15
 80048ac:	f300 809c 	bgt.w	80049e8 <_malloc_r+0x400>
 80048b0:	4a56      	ldr	r2, [pc, #344]	; (8004a0c <_malloc_r+0x424>)
 80048b2:	4957      	ldr	r1, [pc, #348]	; (8004a10 <_malloc_r+0x428>)
 80048b4:	6812      	ldr	r2, [r2, #0]
 80048b6:	6808      	ldr	r0, [r1, #0]
 80048b8:	9101      	str	r1, [sp, #4]
 80048ba:	f102 0810 	add.w	r8, r2, #16
 80048be:	4a55      	ldr	r2, [pc, #340]	; (8004a14 <_malloc_r+0x42c>)
 80048c0:	9203      	str	r2, [sp, #12]
 80048c2:	3001      	adds	r0, #1
 80048c4:	bf18      	it	ne
 80048c6:	f102 31ff 	addne.w	r1, r2, #4294967295
 80048ca:	44a0      	add	r8, r4
 80048cc:	bf1e      	ittt	ne
 80048ce:	4488      	addne	r8, r1
 80048d0:	4251      	negne	r1, r2
 80048d2:	ea01 0808 	andne.w	r8, r1, r8
 80048d6:	eb0b 0306 	add.w	r3, fp, r6
 80048da:	4641      	mov	r1, r8
 80048dc:	4648      	mov	r0, r9
 80048de:	9302      	str	r3, [sp, #8]
 80048e0:	f000 fb86 	bl	8004ff0 <_sbrk_r>
 80048e4:	1c42      	adds	r2, r0, #1
 80048e6:	4607      	mov	r7, r0
 80048e8:	d06f      	beq.n	80049ca <_malloc_r+0x3e2>
 80048ea:	9b02      	ldr	r3, [sp, #8]
 80048ec:	9a03      	ldr	r2, [sp, #12]
 80048ee:	4283      	cmp	r3, r0
 80048f0:	d901      	bls.n	80048f6 <_malloc_r+0x30e>
 80048f2:	45ab      	cmp	fp, r5
 80048f4:	d169      	bne.n	80049ca <_malloc_r+0x3e2>
 80048f6:	f8df a128 	ldr.w	sl, [pc, #296]	; 8004a20 <_malloc_r+0x438>
 80048fa:	f8df c128 	ldr.w	ip, [pc, #296]	; 8004a24 <_malloc_r+0x43c>
 80048fe:	f8da 0000 	ldr.w	r0, [sl]
 8004902:	42bb      	cmp	r3, r7
 8004904:	4440      	add	r0, r8
 8004906:	f8ca 0000 	str.w	r0, [sl]
 800490a:	d108      	bne.n	800491e <_malloc_r+0x336>
 800490c:	ea13 0f0c 	tst.w	r3, ip
 8004910:	d105      	bne.n	800491e <_malloc_r+0x336>
 8004912:	68ab      	ldr	r3, [r5, #8]
 8004914:	4446      	add	r6, r8
 8004916:	f046 0601 	orr.w	r6, r6, #1
 800491a:	605e      	str	r6, [r3, #4]
 800491c:	e049      	b.n	80049b2 <_malloc_r+0x3ca>
 800491e:	9901      	ldr	r1, [sp, #4]
 8004920:	f8d1 e000 	ldr.w	lr, [r1]
 8004924:	f1be 3fff 	cmp.w	lr, #4294967295
 8004928:	bf15      	itete	ne
 800492a:	1afb      	subne	r3, r7, r3
 800492c:	4b38      	ldreq	r3, [pc, #224]	; (8004a10 <_malloc_r+0x428>)
 800492e:	181b      	addne	r3, r3, r0
 8004930:	601f      	streq	r7, [r3, #0]
 8004932:	bf18      	it	ne
 8004934:	f8ca 3000 	strne.w	r3, [sl]
 8004938:	f017 0307 	ands.w	r3, r7, #7
 800493c:	bf1c      	itt	ne
 800493e:	f1c3 0308 	rsbne	r3, r3, #8
 8004942:	18ff      	addne	r7, r7, r3
 8004944:	44b8      	add	r8, r7
 8004946:	441a      	add	r2, r3
 8004948:	ea08 080c 	and.w	r8, r8, ip
 800494c:	ebc8 0802 	rsb	r8, r8, r2
 8004950:	4641      	mov	r1, r8
 8004952:	4648      	mov	r0, r9
 8004954:	f000 fb4c 	bl	8004ff0 <_sbrk_r>
 8004958:	1c43      	adds	r3, r0, #1
 800495a:	bf04      	itt	eq
 800495c:	4638      	moveq	r0, r7
 800495e:	f04f 0800 	moveq.w	r8, #0
 8004962:	f8da 3000 	ldr.w	r3, [sl]
 8004966:	60af      	str	r7, [r5, #8]
 8004968:	1bc2      	subs	r2, r0, r7
 800496a:	4442      	add	r2, r8
 800496c:	4443      	add	r3, r8
 800496e:	f042 0201 	orr.w	r2, r2, #1
 8004972:	45ab      	cmp	fp, r5
 8004974:	f8ca 3000 	str.w	r3, [sl]
 8004978:	607a      	str	r2, [r7, #4]
 800497a:	d01a      	beq.n	80049b2 <_malloc_r+0x3ca>
 800497c:	2e0f      	cmp	r6, #15
 800497e:	d802      	bhi.n	8004986 <_malloc_r+0x39e>
 8004980:	2301      	movs	r3, #1
 8004982:	607b      	str	r3, [r7, #4]
 8004984:	e021      	b.n	80049ca <_malloc_r+0x3e2>
 8004986:	f8db 3004 	ldr.w	r3, [fp, #4]
 800498a:	3e0c      	subs	r6, #12
 800498c:	f026 0607 	bic.w	r6, r6, #7
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	4333      	orrs	r3, r6
 8004996:	f8cb 3004 	str.w	r3, [fp, #4]
 800499a:	eb0b 0306 	add.w	r3, fp, r6
 800499e:	2205      	movs	r2, #5
 80049a0:	2e0f      	cmp	r6, #15
 80049a2:	605a      	str	r2, [r3, #4]
 80049a4:	609a      	str	r2, [r3, #8]
 80049a6:	d904      	bls.n	80049b2 <_malloc_r+0x3ca>
 80049a8:	f10b 0108 	add.w	r1, fp, #8
 80049ac:	4648      	mov	r0, r9
 80049ae:	f000 fc31 	bl	8005214 <_free_r>
 80049b2:	4a19      	ldr	r2, [pc, #100]	; (8004a18 <_malloc_r+0x430>)
 80049b4:	f8da 3000 	ldr.w	r3, [sl]
 80049b8:	6811      	ldr	r1, [r2, #0]
 80049ba:	428b      	cmp	r3, r1
 80049bc:	bf88      	it	hi
 80049be:	6013      	strhi	r3, [r2, #0]
 80049c0:	4a16      	ldr	r2, [pc, #88]	; (8004a1c <_malloc_r+0x434>)
 80049c2:	6811      	ldr	r1, [r2, #0]
 80049c4:	428b      	cmp	r3, r1
 80049c6:	bf88      	it	hi
 80049c8:	6013      	strhi	r3, [r2, #0]
 80049ca:	68ab      	ldr	r3, [r5, #8]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	f022 0203 	bic.w	r2, r2, #3
 80049d2:	4294      	cmp	r4, r2
 80049d4:	eba2 0304 	sub.w	r3, r2, r4
 80049d8:	d801      	bhi.n	80049de <_malloc_r+0x3f6>
 80049da:	2b0f      	cmp	r3, #15
 80049dc:	dc04      	bgt.n	80049e8 <_malloc_r+0x400>
 80049de:	4648      	mov	r0, r9
 80049e0:	f000 f82e 	bl	8004a40 <__malloc_unlock>
 80049e4:	2600      	movs	r6, #0
 80049e6:	e00c      	b.n	8004a02 <_malloc_r+0x41a>
 80049e8:	68ae      	ldr	r6, [r5, #8]
 80049ea:	f044 0201 	orr.w	r2, r4, #1
 80049ee:	4434      	add	r4, r6
 80049f0:	f043 0301 	orr.w	r3, r3, #1
 80049f4:	6072      	str	r2, [r6, #4]
 80049f6:	60ac      	str	r4, [r5, #8]
 80049f8:	6063      	str	r3, [r4, #4]
 80049fa:	4648      	mov	r0, r9
 80049fc:	f000 f820 	bl	8004a40 <__malloc_unlock>
 8004a00:	3608      	adds	r6, #8
 8004a02:	4630      	mov	r0, r6
 8004a04:	b005      	add	sp, #20
 8004a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20000608 	.word	0x20000608
 8004a10:	2000053c 	.word	0x2000053c
 8004a14:	00000080 	.word	0x00000080
 8004a18:	20000604 	.word	0x20000604
 8004a1c:	20000600 	.word	0x20000600
 8004a20:	2000060c 	.word	0x2000060c
 8004a24:	0000007f 	.word	0x0000007f

08004a28 <memcpy>:
 8004a28:	b510      	push	{r4, lr}
 8004a2a:	1e43      	subs	r3, r0, #1
 8004a2c:	440a      	add	r2, r1
 8004a2e:	4291      	cmp	r1, r2
 8004a30:	d004      	beq.n	8004a3c <memcpy+0x14>
 8004a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a3a:	e7f8      	b.n	8004a2e <memcpy+0x6>
 8004a3c:	bd10      	pop	{r4, pc}

08004a3e <__malloc_lock>:
 8004a3e:	4770      	bx	lr

08004a40 <__malloc_unlock>:
 8004a40:	4770      	bx	lr

08004a42 <_Balloc>:
 8004a42:	b570      	push	{r4, r5, r6, lr}
 8004a44:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004a46:	4604      	mov	r4, r0
 8004a48:	460e      	mov	r6, r1
 8004a4a:	b93d      	cbnz	r5, 8004a5c <_Balloc+0x1a>
 8004a4c:	2010      	movs	r0, #16
 8004a4e:	f7ff fdc3 	bl	80045d8 <malloc>
 8004a52:	6260      	str	r0, [r4, #36]	; 0x24
 8004a54:	6045      	str	r5, [r0, #4]
 8004a56:	6085      	str	r5, [r0, #8]
 8004a58:	6005      	str	r5, [r0, #0]
 8004a5a:	60c5      	str	r5, [r0, #12]
 8004a5c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004a5e:	68eb      	ldr	r3, [r5, #12]
 8004a60:	b143      	cbz	r3, 8004a74 <_Balloc+0x32>
 8004a62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004a6a:	b178      	cbz	r0, 8004a8c <_Balloc+0x4a>
 8004a6c:	6802      	ldr	r2, [r0, #0]
 8004a6e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004a72:	e017      	b.n	8004aa4 <_Balloc+0x62>
 8004a74:	2221      	movs	r2, #33	; 0x21
 8004a76:	2104      	movs	r1, #4
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f000 fb48 	bl	800510e <_calloc_r>
 8004a7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a80:	60e8      	str	r0, [r5, #12]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1ec      	bne.n	8004a62 <_Balloc+0x20>
 8004a88:	2000      	movs	r0, #0
 8004a8a:	bd70      	pop	{r4, r5, r6, pc}
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	fa01 f506 	lsl.w	r5, r1, r6
 8004a92:	1d6a      	adds	r2, r5, #5
 8004a94:	0092      	lsls	r2, r2, #2
 8004a96:	4620      	mov	r0, r4
 8004a98:	f000 fb39 	bl	800510e <_calloc_r>
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	d0f3      	beq.n	8004a88 <_Balloc+0x46>
 8004aa0:	6046      	str	r6, [r0, #4]
 8004aa2:	6085      	str	r5, [r0, #8]
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	6103      	str	r3, [r0, #16]
 8004aa8:	60c3      	str	r3, [r0, #12]
 8004aaa:	bd70      	pop	{r4, r5, r6, pc}

08004aac <_Bfree>:
 8004aac:	b570      	push	{r4, r5, r6, lr}
 8004aae:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004ab0:	4606      	mov	r6, r0
 8004ab2:	460d      	mov	r5, r1
 8004ab4:	b93c      	cbnz	r4, 8004ac6 <_Bfree+0x1a>
 8004ab6:	2010      	movs	r0, #16
 8004ab8:	f7ff fd8e 	bl	80045d8 <malloc>
 8004abc:	6270      	str	r0, [r6, #36]	; 0x24
 8004abe:	6044      	str	r4, [r0, #4]
 8004ac0:	6084      	str	r4, [r0, #8]
 8004ac2:	6004      	str	r4, [r0, #0]
 8004ac4:	60c4      	str	r4, [r0, #12]
 8004ac6:	b13d      	cbz	r5, 8004ad8 <_Bfree+0x2c>
 8004ac8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004aca:	686a      	ldr	r2, [r5, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ad2:	6029      	str	r1, [r5, #0]
 8004ad4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004ad8:	bd70      	pop	{r4, r5, r6, pc}

08004ada <__multadd>:
 8004ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ade:	690d      	ldr	r5, [r1, #16]
 8004ae0:	461f      	mov	r7, r3
 8004ae2:	4606      	mov	r6, r0
 8004ae4:	460c      	mov	r4, r1
 8004ae6:	f101 0e14 	add.w	lr, r1, #20
 8004aea:	2300      	movs	r3, #0
 8004aec:	f8de 0000 	ldr.w	r0, [lr]
 8004af0:	b281      	uxth	r1, r0
 8004af2:	fb02 7101 	mla	r1, r2, r1, r7
 8004af6:	0c0f      	lsrs	r7, r1, #16
 8004af8:	0c00      	lsrs	r0, r0, #16
 8004afa:	fb02 7000 	mla	r0, r2, r0, r7
 8004afe:	b289      	uxth	r1, r1
 8004b00:	3301      	adds	r3, #1
 8004b02:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004b06:	429d      	cmp	r5, r3
 8004b08:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004b0c:	f84e 1b04 	str.w	r1, [lr], #4
 8004b10:	dcec      	bgt.n	8004aec <__multadd+0x12>
 8004b12:	b1d7      	cbz	r7, 8004b4a <__multadd+0x70>
 8004b14:	68a3      	ldr	r3, [r4, #8]
 8004b16:	429d      	cmp	r5, r3
 8004b18:	db12      	blt.n	8004b40 <__multadd+0x66>
 8004b1a:	6861      	ldr	r1, [r4, #4]
 8004b1c:	4630      	mov	r0, r6
 8004b1e:	3101      	adds	r1, #1
 8004b20:	f7ff ff8f 	bl	8004a42 <_Balloc>
 8004b24:	6922      	ldr	r2, [r4, #16]
 8004b26:	3202      	adds	r2, #2
 8004b28:	f104 010c 	add.w	r1, r4, #12
 8004b2c:	4680      	mov	r8, r0
 8004b2e:	0092      	lsls	r2, r2, #2
 8004b30:	300c      	adds	r0, #12
 8004b32:	f7ff ff79 	bl	8004a28 <memcpy>
 8004b36:	4621      	mov	r1, r4
 8004b38:	4630      	mov	r0, r6
 8004b3a:	f7ff ffb7 	bl	8004aac <_Bfree>
 8004b3e:	4644      	mov	r4, r8
 8004b40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004b44:	3501      	adds	r5, #1
 8004b46:	615f      	str	r7, [r3, #20]
 8004b48:	6125      	str	r5, [r4, #16]
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004b50 <__hi0bits>:
 8004b50:	0c03      	lsrs	r3, r0, #16
 8004b52:	041b      	lsls	r3, r3, #16
 8004b54:	b913      	cbnz	r3, 8004b5c <__hi0bits+0xc>
 8004b56:	0400      	lsls	r0, r0, #16
 8004b58:	2310      	movs	r3, #16
 8004b5a:	e000      	b.n	8004b5e <__hi0bits+0xe>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004b62:	bf04      	itt	eq
 8004b64:	0200      	lsleq	r0, r0, #8
 8004b66:	3308      	addeq	r3, #8
 8004b68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004b6c:	bf04      	itt	eq
 8004b6e:	0100      	lsleq	r0, r0, #4
 8004b70:	3304      	addeq	r3, #4
 8004b72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004b76:	bf04      	itt	eq
 8004b78:	0080      	lsleq	r0, r0, #2
 8004b7a:	3302      	addeq	r3, #2
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	db03      	blt.n	8004b88 <__hi0bits+0x38>
 8004b80:	0042      	lsls	r2, r0, #1
 8004b82:	d503      	bpl.n	8004b8c <__hi0bits+0x3c>
 8004b84:	1c58      	adds	r0, r3, #1
 8004b86:	4770      	bx	lr
 8004b88:	4618      	mov	r0, r3
 8004b8a:	4770      	bx	lr
 8004b8c:	2020      	movs	r0, #32
 8004b8e:	4770      	bx	lr

08004b90 <__lo0bits>:
 8004b90:	6803      	ldr	r3, [r0, #0]
 8004b92:	f013 0207 	ands.w	r2, r3, #7
 8004b96:	d00b      	beq.n	8004bb0 <__lo0bits+0x20>
 8004b98:	07d9      	lsls	r1, r3, #31
 8004b9a:	d422      	bmi.n	8004be2 <__lo0bits+0x52>
 8004b9c:	079a      	lsls	r2, r3, #30
 8004b9e:	bf4b      	itete	mi
 8004ba0:	085b      	lsrmi	r3, r3, #1
 8004ba2:	089b      	lsrpl	r3, r3, #2
 8004ba4:	6003      	strmi	r3, [r0, #0]
 8004ba6:	6003      	strpl	r3, [r0, #0]
 8004ba8:	bf4c      	ite	mi
 8004baa:	2001      	movmi	r0, #1
 8004bac:	2002      	movpl	r0, #2
 8004bae:	4770      	bx	lr
 8004bb0:	b299      	uxth	r1, r3
 8004bb2:	b909      	cbnz	r1, 8004bb8 <__lo0bits+0x28>
 8004bb4:	0c1b      	lsrs	r3, r3, #16
 8004bb6:	2210      	movs	r2, #16
 8004bb8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004bbc:	bf04      	itt	eq
 8004bbe:	0a1b      	lsreq	r3, r3, #8
 8004bc0:	3208      	addeq	r2, #8
 8004bc2:	0719      	lsls	r1, r3, #28
 8004bc4:	bf04      	itt	eq
 8004bc6:	091b      	lsreq	r3, r3, #4
 8004bc8:	3204      	addeq	r2, #4
 8004bca:	0799      	lsls	r1, r3, #30
 8004bcc:	bf04      	itt	eq
 8004bce:	089b      	lsreq	r3, r3, #2
 8004bd0:	3202      	addeq	r2, #2
 8004bd2:	07d9      	lsls	r1, r3, #31
 8004bd4:	d402      	bmi.n	8004bdc <__lo0bits+0x4c>
 8004bd6:	085b      	lsrs	r3, r3, #1
 8004bd8:	d005      	beq.n	8004be6 <__lo0bits+0x56>
 8004bda:	3201      	adds	r2, #1
 8004bdc:	6003      	str	r3, [r0, #0]
 8004bde:	4610      	mov	r0, r2
 8004be0:	4770      	bx	lr
 8004be2:	2000      	movs	r0, #0
 8004be4:	4770      	bx	lr
 8004be6:	2020      	movs	r0, #32
 8004be8:	4770      	bx	lr

08004bea <__i2b>:
 8004bea:	b510      	push	{r4, lr}
 8004bec:	460c      	mov	r4, r1
 8004bee:	2101      	movs	r1, #1
 8004bf0:	f7ff ff27 	bl	8004a42 <_Balloc>
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	6144      	str	r4, [r0, #20]
 8004bf8:	6102      	str	r2, [r0, #16]
 8004bfa:	bd10      	pop	{r4, pc}

08004bfc <__multiply>:
 8004bfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c00:	4614      	mov	r4, r2
 8004c02:	690a      	ldr	r2, [r1, #16]
 8004c04:	6923      	ldr	r3, [r4, #16]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	bfb8      	it	lt
 8004c0a:	460b      	movlt	r3, r1
 8004c0c:	4688      	mov	r8, r1
 8004c0e:	bfbc      	itt	lt
 8004c10:	46a0      	movlt	r8, r4
 8004c12:	461c      	movlt	r4, r3
 8004c14:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004c18:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004c1c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004c20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004c24:	eb07 0609 	add.w	r6, r7, r9
 8004c28:	429e      	cmp	r6, r3
 8004c2a:	bfc8      	it	gt
 8004c2c:	3101      	addgt	r1, #1
 8004c2e:	f7ff ff08 	bl	8004a42 <_Balloc>
 8004c32:	f100 0514 	add.w	r5, r0, #20
 8004c36:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8004c3a:	462b      	mov	r3, r5
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	4563      	cmp	r3, ip
 8004c40:	d202      	bcs.n	8004c48 <__multiply+0x4c>
 8004c42:	f843 2b04 	str.w	r2, [r3], #4
 8004c46:	e7fa      	b.n	8004c3e <__multiply+0x42>
 8004c48:	f104 0214 	add.w	r2, r4, #20
 8004c4c:	f108 0114 	add.w	r1, r8, #20
 8004c50:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004c54:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	9b00      	ldr	r3, [sp, #0]
 8004c5c:	9201      	str	r2, [sp, #4]
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d957      	bls.n	8004d12 <__multiply+0x116>
 8004c62:	f8b2 b000 	ldrh.w	fp, [r2]
 8004c66:	f1bb 0f00 	cmp.w	fp, #0
 8004c6a:	d023      	beq.n	8004cb4 <__multiply+0xb8>
 8004c6c:	4689      	mov	r9, r1
 8004c6e:	46ae      	mov	lr, r5
 8004c70:	f04f 0800 	mov.w	r8, #0
 8004c74:	f859 4b04 	ldr.w	r4, [r9], #4
 8004c78:	f8be a000 	ldrh.w	sl, [lr]
 8004c7c:	b2a3      	uxth	r3, r4
 8004c7e:	fb0b a303 	mla	r3, fp, r3, sl
 8004c82:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004c86:	f8de 4000 	ldr.w	r4, [lr]
 8004c8a:	4443      	add	r3, r8
 8004c8c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004c90:	fb0b 840a 	mla	r4, fp, sl, r8
 8004c94:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004c98:	46f2      	mov	sl, lr
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004ca0:	454f      	cmp	r7, r9
 8004ca2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004ca6:	f84a 3b04 	str.w	r3, [sl], #4
 8004caa:	d901      	bls.n	8004cb0 <__multiply+0xb4>
 8004cac:	46d6      	mov	lr, sl
 8004cae:	e7e1      	b.n	8004c74 <__multiply+0x78>
 8004cb0:	f8ce 8004 	str.w	r8, [lr, #4]
 8004cb4:	9b01      	ldr	r3, [sp, #4]
 8004cb6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004cba:	3204      	adds	r2, #4
 8004cbc:	f1ba 0f00 	cmp.w	sl, #0
 8004cc0:	d021      	beq.n	8004d06 <__multiply+0x10a>
 8004cc2:	682b      	ldr	r3, [r5, #0]
 8004cc4:	462c      	mov	r4, r5
 8004cc6:	4689      	mov	r9, r1
 8004cc8:	f04f 0800 	mov.w	r8, #0
 8004ccc:	f8b9 e000 	ldrh.w	lr, [r9]
 8004cd0:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8004cd4:	fb0a be0e 	mla	lr, sl, lr, fp
 8004cd8:	44f0      	add	r8, lr
 8004cda:	46a3      	mov	fp, r4
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8004ce2:	f84b 3b04 	str.w	r3, [fp], #4
 8004ce6:	f859 3b04 	ldr.w	r3, [r9], #4
 8004cea:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8004cee:	0c1b      	lsrs	r3, r3, #16
 8004cf0:	fb0a e303 	mla	r3, sl, r3, lr
 8004cf4:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8004cf8:	454f      	cmp	r7, r9
 8004cfa:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8004cfe:	d901      	bls.n	8004d04 <__multiply+0x108>
 8004d00:	465c      	mov	r4, fp
 8004d02:	e7e3      	b.n	8004ccc <__multiply+0xd0>
 8004d04:	6063      	str	r3, [r4, #4]
 8004d06:	3504      	adds	r5, #4
 8004d08:	e7a7      	b.n	8004c5a <__multiply+0x5e>
 8004d0a:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8004d0e:	b913      	cbnz	r3, 8004d16 <__multiply+0x11a>
 8004d10:	3e01      	subs	r6, #1
 8004d12:	2e00      	cmp	r6, #0
 8004d14:	dcf9      	bgt.n	8004d0a <__multiply+0x10e>
 8004d16:	6106      	str	r6, [r0, #16]
 8004d18:	b003      	add	sp, #12
 8004d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004d20 <__pow5mult>:
 8004d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d24:	4615      	mov	r5, r2
 8004d26:	f012 0203 	ands.w	r2, r2, #3
 8004d2a:	4606      	mov	r6, r0
 8004d2c:	460f      	mov	r7, r1
 8004d2e:	d007      	beq.n	8004d40 <__pow5mult+0x20>
 8004d30:	3a01      	subs	r2, #1
 8004d32:	4c21      	ldr	r4, [pc, #132]	; (8004db8 <__pow5mult+0x98>)
 8004d34:	2300      	movs	r3, #0
 8004d36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004d3a:	f7ff fece 	bl	8004ada <__multadd>
 8004d3e:	4607      	mov	r7, r0
 8004d40:	10ad      	asrs	r5, r5, #2
 8004d42:	d036      	beq.n	8004db2 <__pow5mult+0x92>
 8004d44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004d46:	b93c      	cbnz	r4, 8004d58 <__pow5mult+0x38>
 8004d48:	2010      	movs	r0, #16
 8004d4a:	f7ff fc45 	bl	80045d8 <malloc>
 8004d4e:	6270      	str	r0, [r6, #36]	; 0x24
 8004d50:	6044      	str	r4, [r0, #4]
 8004d52:	6084      	str	r4, [r0, #8]
 8004d54:	6004      	str	r4, [r0, #0]
 8004d56:	60c4      	str	r4, [r0, #12]
 8004d58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004d5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004d60:	b94c      	cbnz	r4, 8004d76 <__pow5mult+0x56>
 8004d62:	f240 2171 	movw	r1, #625	; 0x271
 8004d66:	4630      	mov	r0, r6
 8004d68:	f7ff ff3f 	bl	8004bea <__i2b>
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004d72:	4604      	mov	r4, r0
 8004d74:	6003      	str	r3, [r0, #0]
 8004d76:	f04f 0800 	mov.w	r8, #0
 8004d7a:	07eb      	lsls	r3, r5, #31
 8004d7c:	d50a      	bpl.n	8004d94 <__pow5mult+0x74>
 8004d7e:	4639      	mov	r1, r7
 8004d80:	4622      	mov	r2, r4
 8004d82:	4630      	mov	r0, r6
 8004d84:	f7ff ff3a 	bl	8004bfc <__multiply>
 8004d88:	4639      	mov	r1, r7
 8004d8a:	4681      	mov	r9, r0
 8004d8c:	4630      	mov	r0, r6
 8004d8e:	f7ff fe8d 	bl	8004aac <_Bfree>
 8004d92:	464f      	mov	r7, r9
 8004d94:	106d      	asrs	r5, r5, #1
 8004d96:	d00c      	beq.n	8004db2 <__pow5mult+0x92>
 8004d98:	6820      	ldr	r0, [r4, #0]
 8004d9a:	b108      	cbz	r0, 8004da0 <__pow5mult+0x80>
 8004d9c:	4604      	mov	r4, r0
 8004d9e:	e7ec      	b.n	8004d7a <__pow5mult+0x5a>
 8004da0:	4622      	mov	r2, r4
 8004da2:	4621      	mov	r1, r4
 8004da4:	4630      	mov	r0, r6
 8004da6:	f7ff ff29 	bl	8004bfc <__multiply>
 8004daa:	6020      	str	r0, [r4, #0]
 8004dac:	f8c0 8000 	str.w	r8, [r0]
 8004db0:	e7f4      	b.n	8004d9c <__pow5mult+0x7c>
 8004db2:	4638      	mov	r0, r7
 8004db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004db8:	080058d8 	.word	0x080058d8

08004dbc <__lshift>:
 8004dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dc0:	460c      	mov	r4, r1
 8004dc2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004dc6:	6926      	ldr	r6, [r4, #16]
 8004dc8:	6849      	ldr	r1, [r1, #4]
 8004dca:	68a3      	ldr	r3, [r4, #8]
 8004dcc:	4456      	add	r6, sl
 8004dce:	4607      	mov	r7, r0
 8004dd0:	4691      	mov	r9, r2
 8004dd2:	1c75      	adds	r5, r6, #1
 8004dd4:	42ab      	cmp	r3, r5
 8004dd6:	da02      	bge.n	8004dde <__lshift+0x22>
 8004dd8:	3101      	adds	r1, #1
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	e7fa      	b.n	8004dd4 <__lshift+0x18>
 8004dde:	4638      	mov	r0, r7
 8004de0:	f7ff fe2f 	bl	8004a42 <_Balloc>
 8004de4:	2300      	movs	r3, #0
 8004de6:	4680      	mov	r8, r0
 8004de8:	f100 0114 	add.w	r1, r0, #20
 8004dec:	461a      	mov	r2, r3
 8004dee:	4553      	cmp	r3, sl
 8004df0:	da03      	bge.n	8004dfa <__lshift+0x3e>
 8004df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004df6:	3301      	adds	r3, #1
 8004df8:	e7f9      	b.n	8004dee <__lshift+0x32>
 8004dfa:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8004dfe:	6920      	ldr	r0, [r4, #16]
 8004e00:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004e04:	f019 091f 	ands.w	r9, r9, #31
 8004e08:	f104 0114 	add.w	r1, r4, #20
 8004e0c:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004e10:	d014      	beq.n	8004e3c <__lshift+0x80>
 8004e12:	f1c9 0c20 	rsb	ip, r9, #32
 8004e16:	2200      	movs	r2, #0
 8004e18:	6808      	ldr	r0, [r1, #0]
 8004e1a:	fa00 f009 	lsl.w	r0, r0, r9
 8004e1e:	4302      	orrs	r2, r0
 8004e20:	469a      	mov	sl, r3
 8004e22:	f843 2b04 	str.w	r2, [r3], #4
 8004e26:	f851 2b04 	ldr.w	r2, [r1], #4
 8004e2a:	458e      	cmp	lr, r1
 8004e2c:	fa22 f20c 	lsr.w	r2, r2, ip
 8004e30:	d8f2      	bhi.n	8004e18 <__lshift+0x5c>
 8004e32:	f8ca 2004 	str.w	r2, [sl, #4]
 8004e36:	b142      	cbz	r2, 8004e4a <__lshift+0x8e>
 8004e38:	1cb5      	adds	r5, r6, #2
 8004e3a:	e006      	b.n	8004e4a <__lshift+0x8e>
 8004e3c:	3b04      	subs	r3, #4
 8004e3e:	f851 2b04 	ldr.w	r2, [r1], #4
 8004e42:	f843 2f04 	str.w	r2, [r3, #4]!
 8004e46:	458e      	cmp	lr, r1
 8004e48:	d8f9      	bhi.n	8004e3e <__lshift+0x82>
 8004e4a:	3d01      	subs	r5, #1
 8004e4c:	4638      	mov	r0, r7
 8004e4e:	f8c8 5010 	str.w	r5, [r8, #16]
 8004e52:	4621      	mov	r1, r4
 8004e54:	f7ff fe2a 	bl	8004aac <_Bfree>
 8004e58:	4640      	mov	r0, r8
 8004e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004e5e <__mcmp>:
 8004e5e:	6903      	ldr	r3, [r0, #16]
 8004e60:	690a      	ldr	r2, [r1, #16]
 8004e62:	1a9b      	subs	r3, r3, r2
 8004e64:	b510      	push	{r4, lr}
 8004e66:	d111      	bne.n	8004e8c <__mcmp+0x2e>
 8004e68:	0092      	lsls	r2, r2, #2
 8004e6a:	3014      	adds	r0, #20
 8004e6c:	3114      	adds	r1, #20
 8004e6e:	1883      	adds	r3, r0, r2
 8004e70:	440a      	add	r2, r1
 8004e72:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8004e76:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004e7a:	428c      	cmp	r4, r1
 8004e7c:	d002      	beq.n	8004e84 <__mcmp+0x26>
 8004e7e:	d307      	bcc.n	8004e90 <__mcmp+0x32>
 8004e80:	2001      	movs	r0, #1
 8004e82:	bd10      	pop	{r4, pc}
 8004e84:	4298      	cmp	r0, r3
 8004e86:	d3f4      	bcc.n	8004e72 <__mcmp+0x14>
 8004e88:	2000      	movs	r0, #0
 8004e8a:	bd10      	pop	{r4, pc}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	bd10      	pop	{r4, pc}
 8004e90:	f04f 30ff 	mov.w	r0, #4294967295
 8004e94:	bd10      	pop	{r4, pc}

08004e96 <__mdiff>:
 8004e96:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e9a:	460c      	mov	r4, r1
 8004e9c:	4607      	mov	r7, r0
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	4615      	mov	r5, r2
 8004ea4:	f7ff ffdb 	bl	8004e5e <__mcmp>
 8004ea8:	1e06      	subs	r6, r0, #0
 8004eaa:	d108      	bne.n	8004ebe <__mdiff+0x28>
 8004eac:	4631      	mov	r1, r6
 8004eae:	4638      	mov	r0, r7
 8004eb0:	f7ff fdc7 	bl	8004a42 <_Balloc>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	6103      	str	r3, [r0, #16]
 8004eb8:	6146      	str	r6, [r0, #20]
 8004eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ebe:	bfbc      	itt	lt
 8004ec0:	4623      	movlt	r3, r4
 8004ec2:	462c      	movlt	r4, r5
 8004ec4:	4638      	mov	r0, r7
 8004ec6:	6861      	ldr	r1, [r4, #4]
 8004ec8:	bfba      	itte	lt
 8004eca:	461d      	movlt	r5, r3
 8004ecc:	2601      	movlt	r6, #1
 8004ece:	2600      	movge	r6, #0
 8004ed0:	f7ff fdb7 	bl	8004a42 <_Balloc>
 8004ed4:	692b      	ldr	r3, [r5, #16]
 8004ed6:	60c6      	str	r6, [r0, #12]
 8004ed8:	6926      	ldr	r6, [r4, #16]
 8004eda:	f105 0914 	add.w	r9, r5, #20
 8004ede:	3414      	adds	r4, #20
 8004ee0:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 8004ee4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004ee8:	f100 0514 	add.w	r5, r0, #20
 8004eec:	f04f 0c00 	mov.w	ip, #0
 8004ef0:	f854 3b04 	ldr.w	r3, [r4], #4
 8004ef4:	f859 2b04 	ldr.w	r2, [r9], #4
 8004ef8:	fa1c f183 	uxtah	r1, ip, r3
 8004efc:	fa1f fe82 	uxth.w	lr, r2
 8004f00:	0c12      	lsrs	r2, r2, #16
 8004f02:	ebce 0101 	rsb	r1, lr, r1
 8004f06:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 8004f0a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004f0e:	b289      	uxth	r1, r1
 8004f10:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004f14:	45c8      	cmp	r8, r9
 8004f16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004f1a:	46a6      	mov	lr, r4
 8004f1c:	f845 3b04 	str.w	r3, [r5], #4
 8004f20:	d8e6      	bhi.n	8004ef0 <__mdiff+0x5a>
 8004f22:	45be      	cmp	lr, r7
 8004f24:	d20e      	bcs.n	8004f44 <__mdiff+0xae>
 8004f26:	f85e 1b04 	ldr.w	r1, [lr], #4
 8004f2a:	fa1c f281 	uxtah	r2, ip, r1
 8004f2e:	1413      	asrs	r3, r2, #16
 8004f30:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8004f34:	b292      	uxth	r2, r2
 8004f36:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004f3a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004f3e:	f845 2b04 	str.w	r2, [r5], #4
 8004f42:	e7ee      	b.n	8004f22 <__mdiff+0x8c>
 8004f44:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004f48:	b90b      	cbnz	r3, 8004f4e <__mdiff+0xb8>
 8004f4a:	3e01      	subs	r6, #1
 8004f4c:	e7fa      	b.n	8004f44 <__mdiff+0xae>
 8004f4e:	6106      	str	r6, [r0, #16]
 8004f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004f54 <__d2b>:
 8004f54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004f58:	460e      	mov	r6, r1
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	ec59 8b10 	vmov	r8, r9, d0
 8004f60:	4615      	mov	r5, r2
 8004f62:	f7ff fd6e 	bl	8004a42 <_Balloc>
 8004f66:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004f6a:	4607      	mov	r7, r0
 8004f6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004f70:	b10c      	cbz	r4, 8004f76 <__d2b+0x22>
 8004f72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f76:	9301      	str	r3, [sp, #4]
 8004f78:	f1b8 0f00 	cmp.w	r8, #0
 8004f7c:	d019      	beq.n	8004fb2 <__d2b+0x5e>
 8004f7e:	a802      	add	r0, sp, #8
 8004f80:	f840 8d08 	str.w	r8, [r0, #-8]!
 8004f84:	f7ff fe04 	bl	8004b90 <__lo0bits>
 8004f88:	9b00      	ldr	r3, [sp, #0]
 8004f8a:	b148      	cbz	r0, 8004fa0 <__d2b+0x4c>
 8004f8c:	9a01      	ldr	r2, [sp, #4]
 8004f8e:	f1c0 0120 	rsb	r1, r0, #32
 8004f92:	fa02 f101 	lsl.w	r1, r2, r1
 8004f96:	430b      	orrs	r3, r1
 8004f98:	40c2      	lsrs	r2, r0
 8004f9a:	617b      	str	r3, [r7, #20]
 8004f9c:	9201      	str	r2, [sp, #4]
 8004f9e:	e000      	b.n	8004fa2 <__d2b+0x4e>
 8004fa0:	617b      	str	r3, [r7, #20]
 8004fa2:	9b01      	ldr	r3, [sp, #4]
 8004fa4:	61bb      	str	r3, [r7, #24]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	bf14      	ite	ne
 8004faa:	2102      	movne	r1, #2
 8004fac:	2101      	moveq	r1, #1
 8004fae:	6139      	str	r1, [r7, #16]
 8004fb0:	e007      	b.n	8004fc2 <__d2b+0x6e>
 8004fb2:	a801      	add	r0, sp, #4
 8004fb4:	f7ff fdec 	bl	8004b90 <__lo0bits>
 8004fb8:	9b01      	ldr	r3, [sp, #4]
 8004fba:	617b      	str	r3, [r7, #20]
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	6139      	str	r1, [r7, #16]
 8004fc0:	3020      	adds	r0, #32
 8004fc2:	b134      	cbz	r4, 8004fd2 <__d2b+0x7e>
 8004fc4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004fc8:	4404      	add	r4, r0
 8004fca:	6034      	str	r4, [r6, #0]
 8004fcc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004fd0:	e009      	b.n	8004fe6 <__d2b+0x92>
 8004fd2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004fd6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004fda:	6030      	str	r0, [r6, #0]
 8004fdc:	6918      	ldr	r0, [r3, #16]
 8004fde:	f7ff fdb7 	bl	8004b50 <__hi0bits>
 8004fe2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004fe6:	6028      	str	r0, [r5, #0]
 8004fe8:	4638      	mov	r0, r7
 8004fea:	b003      	add	sp, #12
 8004fec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004ff0 <_sbrk_r>:
 8004ff0:	b538      	push	{r3, r4, r5, lr}
 8004ff2:	4c06      	ldr	r4, [pc, #24]	; (800500c <_sbrk_r+0x1c>)
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	4605      	mov	r5, r0
 8004ff8:	4608      	mov	r0, r1
 8004ffa:	6023      	str	r3, [r4, #0]
 8004ffc:	f000 fb94 	bl	8005728 <_sbrk>
 8005000:	1c43      	adds	r3, r0, #1
 8005002:	d102      	bne.n	800500a <_sbrk_r+0x1a>
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	b103      	cbz	r3, 800500a <_sbrk_r+0x1a>
 8005008:	602b      	str	r3, [r5, #0]
 800500a:	bd38      	pop	{r3, r4, r5, pc}
 800500c:	20000754 	.word	0x20000754

08005010 <__ssprint_r>:
 8005010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005014:	4693      	mov	fp, r2
 8005016:	6892      	ldr	r2, [r2, #8]
 8005018:	4681      	mov	r9, r0
 800501a:	460c      	mov	r4, r1
 800501c:	b34a      	cbz	r2, 8005072 <__ssprint_r+0x62>
 800501e:	2300      	movs	r3, #0
 8005020:	f8db a000 	ldr.w	sl, [fp]
 8005024:	9301      	str	r3, [sp, #4]
 8005026:	461f      	mov	r7, r3
 8005028:	e006      	b.n	8005038 <__ssprint_r+0x28>
 800502a:	f8da 3000 	ldr.w	r3, [sl]
 800502e:	f8da 7004 	ldr.w	r7, [sl, #4]
 8005032:	9301      	str	r3, [sp, #4]
 8005034:	f10a 0a08 	add.w	sl, sl, #8
 8005038:	2f00      	cmp	r7, #0
 800503a:	d0f6      	beq.n	800502a <__ssprint_r+0x1a>
 800503c:	68a6      	ldr	r6, [r4, #8]
 800503e:	42b7      	cmp	r7, r6
 8005040:	d360      	bcc.n	8005104 <__ssprint_r+0xf4>
 8005042:	89a0      	ldrh	r0, [r4, #12]
 8005044:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8005048:	d117      	bne.n	800507a <__ssprint_r+0x6a>
 800504a:	42b7      	cmp	r7, r6
 800504c:	d35a      	bcc.n	8005104 <__ssprint_r+0xf4>
 800504e:	4632      	mov	r2, r6
 8005050:	9901      	ldr	r1, [sp, #4]
 8005052:	6820      	ldr	r0, [r4, #0]
 8005054:	f000 f99c 	bl	8005390 <memmove>
 8005058:	68a2      	ldr	r2, [r4, #8]
 800505a:	1b92      	subs	r2, r2, r6
 800505c:	60a2      	str	r2, [r4, #8]
 800505e:	6822      	ldr	r2, [r4, #0]
 8005060:	4416      	add	r6, r2
 8005062:	f8db 2008 	ldr.w	r2, [fp, #8]
 8005066:	6026      	str	r6, [r4, #0]
 8005068:	1bd7      	subs	r7, r2, r7
 800506a:	f8cb 7008 	str.w	r7, [fp, #8]
 800506e:	2f00      	cmp	r7, #0
 8005070:	d1db      	bne.n	800502a <__ssprint_r+0x1a>
 8005072:	2000      	movs	r0, #0
 8005074:	f8cb 0004 	str.w	r0, [fp, #4]
 8005078:	e046      	b.n	8005108 <__ssprint_r+0xf8>
 800507a:	6825      	ldr	r5, [r4, #0]
 800507c:	6921      	ldr	r1, [r4, #16]
 800507e:	ebc1 0805 	rsb	r8, r1, r5
 8005082:	f108 0201 	add.w	r2, r8, #1
 8005086:	6965      	ldr	r5, [r4, #20]
 8005088:	443a      	add	r2, r7
 800508a:	2302      	movs	r3, #2
 800508c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005090:	fb95 f5f3 	sdiv	r5, r5, r3
 8005094:	4295      	cmp	r5, r2
 8005096:	bf38      	it	cc
 8005098:	4615      	movcc	r5, r2
 800509a:	0543      	lsls	r3, r0, #21
 800509c:	d510      	bpl.n	80050c0 <__ssprint_r+0xb0>
 800509e:	4629      	mov	r1, r5
 80050a0:	4648      	mov	r0, r9
 80050a2:	f7ff faa1 	bl	80045e8 <_malloc_r>
 80050a6:	4606      	mov	r6, r0
 80050a8:	b1a0      	cbz	r0, 80050d4 <__ssprint_r+0xc4>
 80050aa:	4642      	mov	r2, r8
 80050ac:	6921      	ldr	r1, [r4, #16]
 80050ae:	f7ff fcbb 	bl	8004a28 <memcpy>
 80050b2:	89a2      	ldrh	r2, [r4, #12]
 80050b4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80050b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050bc:	81a2      	strh	r2, [r4, #12]
 80050be:	e018      	b.n	80050f2 <__ssprint_r+0xe2>
 80050c0:	462a      	mov	r2, r5
 80050c2:	4648      	mov	r0, r9
 80050c4:	f000 f988 	bl	80053d8 <_realloc_r>
 80050c8:	4606      	mov	r6, r0
 80050ca:	b990      	cbnz	r0, 80050f2 <__ssprint_r+0xe2>
 80050cc:	6921      	ldr	r1, [r4, #16]
 80050ce:	4648      	mov	r0, r9
 80050d0:	f000 f8a0 	bl	8005214 <_free_r>
 80050d4:	220c      	movs	r2, #12
 80050d6:	f8c9 2000 	str.w	r2, [r9]
 80050da:	89a2      	ldrh	r2, [r4, #12]
 80050dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050e0:	81a2      	strh	r2, [r4, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f8cb 2008 	str.w	r2, [fp, #8]
 80050e8:	f8cb 2004 	str.w	r2, [fp, #4]
 80050ec:	f04f 30ff 	mov.w	r0, #4294967295
 80050f0:	e00a      	b.n	8005108 <__ssprint_r+0xf8>
 80050f2:	6126      	str	r6, [r4, #16]
 80050f4:	6165      	str	r5, [r4, #20]
 80050f6:	4446      	add	r6, r8
 80050f8:	ebc8 0505 	rsb	r5, r8, r5
 80050fc:	6026      	str	r6, [r4, #0]
 80050fe:	60a5      	str	r5, [r4, #8]
 8005100:	463e      	mov	r6, r7
 8005102:	e7a2      	b.n	800504a <__ssprint_r+0x3a>
 8005104:	463e      	mov	r6, r7
 8005106:	e7a2      	b.n	800504e <__ssprint_r+0x3e>
 8005108:	b003      	add	sp, #12
 800510a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800510e <_calloc_r>:
 800510e:	b510      	push	{r4, lr}
 8005110:	4351      	muls	r1, r2
 8005112:	f7ff fa69 	bl	80045e8 <_malloc_r>
 8005116:	4604      	mov	r4, r0
 8005118:	b320      	cbz	r0, 8005164 <_calloc_r+0x56>
 800511a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800511e:	f022 0203 	bic.w	r2, r2, #3
 8005122:	3a04      	subs	r2, #4
 8005124:	2a24      	cmp	r2, #36	; 0x24
 8005126:	d81a      	bhi.n	800515e <_calloc_r+0x50>
 8005128:	2a13      	cmp	r2, #19
 800512a:	d912      	bls.n	8005152 <_calloc_r+0x44>
 800512c:	2100      	movs	r1, #0
 800512e:	2a1b      	cmp	r2, #27
 8005130:	6001      	str	r1, [r0, #0]
 8005132:	6041      	str	r1, [r0, #4]
 8005134:	d802      	bhi.n	800513c <_calloc_r+0x2e>
 8005136:	f100 0308 	add.w	r3, r0, #8
 800513a:	e00b      	b.n	8005154 <_calloc_r+0x46>
 800513c:	2a24      	cmp	r2, #36	; 0x24
 800513e:	6081      	str	r1, [r0, #8]
 8005140:	60c1      	str	r1, [r0, #12]
 8005142:	bf11      	iteee	ne
 8005144:	f100 0310 	addne.w	r3, r0, #16
 8005148:	6101      	streq	r1, [r0, #16]
 800514a:	f100 0318 	addeq.w	r3, r0, #24
 800514e:	6141      	streq	r1, [r0, #20]
 8005150:	e000      	b.n	8005154 <_calloc_r+0x46>
 8005152:	4603      	mov	r3, r0
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	605a      	str	r2, [r3, #4]
 800515a:	609a      	str	r2, [r3, #8]
 800515c:	e002      	b.n	8005164 <_calloc_r+0x56>
 800515e:	2100      	movs	r1, #0
 8005160:	f000 f931 	bl	80053c6 <memset>
 8005164:	4620      	mov	r0, r4
 8005166:	bd10      	pop	{r4, pc}

08005168 <_malloc_trim_r>:
 8005168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800516c:	4f25      	ldr	r7, [pc, #148]	; (8005204 <_malloc_trim_r+0x9c>)
 800516e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8005210 <_malloc_trim_r+0xa8>
 8005172:	4689      	mov	r9, r1
 8005174:	4606      	mov	r6, r0
 8005176:	f7ff fc62 	bl	8004a3e <__malloc_lock>
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	685d      	ldr	r5, [r3, #4]
 800517e:	f1a8 0411 	sub.w	r4, r8, #17
 8005182:	f025 0503 	bic.w	r5, r5, #3
 8005186:	442c      	add	r4, r5
 8005188:	ebc9 0404 	rsb	r4, r9, r4
 800518c:	fbb4 f4f8 	udiv	r4, r4, r8
 8005190:	3c01      	subs	r4, #1
 8005192:	fb08 f404 	mul.w	r4, r8, r4
 8005196:	4544      	cmp	r4, r8
 8005198:	da05      	bge.n	80051a6 <_malloc_trim_r+0x3e>
 800519a:	4630      	mov	r0, r6
 800519c:	f7ff fc50 	bl	8004a40 <__malloc_unlock>
 80051a0:	2000      	movs	r0, #0
 80051a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051a6:	2100      	movs	r1, #0
 80051a8:	4630      	mov	r0, r6
 80051aa:	f7ff ff21 	bl	8004ff0 <_sbrk_r>
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	442b      	add	r3, r5
 80051b2:	4298      	cmp	r0, r3
 80051b4:	d1f1      	bne.n	800519a <_malloc_trim_r+0x32>
 80051b6:	4261      	negs	r1, r4
 80051b8:	4630      	mov	r0, r6
 80051ba:	f7ff ff19 	bl	8004ff0 <_sbrk_r>
 80051be:	3001      	adds	r0, #1
 80051c0:	d110      	bne.n	80051e4 <_malloc_trim_r+0x7c>
 80051c2:	2100      	movs	r1, #0
 80051c4:	4630      	mov	r0, r6
 80051c6:	f7ff ff13 	bl	8004ff0 <_sbrk_r>
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	1a83      	subs	r3, r0, r2
 80051ce:	2b0f      	cmp	r3, #15
 80051d0:	dde3      	ble.n	800519a <_malloc_trim_r+0x32>
 80051d2:	490d      	ldr	r1, [pc, #52]	; (8005208 <_malloc_trim_r+0xa0>)
 80051d4:	6809      	ldr	r1, [r1, #0]
 80051d6:	1a40      	subs	r0, r0, r1
 80051d8:	490c      	ldr	r1, [pc, #48]	; (800520c <_malloc_trim_r+0xa4>)
 80051da:	f043 0301 	orr.w	r3, r3, #1
 80051de:	6008      	str	r0, [r1, #0]
 80051e0:	6053      	str	r3, [r2, #4]
 80051e2:	e7da      	b.n	800519a <_malloc_trim_r+0x32>
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4a09      	ldr	r2, [pc, #36]	; (800520c <_malloc_trim_r+0xa4>)
 80051e8:	1b2d      	subs	r5, r5, r4
 80051ea:	f045 0501 	orr.w	r5, r5, #1
 80051ee:	605d      	str	r5, [r3, #4]
 80051f0:	6813      	ldr	r3, [r2, #0]
 80051f2:	4630      	mov	r0, r6
 80051f4:	1b1c      	subs	r4, r3, r4
 80051f6:	6014      	str	r4, [r2, #0]
 80051f8:	f7ff fc22 	bl	8004a40 <__malloc_unlock>
 80051fc:	2001      	movs	r0, #1
 80051fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005202:	bf00      	nop
 8005204:	20000130 	.word	0x20000130
 8005208:	2000053c 	.word	0x2000053c
 800520c:	2000060c 	.word	0x2000060c
 8005210:	00000080 	.word	0x00000080

08005214 <_free_r>:
 8005214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005218:	4604      	mov	r4, r0
 800521a:	4688      	mov	r8, r1
 800521c:	2900      	cmp	r1, #0
 800521e:	f000 80ad 	beq.w	800537c <_free_r+0x168>
 8005222:	f7ff fc0c 	bl	8004a3e <__malloc_lock>
 8005226:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800522a:	4d55      	ldr	r5, [pc, #340]	; (8005380 <_free_r+0x16c>)
 800522c:	f022 0001 	bic.w	r0, r2, #1
 8005230:	f1a8 0308 	sub.w	r3, r8, #8
 8005234:	181f      	adds	r7, r3, r0
 8005236:	68a9      	ldr	r1, [r5, #8]
 8005238:	687e      	ldr	r6, [r7, #4]
 800523a:	428f      	cmp	r7, r1
 800523c:	f026 0603 	bic.w	r6, r6, #3
 8005240:	f002 0201 	and.w	r2, r2, #1
 8005244:	d11b      	bne.n	800527e <_free_r+0x6a>
 8005246:	4430      	add	r0, r6
 8005248:	b93a      	cbnz	r2, 800525a <_free_r+0x46>
 800524a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800524e:	1a9b      	subs	r3, r3, r2
 8005250:	4410      	add	r0, r2
 8005252:	6899      	ldr	r1, [r3, #8]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	60ca      	str	r2, [r1, #12]
 8005258:	6091      	str	r1, [r2, #8]
 800525a:	f040 0201 	orr.w	r2, r0, #1
 800525e:	605a      	str	r2, [r3, #4]
 8005260:	60ab      	str	r3, [r5, #8]
 8005262:	4b48      	ldr	r3, [pc, #288]	; (8005384 <_free_r+0x170>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4298      	cmp	r0, r3
 8005268:	d304      	bcc.n	8005274 <_free_r+0x60>
 800526a:	4b47      	ldr	r3, [pc, #284]	; (8005388 <_free_r+0x174>)
 800526c:	4620      	mov	r0, r4
 800526e:	6819      	ldr	r1, [r3, #0]
 8005270:	f7ff ff7a 	bl	8005168 <_malloc_trim_r>
 8005274:	4620      	mov	r0, r4
 8005276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800527a:	f7ff bbe1 	b.w	8004a40 <__malloc_unlock>
 800527e:	607e      	str	r6, [r7, #4]
 8005280:	b97a      	cbnz	r2, 80052a2 <_free_r+0x8e>
 8005282:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8005286:	1a5b      	subs	r3, r3, r1
 8005288:	4408      	add	r0, r1
 800528a:	6899      	ldr	r1, [r3, #8]
 800528c:	f105 0e08 	add.w	lr, r5, #8
 8005290:	4571      	cmp	r1, lr
 8005292:	d008      	beq.n	80052a6 <_free_r+0x92>
 8005294:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8005298:	f8c1 e00c 	str.w	lr, [r1, #12]
 800529c:	f8ce 1008 	str.w	r1, [lr, #8]
 80052a0:	e002      	b.n	80052a8 <_free_r+0x94>
 80052a2:	2200      	movs	r2, #0
 80052a4:	e000      	b.n	80052a8 <_free_r+0x94>
 80052a6:	2201      	movs	r2, #1
 80052a8:	19b9      	adds	r1, r7, r6
 80052aa:	6849      	ldr	r1, [r1, #4]
 80052ac:	07c9      	lsls	r1, r1, #31
 80052ae:	d40e      	bmi.n	80052ce <_free_r+0xba>
 80052b0:	4430      	add	r0, r6
 80052b2:	68b9      	ldr	r1, [r7, #8]
 80052b4:	b942      	cbnz	r2, 80052c8 <_free_r+0xb4>
 80052b6:	4e35      	ldr	r6, [pc, #212]	; (800538c <_free_r+0x178>)
 80052b8:	42b1      	cmp	r1, r6
 80052ba:	d105      	bne.n	80052c8 <_free_r+0xb4>
 80052bc:	616b      	str	r3, [r5, #20]
 80052be:	612b      	str	r3, [r5, #16]
 80052c0:	2201      	movs	r2, #1
 80052c2:	60d9      	str	r1, [r3, #12]
 80052c4:	6099      	str	r1, [r3, #8]
 80052c6:	e002      	b.n	80052ce <_free_r+0xba>
 80052c8:	68fe      	ldr	r6, [r7, #12]
 80052ca:	60ce      	str	r6, [r1, #12]
 80052cc:	60b1      	str	r1, [r6, #8]
 80052ce:	f040 0101 	orr.w	r1, r0, #1
 80052d2:	6059      	str	r1, [r3, #4]
 80052d4:	5018      	str	r0, [r3, r0]
 80052d6:	2a00      	cmp	r2, #0
 80052d8:	d1cc      	bne.n	8005274 <_free_r+0x60>
 80052da:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80052de:	d212      	bcs.n	8005306 <_free_r+0xf2>
 80052e0:	08c0      	lsrs	r0, r0, #3
 80052e2:	1081      	asrs	r1, r0, #2
 80052e4:	2201      	movs	r2, #1
 80052e6:	fa02 f101 	lsl.w	r1, r2, r1
 80052ea:	686a      	ldr	r2, [r5, #4]
 80052ec:	3001      	adds	r0, #1
 80052ee:	430a      	orrs	r2, r1
 80052f0:	606a      	str	r2, [r5, #4]
 80052f2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80052f6:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80052fa:	6099      	str	r1, [r3, #8]
 80052fc:	3a08      	subs	r2, #8
 80052fe:	60da      	str	r2, [r3, #12]
 8005300:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005304:	e038      	b.n	8005378 <_free_r+0x164>
 8005306:	0a42      	lsrs	r2, r0, #9
 8005308:	2a04      	cmp	r2, #4
 800530a:	d802      	bhi.n	8005312 <_free_r+0xfe>
 800530c:	0982      	lsrs	r2, r0, #6
 800530e:	3238      	adds	r2, #56	; 0x38
 8005310:	e015      	b.n	800533e <_free_r+0x12a>
 8005312:	2a14      	cmp	r2, #20
 8005314:	d801      	bhi.n	800531a <_free_r+0x106>
 8005316:	325b      	adds	r2, #91	; 0x5b
 8005318:	e011      	b.n	800533e <_free_r+0x12a>
 800531a:	2a54      	cmp	r2, #84	; 0x54
 800531c:	d802      	bhi.n	8005324 <_free_r+0x110>
 800531e:	0b02      	lsrs	r2, r0, #12
 8005320:	326e      	adds	r2, #110	; 0x6e
 8005322:	e00c      	b.n	800533e <_free_r+0x12a>
 8005324:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005328:	d802      	bhi.n	8005330 <_free_r+0x11c>
 800532a:	0bc2      	lsrs	r2, r0, #15
 800532c:	3277      	adds	r2, #119	; 0x77
 800532e:	e006      	b.n	800533e <_free_r+0x12a>
 8005330:	f240 5154 	movw	r1, #1364	; 0x554
 8005334:	428a      	cmp	r2, r1
 8005336:	bf9a      	itte	ls
 8005338:	0c82      	lsrls	r2, r0, #18
 800533a:	327c      	addls	r2, #124	; 0x7c
 800533c:	227e      	movhi	r2, #126	; 0x7e
 800533e:	1c51      	adds	r1, r2, #1
 8005340:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005344:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005348:	4f0d      	ldr	r7, [pc, #52]	; (8005380 <_free_r+0x16c>)
 800534a:	428e      	cmp	r6, r1
 800534c:	d10b      	bne.n	8005366 <_free_r+0x152>
 800534e:	2101      	movs	r1, #1
 8005350:	1092      	asrs	r2, r2, #2
 8005352:	fa01 f202 	lsl.w	r2, r1, r2
 8005356:	6879      	ldr	r1, [r7, #4]
 8005358:	4311      	orrs	r1, r2
 800535a:	6079      	str	r1, [r7, #4]
 800535c:	4631      	mov	r1, r6
 800535e:	e008      	b.n	8005372 <_free_r+0x15e>
 8005360:	6889      	ldr	r1, [r1, #8]
 8005362:	428e      	cmp	r6, r1
 8005364:	d004      	beq.n	8005370 <_free_r+0x15c>
 8005366:	684a      	ldr	r2, [r1, #4]
 8005368:	f022 0203 	bic.w	r2, r2, #3
 800536c:	4290      	cmp	r0, r2
 800536e:	d3f7      	bcc.n	8005360 <_free_r+0x14c>
 8005370:	68ce      	ldr	r6, [r1, #12]
 8005372:	60de      	str	r6, [r3, #12]
 8005374:	6099      	str	r1, [r3, #8]
 8005376:	60b3      	str	r3, [r6, #8]
 8005378:	60cb      	str	r3, [r1, #12]
 800537a:	e77b      	b.n	8005274 <_free_r+0x60>
 800537c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005380:	20000130 	.word	0x20000130
 8005384:	20000538 	.word	0x20000538
 8005388:	20000608 	.word	0x20000608
 800538c:	20000138 	.word	0x20000138

08005390 <memmove>:
 8005390:	4288      	cmp	r0, r1
 8005392:	b510      	push	{r4, lr}
 8005394:	eb01 0302 	add.w	r3, r1, r2
 8005398:	d801      	bhi.n	800539e <memmove+0xe>
 800539a:	1e42      	subs	r2, r0, #1
 800539c:	e00b      	b.n	80053b6 <memmove+0x26>
 800539e:	4298      	cmp	r0, r3
 80053a0:	d2fb      	bcs.n	800539a <memmove+0xa>
 80053a2:	1881      	adds	r1, r0, r2
 80053a4:	1ad2      	subs	r2, r2, r3
 80053a6:	42d3      	cmn	r3, r2
 80053a8:	d004      	beq.n	80053b4 <memmove+0x24>
 80053aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053ae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80053b2:	e7f8      	b.n	80053a6 <memmove+0x16>
 80053b4:	bd10      	pop	{r4, pc}
 80053b6:	4299      	cmp	r1, r3
 80053b8:	d004      	beq.n	80053c4 <memmove+0x34>
 80053ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053be:	f802 4f01 	strb.w	r4, [r2, #1]!
 80053c2:	e7f8      	b.n	80053b6 <memmove+0x26>
 80053c4:	bd10      	pop	{r4, pc}

080053c6 <memset>:
 80053c6:	4402      	add	r2, r0
 80053c8:	4603      	mov	r3, r0
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d002      	beq.n	80053d4 <memset+0xe>
 80053ce:	f803 1b01 	strb.w	r1, [r3], #1
 80053d2:	e7fa      	b.n	80053ca <memset+0x4>
 80053d4:	4770      	bx	lr
	...

080053d8 <_realloc_r>:
 80053d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053dc:	4681      	mov	r9, r0
 80053de:	460c      	mov	r4, r1
 80053e0:	b929      	cbnz	r1, 80053ee <_realloc_r+0x16>
 80053e2:	4611      	mov	r1, r2
 80053e4:	b003      	add	sp, #12
 80053e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ea:	f7ff b8fd 	b.w	80045e8 <_malloc_r>
 80053ee:	9201      	str	r2, [sp, #4]
 80053f0:	f7ff fb25 	bl	8004a3e <__malloc_lock>
 80053f4:	9a01      	ldr	r2, [sp, #4]
 80053f6:	f854 ec04 	ldr.w	lr, [r4, #-4]
 80053fa:	f102 080b 	add.w	r8, r2, #11
 80053fe:	f1b8 0f16 	cmp.w	r8, #22
 8005402:	f1a4 0b08 	sub.w	fp, r4, #8
 8005406:	f02e 0503 	bic.w	r5, lr, #3
 800540a:	d903      	bls.n	8005414 <_realloc_r+0x3c>
 800540c:	f038 0807 	bics.w	r8, r8, #7
 8005410:	d502      	bpl.n	8005418 <_realloc_r+0x40>
 8005412:	e003      	b.n	800541c <_realloc_r+0x44>
 8005414:	f04f 0810 	mov.w	r8, #16
 8005418:	4590      	cmp	r8, r2
 800541a:	d204      	bcs.n	8005426 <_realloc_r+0x4e>
 800541c:	230c      	movs	r3, #12
 800541e:	f8c9 3000 	str.w	r3, [r9]
 8005422:	2000      	movs	r0, #0
 8005424:	e17d      	b.n	8005722 <_realloc_r+0x34a>
 8005426:	45a8      	cmp	r8, r5
 8005428:	f340 8150 	ble.w	80056cc <_realloc_r+0x2f4>
 800542c:	4ba6      	ldr	r3, [pc, #664]	; (80056c8 <_realloc_r+0x2f0>)
 800542e:	6898      	ldr	r0, [r3, #8]
 8005430:	eb0b 0105 	add.w	r1, fp, r5
 8005434:	4281      	cmp	r1, r0
 8005436:	684f      	ldr	r7, [r1, #4]
 8005438:	d005      	beq.n	8005446 <_realloc_r+0x6e>
 800543a:	f027 0601 	bic.w	r6, r7, #1
 800543e:	440e      	add	r6, r1
 8005440:	6876      	ldr	r6, [r6, #4]
 8005442:	07f6      	lsls	r6, r6, #31
 8005444:	d426      	bmi.n	8005494 <_realloc_r+0xbc>
 8005446:	f027 0a03 	bic.w	sl, r7, #3
 800544a:	4281      	cmp	r1, r0
 800544c:	eb05 070a 	add.w	r7, r5, sl
 8005450:	d118      	bne.n	8005484 <_realloc_r+0xac>
 8005452:	f108 0610 	add.w	r6, r8, #16
 8005456:	42b7      	cmp	r7, r6
 8005458:	db1f      	blt.n	800549a <_realloc_r+0xc2>
 800545a:	eb0b 0008 	add.w	r0, fp, r8
 800545e:	ebc8 0707 	rsb	r7, r8, r7
 8005462:	f047 0701 	orr.w	r7, r7, #1
 8005466:	6098      	str	r0, [r3, #8]
 8005468:	6047      	str	r7, [r0, #4]
 800546a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	ea43 0308 	orr.w	r3, r3, r8
 8005476:	4648      	mov	r0, r9
 8005478:	f844 3c04 	str.w	r3, [r4, #-4]
 800547c:	f7ff fae0 	bl	8004a40 <__malloc_unlock>
 8005480:	4620      	mov	r0, r4
 8005482:	e14e      	b.n	8005722 <_realloc_r+0x34a>
 8005484:	45b8      	cmp	r8, r7
 8005486:	dc08      	bgt.n	800549a <_realloc_r+0xc2>
 8005488:	68cb      	ldr	r3, [r1, #12]
 800548a:	688a      	ldr	r2, [r1, #8]
 800548c:	463d      	mov	r5, r7
 800548e:	60d3      	str	r3, [r2, #12]
 8005490:	609a      	str	r2, [r3, #8]
 8005492:	e11b      	b.n	80056cc <_realloc_r+0x2f4>
 8005494:	f04f 0a00 	mov.w	sl, #0
 8005498:	4651      	mov	r1, sl
 800549a:	f01e 0f01 	tst.w	lr, #1
 800549e:	f040 80c3 	bne.w	8005628 <_realloc_r+0x250>
 80054a2:	f854 7c08 	ldr.w	r7, [r4, #-8]
 80054a6:	ebc7 070b 	rsb	r7, r7, fp
 80054aa:	687e      	ldr	r6, [r7, #4]
 80054ac:	f026 0603 	bic.w	r6, r6, #3
 80054b0:	442e      	add	r6, r5
 80054b2:	2900      	cmp	r1, #0
 80054b4:	f000 8083 	beq.w	80055be <_realloc_r+0x1e6>
 80054b8:	4281      	cmp	r1, r0
 80054ba:	44b2      	add	sl, r6
 80054bc:	d147      	bne.n	800554e <_realloc_r+0x176>
 80054be:	f108 0110 	add.w	r1, r8, #16
 80054c2:	458a      	cmp	sl, r1
 80054c4:	db7b      	blt.n	80055be <_realloc_r+0x1e6>
 80054c6:	463e      	mov	r6, r7
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	f856 1f08 	ldr.w	r1, [r6, #8]!
 80054ce:	60ca      	str	r2, [r1, #12]
 80054d0:	6091      	str	r1, [r2, #8]
 80054d2:	1f2a      	subs	r2, r5, #4
 80054d4:	2a24      	cmp	r2, #36	; 0x24
 80054d6:	d825      	bhi.n	8005524 <_realloc_r+0x14c>
 80054d8:	2a13      	cmp	r2, #19
 80054da:	d91b      	bls.n	8005514 <_realloc_r+0x13c>
 80054dc:	6821      	ldr	r1, [r4, #0]
 80054de:	60b9      	str	r1, [r7, #8]
 80054e0:	6861      	ldr	r1, [r4, #4]
 80054e2:	60f9      	str	r1, [r7, #12]
 80054e4:	2a1b      	cmp	r2, #27
 80054e6:	d803      	bhi.n	80054f0 <_realloc_r+0x118>
 80054e8:	f107 0210 	add.w	r2, r7, #16
 80054ec:	3408      	adds	r4, #8
 80054ee:	e012      	b.n	8005516 <_realloc_r+0x13e>
 80054f0:	68a1      	ldr	r1, [r4, #8]
 80054f2:	6139      	str	r1, [r7, #16]
 80054f4:	68e1      	ldr	r1, [r4, #12]
 80054f6:	6179      	str	r1, [r7, #20]
 80054f8:	2a24      	cmp	r2, #36	; 0x24
 80054fa:	bf01      	itttt	eq
 80054fc:	6922      	ldreq	r2, [r4, #16]
 80054fe:	61ba      	streq	r2, [r7, #24]
 8005500:	6961      	ldreq	r1, [r4, #20]
 8005502:	61f9      	streq	r1, [r7, #28]
 8005504:	bf19      	ittee	ne
 8005506:	f107 0218 	addne.w	r2, r7, #24
 800550a:	3410      	addne	r4, #16
 800550c:	f107 0220 	addeq.w	r2, r7, #32
 8005510:	3418      	addeq	r4, #24
 8005512:	e000      	b.n	8005516 <_realloc_r+0x13e>
 8005514:	4632      	mov	r2, r6
 8005516:	6821      	ldr	r1, [r4, #0]
 8005518:	6011      	str	r1, [r2, #0]
 800551a:	6861      	ldr	r1, [r4, #4]
 800551c:	6051      	str	r1, [r2, #4]
 800551e:	68a1      	ldr	r1, [r4, #8]
 8005520:	6091      	str	r1, [r2, #8]
 8005522:	e005      	b.n	8005530 <_realloc_r+0x158>
 8005524:	4621      	mov	r1, r4
 8005526:	4630      	mov	r0, r6
 8005528:	9301      	str	r3, [sp, #4]
 800552a:	f7ff ff31 	bl	8005390 <memmove>
 800552e:	9b01      	ldr	r3, [sp, #4]
 8005530:	eb07 0208 	add.w	r2, r7, r8
 8005534:	ebc8 0a0a 	rsb	sl, r8, sl
 8005538:	609a      	str	r2, [r3, #8]
 800553a:	f04a 0301 	orr.w	r3, sl, #1
 800553e:	6053      	str	r3, [r2, #4]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	ea43 0308 	orr.w	r3, r3, r8
 800554a:	607b      	str	r3, [r7, #4]
 800554c:	e0b6      	b.n	80056bc <_realloc_r+0x2e4>
 800554e:	45d0      	cmp	r8, sl
 8005550:	dc35      	bgt.n	80055be <_realloc_r+0x1e6>
 8005552:	68cb      	ldr	r3, [r1, #12]
 8005554:	688a      	ldr	r2, [r1, #8]
 8005556:	4638      	mov	r0, r7
 8005558:	60d3      	str	r3, [r2, #12]
 800555a:	609a      	str	r2, [r3, #8]
 800555c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	60d3      	str	r3, [r2, #12]
 8005564:	609a      	str	r2, [r3, #8]
 8005566:	1f2a      	subs	r2, r5, #4
 8005568:	2a24      	cmp	r2, #36	; 0x24
 800556a:	d823      	bhi.n	80055b4 <_realloc_r+0x1dc>
 800556c:	2a13      	cmp	r2, #19
 800556e:	d91a      	bls.n	80055a6 <_realloc_r+0x1ce>
 8005570:	6823      	ldr	r3, [r4, #0]
 8005572:	60bb      	str	r3, [r7, #8]
 8005574:	6863      	ldr	r3, [r4, #4]
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	2a1b      	cmp	r2, #27
 800557a:	d803      	bhi.n	8005584 <_realloc_r+0x1ac>
 800557c:	f107 0010 	add.w	r0, r7, #16
 8005580:	3408      	adds	r4, #8
 8005582:	e010      	b.n	80055a6 <_realloc_r+0x1ce>
 8005584:	68a3      	ldr	r3, [r4, #8]
 8005586:	613b      	str	r3, [r7, #16]
 8005588:	68e3      	ldr	r3, [r4, #12]
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	2a24      	cmp	r2, #36	; 0x24
 800558e:	bf01      	itttt	eq
 8005590:	6923      	ldreq	r3, [r4, #16]
 8005592:	61bb      	streq	r3, [r7, #24]
 8005594:	6963      	ldreq	r3, [r4, #20]
 8005596:	61fb      	streq	r3, [r7, #28]
 8005598:	bf19      	ittee	ne
 800559a:	f107 0018 	addne.w	r0, r7, #24
 800559e:	3410      	addne	r4, #16
 80055a0:	f107 0020 	addeq.w	r0, r7, #32
 80055a4:	3418      	addeq	r4, #24
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	6003      	str	r3, [r0, #0]
 80055aa:	6863      	ldr	r3, [r4, #4]
 80055ac:	6043      	str	r3, [r0, #4]
 80055ae:	68a3      	ldr	r3, [r4, #8]
 80055b0:	6083      	str	r3, [r0, #8]
 80055b2:	e002      	b.n	80055ba <_realloc_r+0x1e2>
 80055b4:	4621      	mov	r1, r4
 80055b6:	f7ff feeb 	bl	8005390 <memmove>
 80055ba:	4655      	mov	r5, sl
 80055bc:	e02e      	b.n	800561c <_realloc_r+0x244>
 80055be:	45b0      	cmp	r8, r6
 80055c0:	dc32      	bgt.n	8005628 <_realloc_r+0x250>
 80055c2:	4638      	mov	r0, r7
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80055ca:	60d3      	str	r3, [r2, #12]
 80055cc:	609a      	str	r2, [r3, #8]
 80055ce:	1f2a      	subs	r2, r5, #4
 80055d0:	2a24      	cmp	r2, #36	; 0x24
 80055d2:	d825      	bhi.n	8005620 <_realloc_r+0x248>
 80055d4:	2a13      	cmp	r2, #19
 80055d6:	d91a      	bls.n	800560e <_realloc_r+0x236>
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	60bb      	str	r3, [r7, #8]
 80055dc:	6863      	ldr	r3, [r4, #4]
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	2a1b      	cmp	r2, #27
 80055e2:	d803      	bhi.n	80055ec <_realloc_r+0x214>
 80055e4:	f107 0010 	add.w	r0, r7, #16
 80055e8:	3408      	adds	r4, #8
 80055ea:	e010      	b.n	800560e <_realloc_r+0x236>
 80055ec:	68a3      	ldr	r3, [r4, #8]
 80055ee:	613b      	str	r3, [r7, #16]
 80055f0:	68e3      	ldr	r3, [r4, #12]
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	2a24      	cmp	r2, #36	; 0x24
 80055f6:	bf01      	itttt	eq
 80055f8:	6923      	ldreq	r3, [r4, #16]
 80055fa:	61bb      	streq	r3, [r7, #24]
 80055fc:	6963      	ldreq	r3, [r4, #20]
 80055fe:	61fb      	streq	r3, [r7, #28]
 8005600:	bf19      	ittee	ne
 8005602:	f107 0018 	addne.w	r0, r7, #24
 8005606:	3410      	addne	r4, #16
 8005608:	f107 0020 	addeq.w	r0, r7, #32
 800560c:	3418      	addeq	r4, #24
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	6003      	str	r3, [r0, #0]
 8005612:	6863      	ldr	r3, [r4, #4]
 8005614:	6043      	str	r3, [r0, #4]
 8005616:	68a3      	ldr	r3, [r4, #8]
 8005618:	6083      	str	r3, [r0, #8]
 800561a:	4635      	mov	r5, r6
 800561c:	46bb      	mov	fp, r7
 800561e:	e055      	b.n	80056cc <_realloc_r+0x2f4>
 8005620:	4621      	mov	r1, r4
 8005622:	f7ff feb5 	bl	8005390 <memmove>
 8005626:	e7f8      	b.n	800561a <_realloc_r+0x242>
 8005628:	4611      	mov	r1, r2
 800562a:	4648      	mov	r0, r9
 800562c:	f7fe ffdc 	bl	80045e8 <_malloc_r>
 8005630:	4606      	mov	r6, r0
 8005632:	2800      	cmp	r0, #0
 8005634:	d042      	beq.n	80056bc <_realloc_r+0x2e4>
 8005636:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800563a:	f023 0301 	bic.w	r3, r3, #1
 800563e:	f1a0 0208 	sub.w	r2, r0, #8
 8005642:	445b      	add	r3, fp
 8005644:	429a      	cmp	r2, r3
 8005646:	d105      	bne.n	8005654 <_realloc_r+0x27c>
 8005648:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800564c:	f023 0303 	bic.w	r3, r3, #3
 8005650:	441d      	add	r5, r3
 8005652:	e03b      	b.n	80056cc <_realloc_r+0x2f4>
 8005654:	1f2a      	subs	r2, r5, #4
 8005656:	2a24      	cmp	r2, #36	; 0x24
 8005658:	d829      	bhi.n	80056ae <_realloc_r+0x2d6>
 800565a:	2a13      	cmp	r2, #19
 800565c:	d91e      	bls.n	800569c <_realloc_r+0x2c4>
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	6003      	str	r3, [r0, #0]
 8005662:	6863      	ldr	r3, [r4, #4]
 8005664:	6043      	str	r3, [r0, #4]
 8005666:	2a1b      	cmp	r2, #27
 8005668:	d804      	bhi.n	8005674 <_realloc_r+0x29c>
 800566a:	f100 0308 	add.w	r3, r0, #8
 800566e:	f104 0208 	add.w	r2, r4, #8
 8005672:	e015      	b.n	80056a0 <_realloc_r+0x2c8>
 8005674:	68a3      	ldr	r3, [r4, #8]
 8005676:	6083      	str	r3, [r0, #8]
 8005678:	68e3      	ldr	r3, [r4, #12]
 800567a:	60c3      	str	r3, [r0, #12]
 800567c:	2a24      	cmp	r2, #36	; 0x24
 800567e:	bf01      	itttt	eq
 8005680:	6923      	ldreq	r3, [r4, #16]
 8005682:	6103      	streq	r3, [r0, #16]
 8005684:	6961      	ldreq	r1, [r4, #20]
 8005686:	6141      	streq	r1, [r0, #20]
 8005688:	bf19      	ittee	ne
 800568a:	f100 0310 	addne.w	r3, r0, #16
 800568e:	f104 0210 	addne.w	r2, r4, #16
 8005692:	f100 0318 	addeq.w	r3, r0, #24
 8005696:	f104 0218 	addeq.w	r2, r4, #24
 800569a:	e001      	b.n	80056a0 <_realloc_r+0x2c8>
 800569c:	4603      	mov	r3, r0
 800569e:	4622      	mov	r2, r4
 80056a0:	6811      	ldr	r1, [r2, #0]
 80056a2:	6019      	str	r1, [r3, #0]
 80056a4:	6851      	ldr	r1, [r2, #4]
 80056a6:	6059      	str	r1, [r3, #4]
 80056a8:	6892      	ldr	r2, [r2, #8]
 80056aa:	609a      	str	r2, [r3, #8]
 80056ac:	e002      	b.n	80056b4 <_realloc_r+0x2dc>
 80056ae:	4621      	mov	r1, r4
 80056b0:	f7ff fe6e 	bl	8005390 <memmove>
 80056b4:	4621      	mov	r1, r4
 80056b6:	4648      	mov	r0, r9
 80056b8:	f7ff fdac 	bl	8005214 <_free_r>
 80056bc:	4648      	mov	r0, r9
 80056be:	f7ff f9bf 	bl	8004a40 <__malloc_unlock>
 80056c2:	4630      	mov	r0, r6
 80056c4:	e02d      	b.n	8005722 <_realloc_r+0x34a>
 80056c6:	bf00      	nop
 80056c8:	20000130 	.word	0x20000130
 80056cc:	ebc8 0205 	rsb	r2, r8, r5
 80056d0:	2a0f      	cmp	r2, #15
 80056d2:	f8db 3004 	ldr.w	r3, [fp, #4]
 80056d6:	d914      	bls.n	8005702 <_realloc_r+0x32a>
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	eb0b 0108 	add.w	r1, fp, r8
 80056e0:	ea43 0308 	orr.w	r3, r3, r8
 80056e4:	f8cb 3004 	str.w	r3, [fp, #4]
 80056e8:	f042 0301 	orr.w	r3, r2, #1
 80056ec:	440a      	add	r2, r1
 80056ee:	604b      	str	r3, [r1, #4]
 80056f0:	6853      	ldr	r3, [r2, #4]
 80056f2:	f043 0301 	orr.w	r3, r3, #1
 80056f6:	6053      	str	r3, [r2, #4]
 80056f8:	3108      	adds	r1, #8
 80056fa:	4648      	mov	r0, r9
 80056fc:	f7ff fd8a 	bl	8005214 <_free_r>
 8005700:	e00a      	b.n	8005718 <_realloc_r+0x340>
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	432b      	orrs	r3, r5
 8005708:	eb0b 0205 	add.w	r2, fp, r5
 800570c:	f8cb 3004 	str.w	r3, [fp, #4]
 8005710:	6853      	ldr	r3, [r2, #4]
 8005712:	f043 0301 	orr.w	r3, r3, #1
 8005716:	6053      	str	r3, [r2, #4]
 8005718:	4648      	mov	r0, r9
 800571a:	f7ff f991 	bl	8004a40 <__malloc_unlock>
 800571e:	f10b 0008 	add.w	r0, fp, #8
 8005722:	b003      	add	sp, #12
 8005724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005728 <_sbrk>:
 8005728:	4b04      	ldr	r3, [pc, #16]	; (800573c <_sbrk+0x14>)
 800572a:	6819      	ldr	r1, [r3, #0]
 800572c:	4602      	mov	r2, r0
 800572e:	b909      	cbnz	r1, 8005734 <_sbrk+0xc>
 8005730:	4903      	ldr	r1, [pc, #12]	; (8005740 <_sbrk+0x18>)
 8005732:	6019      	str	r1, [r3, #0]
 8005734:	6818      	ldr	r0, [r3, #0]
 8005736:	4402      	add	r2, r0
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	4770      	bx	lr
 800573c:	20000634 	.word	0x20000634
 8005740:	20000758 	.word	0x20000758

08005744 <_init>:
 8005744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005746:	bf00      	nop
 8005748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800574a:	bc08      	pop	{r3}
 800574c:	469e      	mov	lr, r3
 800574e:	4770      	bx	lr

08005750 <_fini>:
 8005750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005752:	bf00      	nop
 8005754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005756:	bc08      	pop	{r3}
 8005758:	469e      	mov	lr, r3
 800575a:	4770      	bx	lr
